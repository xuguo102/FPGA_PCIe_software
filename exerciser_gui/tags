!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOCATE_MEMORY_COPY	libberdip/src/memory.cpp	/^internal ALLOCATE_MEMORY_COPY(arena_allocate_copy)$/;"	f
ALLOCATE_MEMORY_COPY	libberdip/src/memory.cpp	/^internal ALLOCATE_MEMORY_COPY(platform_allocate_copy)$/;"	f
ALLOCATE_MEMORY_COPY	libberdip/src/memory.h	72;"	d
ALLOCATE_MEMORY_COPY	libberdip/src/std_memory.cpp	/^internal ALLOCATE_MEMORY_COPY(std_allocate_copy)$/;"	f
ALLOCATE_MEMORY_SIZE	libberdip/src/memory.cpp	/^internal ALLOCATE_MEMORY_SIZE(arena_allocate_size)$/;"	f
ALLOCATE_MEMORY_SIZE	libberdip/src/memory.cpp	/^internal ALLOCATE_MEMORY_SIZE(platform_allocate_size)$/;"	f
ALLOCATE_MEMORY_SIZE	libberdip/src/memory.h	69;"	d
ALLOCATE_MEMORY_SIZE	libberdip/src/std_memory.cpp	/^internal ALLOCATE_MEMORY_SIZE(std_allocate_size)$/;"	f
ALLOCATE_MEMORY_SIZE	libberdip/src/suballoc.cpp	/^internal ALLOCATE_MEMORY_SIZE(sub_alloc)$/;"	f
ALLOCATE_MEMORY_STRINGZ	libberdip/src/memory.cpp	/^internal ALLOCATE_MEMORY_STRINGZ(arena_allocate_stringz)$/;"	f
ALLOCATE_MEMORY_STRINGZ	libberdip/src/memory.cpp	/^internal ALLOCATE_MEMORY_STRINGZ(platform_allocate_stringz)$/;"	f
ALLOCATE_MEMORY_STRINGZ	libberdip/src/memory.h	75;"	d
ALLOCATE_MEMORY_STRINGZ	libberdip/src/std_memory.cpp	/^internal ALLOCATE_MEMORY_STRINGZ(std_allocate_stringz)$/;"	f
ALLOCATE_MEMORY_STRINGZ	libberdip/src/suballoc.cpp	/^internal ALLOCATE_MEMORY_STRINGZ(sub_alloc_stringz)$/;"	f
AMDEXERCISER_DEVICE	kernel/xbmd.h	59;"	d
AMDEXERCISER_MAJOR_NUMBER	kernel/xbmd.h	60;"	d
AMDEXERCISER_MINOR_NUMBER	kernel/xbmd.h	61;"	d
AMDEXERCISER_NAME	kernel/xbmd.h	58;"	d
API	libberdip/src/platform.h	/^struct API$/;"	s
AllocateMemoryCopy	libberdip/src/memory.h	/^typedef ALLOCATE_MEMORY_COPY(AllocateMemoryCopy);$/;"	t
AllocateMemorySize	libberdip/src/memory.h	/^typedef ALLOCATE_MEMORY_SIZE(AllocateMemorySize);$/;"	t
AllocateMemoryStringZ	libberdip/src/memory.h	/^typedef ALLOCATE_MEMORY_STRINGZ(AllocateMemoryStringZ);$/;"	t
ApiFile	libberdip/src/files.h	/^typedef struct ApiFile$/;"	s
ApiFile	libberdip/src/files.h	/^} ApiFile;$/;"	t	typeref:struct:ApiFile
ApiFileDir	libberdip/src/files.h	/^typedef struct ApiFileDir$/;"	s
ApiFileDir	libberdip/src/files.h	/^} ApiFileDir;$/;"	t	typeref:struct:ApiFileDir
ApiFileDirGroup	libberdip/src/files.h	/^typedef struct ApiFileDirGroup$/;"	s
ApiFileDirGroup	libberdip/src/files.h	/^} ApiFileDirGroup;$/;"	t	typeref:struct:ApiFileDirGroup
ApiFileGroup	libberdip/src/files.h	/^typedef struct ApiFileGroup$/;"	s
ApiFileGroup	libberdip/src/files.h	/^} ApiFileGroup;$/;"	t	typeref:struct:ApiFileGroup
BOOTSTRAP_ALLOCATOR	libberdip/src/memory.cpp	/^internal BOOTSTRAP_ALLOCATOR(arena_bootstrap)$/;"	f
BOOTSTRAP_ALLOCATOR	libberdip/src/memory.h	89;"	d
BUILDER_XML_FILE	user/xbmd_main.cpp	80;"	d	file:
BitScanResult	libberdip/src/common.h	/^typedef struct BitScanResult$/;"	s
BitScanResult	libberdip/src/common.h	/^} BitScanResult;$/;"	t	typeref:struct:BitScanResult
BitStreamKind	libberdip/src/bitstreamer.h	/^enum BitStreamKind$/;"	g
BitStream_BigEndian	libberdip/src/bitstreamer.h	/^    BitStream_BigEndian,$/;"	e	enum:BitStreamKind
BitStream_LittleEndian	libberdip/src/bitstreamer.h	/^    BitStream_LittleEndian,$/;"	e	enum:BitStreamKind
BitStream_None	libberdip/src/bitstreamer.h	/^    BitStream_None,$/;"	e	enum:BitStreamKind
BitStreamer	libberdip/src/bitstreamer.h	/^struct BitStreamer$/;"	s
BitmapFont	libberdip/src/fonts.h	/^struct BitmapFont$/;"	s
BitmapHeader	libberdip/src/bitmap.cpp	/^struct BitmapHeader$/;"	s	file:
BitmapHeader_v5	libberdip/src/bitmap.cpp	/^struct BitmapHeader_v5 {$/;"	s	file:
BootstrapAllocator	libberdip/src/memory.h	/^typedef BOOTSTRAP_ALLOCATOR(BootstrapAllocator);$/;"	t
Buffer	libberdip/src/types.h	/^typedef struct Buffer$/;"	s
Buffer	libberdip/src/types.h	/^} Buffer;$/;"	t	typeref:struct:Buffer
CASE1	libberdip/src/tokenizer.cpp	116;"	d	file:
CASE1	libberdip/src/tokenizer.cpp	403;"	d	file:
CASE2	libberdip/src/tokenizer.cpp	123;"	d	file:
CASE2	libberdip/src/tokenizer.cpp	402;"	d	file:
CASE2B	libberdip/src/tokenizer.cpp	135;"	d	file:
CASE2B	libberdip/src/tokenizer.cpp	401;"	d	file:
CASE3B	libberdip/src/tokenizer.cpp	151;"	d	file:
CASE3B	libberdip/src/tokenizer.cpp	400;"	d	file:
CLOSE_FILE	libberdip/src/files.h	122;"	d
CLOSE_FILE	libberdip/src/linux_file.c	/^CLOSE_FILE(linux_close_file)$/;"	f
CLOSE_FILE	libberdip/src/std_file.c	/^internal CLOSE_FILE(close_file)$/;"	f
COMPILER_GCC	libberdip/src/common.h	36;"	d
COMPILER_GCC	libberdip/src/common.h	55;"	d
COMPILER_GCC	libberdip/src/common.h	56;"	d
COMPILER_LLVM	libberdip/src/common.h	32;"	d
COMPILER_LLVM	libberdip/src/common.h	52;"	d
COMPILER_LLVM	libberdip/src/common.h	53;"	d
COMPILER_MSVC	libberdip/src/common.h	24;"	d
COMPILER_MSVC	libberdip/src/common.h	45;"	d
COMPILER_MSVC	libberdip/src/common.h	46;"	d
COMPILER_MSVC	libberdip/src/common.h	70;"	d
COMPILER_MSVC	libberdip/src/common.h	71;"	d
COMPILER_MSVC_X86	libberdip/src/common.h	28;"	d
COMPILER_MSVC_X86	libberdip/src/common.h	48;"	d
COMPILER_MSVC_X86	libberdip/src/common.h	49;"	d
COMPILER_TCC	libberdip/src/common.h	40;"	d
COMPILER_TCC	libberdip/src/common.h	58;"	d
COMPILER_TCC	libberdip/src/common.h	59;"	d
COMPLETE_PREVIOUS_READS_BEFORE_FUTURE_READS	libberdip/src/intrinsics.h	15;"	d
COMPLETE_PREVIOUS_READS_BEFORE_FUTURE_READS	libberdip/src/intrinsics.h	67;"	d
COMPLETE_PREVIOUS_WRITES_BEFORE_FUTURE_WRITES	libberdip/src/intrinsics.h	16;"	d
COMPLETE_PREVIOUS_WRITES_BEFORE_FUTURE_WRITES	libberdip/src/intrinsics.h	68;"	d
CRIT_ERR	kernel/xbmd.h	67;"	d
CircularBuffer	libberdip/src/circularbuf.h	/^struct CircularBuffer$/;"	s
CloseFile	libberdip/src/files.h	/^typedef CLOSE_FILE(CloseFile);$/;"	t
ColouredPoint	libberdip/src/drawing.cpp	/^struct ColouredPoint$/;"	s	file:
Complex32	libberdip/src/complex.h	/^struct Complex32$/;"	s
Complex64	libberdip/src/complex.h	/^struct Complex64$/;"	s
Config	user/cli.cpp	/^struct Config$/;"	s	file:
DCSR	user/xbmd_main.h	57;"	d
DEALLOCATE_ALL	libberdip/src/memory.cpp	/^internal DEALLOCATE_ALL(arena_deallocate_all)$/;"	f
DEALLOCATE_ALL	libberdip/src/memory.cpp	/^internal DEALLOCATE_ALL(platform_deallocate_all)$/;"	f
DEALLOCATE_ALL	libberdip/src/memory.h	84;"	d
DEALLOCATE_MEMORY	libberdip/src/memory.cpp	/^internal DEALLOCATE_MEMORY(arena_deallocate)$/;"	f
DEALLOCATE_MEMORY	libberdip/src/memory.cpp	/^internal DEALLOCATE_MEMORY(platform_deallocate)$/;"	f
DEALLOCATE_MEMORY	libberdip/src/memory.h	81;"	d
DEALLOCATE_MEMORY	libberdip/src/std_memory.cpp	/^internal DEALLOCATE_MEMORY(std_deallocate)$/;"	f
DEALLOCATE_MEMORY	libberdip/src/suballoc.cpp	/^internal DEALLOCATE_MEMORY(sub_dealloc)$/;"	f
DFCCINFO	user/xbmd_main.h	80;"	d
DFCCTL	user/xbmd_main.h	77;"	d
DFCNPINFO	user/xbmd_main.h	79;"	d
DFCPINFO	user/xbmd_main.h	78;"	d
DLNKC	user/xbmd_main.h	76;"	d
DLTRSSTAT	user/xbmd_main.h	73;"	d
DLWSTAT	user/xbmd_main.h	72;"	d
DMACR	user/xbmd_main.h	58;"	d
DMA_BUF_SIZE	kernel/xbmd.h	71;"	d
DMISCCONT	user/xbmd_main.h	74;"	d
DMSICONT	user/xbmd_main.h	75;"	d
DO_READ_REG	user/bmd.cpp	915;"	d	file:
DO_READ_REG	user/bmd.cpp	972;"	d	file:
DRAWING2D_SLOW	libberdip/src/drawing2d.cpp	2;"	d	file:
DRAWING_SLOW	libberdip/src/drawing.cpp	2;"	d	file:
DeallocateAll	libberdip/src/memory.h	/^typedef DEALLOCATE_ALL(DeallocateAll);$/;"	t
DeallocateMemory	libberdip/src/memory.h	/^typedef DEALLOCATE_MEMORY(DeallocateMemory);$/;"	t
DivModS32	libberdip/src/types.h	/^typedef struct DivModS32$/;"	s
DivModS32	libberdip/src/types.h	/^} DivModS32;$/;"	t	typeref:struct:DivModS32
DivModS64	libberdip/src/types.h	/^typedef struct DivModS64$/;"	s
DivModS64	libberdip/src/types.h	/^} DivModS64;$/;"	t	typeref:struct:DivModS64
DivModU32	libberdip/src/types.h	/^typedef struct DivModU32$/;"	s
DivModU32	libberdip/src/types.h	/^} DivModU32;$/;"	t	typeref:struct:DivModU32
DivModU64	libberdip/src/types.h	/^typedef struct DivModU64$/;"	s
DivModU64	libberdip/src/types.h	/^} DivModU64;$/;"	t	typeref:struct:DivModU64
DrawClear	libberdip/src/rendering2d.h	/^struct DrawClear$/;"	s
DrawHeader	libberdip/src/rendering2d.h	/^struct DrawHeader$/;"	s
DrawImage	libberdip/src/rendering2d.h	/^struct DrawImage$/;"	s
DrawKind	libberdip/src/rendering2d.h	/^enum DrawKind$/;"	g
Draw_Circle	libberdip/src/rendering2d.h	/^    Draw_Circle,$/;"	e	enum:DrawKind
Draw_Clear	libberdip/src/rendering2d.h	/^    Draw_Clear,$/;"	e	enum:DrawKind
Draw_Image	libberdip/src/rendering2d.h	/^    Draw_Image,$/;"	e	enum:DrawKind
Draw_Line	libberdip/src/rendering2d.h	/^    Draw_Line,$/;"	e	enum:DrawKind
Draw_None	libberdip/src/rendering2d.h	/^    Draw_None,$/;"	e	enum:DrawKind
Draw_Triangle	libberdip/src/rendering2d.h	/^    Draw_Triangle,$/;"	e	enum:DrawKind
ENUM_ITEM	libberdip/src/enums_define_start.h	6;"	d
ENUM_ITEM	libberdip/src/enums_end.h	2;"	d
ENUM_ITEM	libberdip/src/enums_string_start.h	2;"	d
ENUM_ITEM_DEFAULT	libberdip/src/enums_define_start.h	2;"	d
ENUM_ITEM_DEFAULT	libberdip/src/enums_end.h	4;"	d
ENUM_ITEM_GET_NTH_ARG	libberdip/src/enums_define_start.h	3;"	d
ENUM_ITEM_GET_NTH_ARG	libberdip/src/enums_end.h	5;"	d
ENUM_ITEM_VALUE	libberdip/src/enums_define_start.h	1;"	d
ENUM_ITEM_VALUE	libberdip/src/enums_end.h	3;"	d
ENUM_START	libberdip/src/enums_define_start.h	5;"	d
ENUM_START	libberdip/src/enums_end.h	1;"	d
ENUM_START	libberdip/src/enums_string_start.h	1;"	d
F32_4x	libberdip/src/multilane.h	/^F32_4x(__m128 m)$/;"	f
F32_4x	libberdip/src/multilane.h	/^F32_4x(f32 *f)$/;"	f
F32_4x	libberdip/src/multilane.h	/^F32_4x(f32 f)$/;"	f
F32_4x	libberdip/src/multilane.h	/^F32_4x(f32 f0, f32 f1, f32 f2, f32 f3)$/;"	f
F32_4x	libberdip/src/multilane.h	/^F32_4x(f64_2x x)$/;"	f
F32_4x	libberdip/src/multilane.h	/^F32_4x(f64_2x x, f64_2x y)$/;"	f
F32_4x	libberdip/src/multilane.h	/^F32_4x(u32 u)$/;"	f
F32_ATAN_COEF_0	libberdip/src/multilane.h	1565;"	d
F32_ATAN_COEF_0	libberdip/src/trigonometry_v2.h	17;"	d
F32_ATAN_COEF_1	libberdip/src/multilane.h	1566;"	d
F32_ATAN_COEF_1	libberdip/src/trigonometry_v2.h	18;"	d
F32_ATAN_COEF_2	libberdip/src/multilane.h	1567;"	d
F32_ATAN_COEF_2	libberdip/src/trigonometry_v2.h	19;"	d
F32_ATAN_COEF_3	libberdip/src/multilane.h	1568;"	d
F32_ATAN_COEF_3	libberdip/src/trigonometry_v2.h	20;"	d
F32_COS_COEF_0	libberdip/src/multilane.h	1560;"	d
F32_COS_COEF_0	libberdip/src/trigonometry_v2.h	12;"	d
F32_COS_COEF_1	libberdip/src/multilane.h	1561;"	d
F32_COS_COEF_1	libberdip/src/trigonometry_v2.h	13;"	d
F32_COS_COEF_2	libberdip/src/multilane.h	1562;"	d
F32_COS_COEF_2	libberdip/src/trigonometry_v2.h	14;"	d
F32_COS_COEF_3	libberdip/src/multilane.h	1563;"	d
F32_COS_COEF_3	libberdip/src/trigonometry_v2.h	15;"	d
F32_E	libberdip/src/common.h	184;"	d
F32_EXP_MASK	libberdip/src/common.h	150;"	d
F32_FOUR_OVER_PI	libberdip/src/common.h	188;"	d
F32_FRAC_MASK	libberdip/src/common.h	151;"	d
F32_INF	libberdip/src/common.h	154;"	d
F32_INF	libberdip/src/common.h	158;"	d
F32_MAX	libberdip/src/common.h	153;"	d
F32_MAX	libberdip/src/common.h	157;"	d
F32_NAN	libberdip/src/common.h	155;"	d
F32_NAN	libberdip/src/common.h	159;"	d
F32_PI	libberdip/src/common.h	180;"	d
F32_PI_OVER_2	libberdip/src/common.h	189;"	d
F32_PI_OVER_4	libberdip/src/common.h	190;"	d
F32_PI_OVER_4_PREC_1	libberdip/src/multilane.h	1552;"	d
F32_PI_OVER_4_PREC_1	libberdip/src/trigonometry_v2.h	4;"	d
F32_PI_OVER_4_PREC_2	libberdip/src/multilane.h	1553;"	d
F32_PI_OVER_4_PREC_2	libberdip/src/trigonometry_v2.h	5;"	d
F32_PI_OVER_4_PREC_3	libberdip/src/multilane.h	1554;"	d
F32_PI_OVER_4_PREC_3	libberdip/src/trigonometry_v2.h	6;"	d
F32_SIGN_MASK	libberdip/src/common.h	149;"	d
F32_SIN_COEF_0	libberdip/src/multilane.h	1556;"	d
F32_SIN_COEF_0	libberdip/src/trigonometry_v2.h	8;"	d
F32_SIN_COEF_1	libberdip/src/multilane.h	1557;"	d
F32_SIN_COEF_1	libberdip/src/trigonometry_v2.h	9;"	d
F32_SIN_COEF_2	libberdip/src/multilane.h	1558;"	d
F32_SIN_COEF_2	libberdip/src/trigonometry_v2.h	10;"	d
F32_TAU	libberdip/src/common.h	182;"	d
F64_2x	libberdip/src/multilane.h	/^F64_2x(f32_4x a, b32 doHigh = false)$/;"	f
F64_2x	libberdip/src/multilane.h	/^F64_2x(f64 a)$/;"	f
F64_2x	libberdip/src/multilane.h	/^F64_2x(f64 a, f64 b)$/;"	f
F64_E	libberdip/src/common.h	183;"	d
F64_EXP_MASK	libberdip/src/common.h	166;"	d
F64_FRAC_MASK	libberdip/src/common.h	167;"	d
F64_INF	libberdip/src/common.h	170;"	d
F64_MAX	libberdip/src/common.h	169;"	d
F64_MAX	libberdip/src/common.h	173;"	d
F64_NAN	libberdip/src/common.h	171;"	d
F64_PI	libberdip/src/common.h	179;"	d
F64_SIGN_MASK	libberdip/src/common.h	165;"	d
F64_TAU	libberdip/src/common.h	181;"	d
F80_E	libberdip/src/common.h	178;"	d
F80_PI	libberdip/src/common.h	177;"	d
FILE_ERROR	libberdip/src/files.h	66;"	d
FILE_ERROR	libberdip/src/linux_file.c	/^FILE_ERROR(linux_file_error)$/;"	f
FileAPI	libberdip/src/files.h	/^typedef struct FileAPI$/;"	s
FileAPI	libberdip/src/files.h	/^} FileAPI;$/;"	t	typeref:struct:FileAPI
FileCursorReference	libberdip/src/files.h	/^typedef enum FileCursorReference$/;"	g
FileCursorReference	libberdip/src/files.h	/^} FileCursorReference;$/;"	t	typeref:enum:FileCursorReference
FileCursor_CurrentPos	libberdip/src/files.h	/^    FileCursor_CurrentPos,$/;"	e	enum:FileCursorReference
FileCursor_EndOfFile	libberdip/src/files.h	/^    FileCursor_EndOfFile,$/;"	e	enum:FileCursorReference
FileCursor_StartOfFile	libberdip/src/files.h	/^    FileCursor_StartOfFile,$/;"	e	enum:FileCursorReference
FileDirKind	libberdip/src/files.h	/^typedef enum FileDirKind$/;"	g
FileDirKind	libberdip/src/files.h	/^} FileDirKind;$/;"	t	typeref:enum:FileDirKind
FileDir_Directory	libberdip/src/files.h	/^    FileDir_Directory,$/;"	e	enum:FileDirKind
FileDir_File	libberdip/src/files.h	/^    FileDir_File,$/;"	e	enum:FileDirKind
FileDir_None	libberdip/src/files.h	/^    FileDir_None,$/;"	e	enum:FileDirKind
FileError	libberdip/src/files.h	/^typedef FILE_ERROR(FileError);$/;"	t
FileOpenType	libberdip/src/files.h	/^typedef enum FileOpenType$/;"	g
FileOpenType	libberdip/src/files.h	/^} FileOpenType;$/;"	t	typeref:enum:FileOpenType
FileOpen_Append	libberdip/src/files.h	/^    FileOpen_Append = 0x4, \/\/ NOTE(michiel): Only for writing$/;"	e	enum:FileOpenType
FileOpen_Read	libberdip/src/files.h	/^    FileOpen_Read = 0x1,$/;"	e	enum:FileOpenType
FileOpen_Write	libberdip/src/files.h	/^    FileOpen_Write = 0x2,$/;"	e	enum:FileOpenType
FileStream	libberdip/src/files.h	/^typedef struct FileStream$/;"	s
FileStream	libberdip/src/files.h	/^} FileStream;$/;"	t	typeref:struct:FileStream
FloatMathVec	libberdip/src/maths.h	/^union FloatMathVec$/;"	u
FontGlyph	libberdip/src/fonts.h	/^struct FontGlyph$/;"	s
FontInfo	libberdip/src/fonts.h	/^struct FontInfo$/;"	s
FontLoader	libberdip/src/fonts.cpp	/^struct FontLoader$/;"	s	file:
GEN_TEST_ALMOST_EQUAL	libberdip/src/tests.h	322;"	d
GEN_TEST_ALMOST_EQUAL	libberdip/src/tests_c.h	29;"	d
GEN_TEST_ALMOST_EQUAL	libberdip/src/tests_cpp.h	29;"	d
GEN_TEST_BOOL_EQUAL	libberdip/src/tests.h	328;"	d
GEN_TEST_BOOL_EQUAL	libberdip/src/tests_c.h	43;"	d
GEN_TEST_BOOL_EQUAL	libberdip/src/tests_cpp.h	43;"	d
GEN_TEST_BOOL_NOT_EQUAL	libberdip/src/tests.h	334;"	d
GEN_TEST_BOOL_NOT_EQUAL	libberdip/src/tests_c.h	58;"	d
GEN_TEST_BOOL_NOT_EQUAL	libberdip/src/tests_cpp.h	58;"	d
GEN_TEST_EQUAL	libberdip/src/tests.h	298;"	d
GEN_TEST_EQUAL	libberdip/src/tests_c.h	5;"	d
GEN_TEST_EQUAL	libberdip/src/tests_cpp.h	5;"	d
GEN_TEST_GREATER	libberdip/src/tests.h	358;"	d
GEN_TEST_GREATER	libberdip/src/tests_c.h	85;"	d
GEN_TEST_GREATER	libberdip/src/tests_cpp.h	84;"	d
GEN_TEST_GREATER_EQUAL	libberdip/src/tests.h	382;"	d
GEN_TEST_GREATER_EQUAL	libberdip/src/tests_c.h	109;"	d
GEN_TEST_GREATER_EQUAL	libberdip/src/tests_cpp.h	106;"	d
GEN_TEST_LESS	libberdip/src/tests.h	346;"	d
GEN_TEST_LESS	libberdip/src/tests_c.h	73;"	d
GEN_TEST_LESS	libberdip/src/tests_cpp.h	73;"	d
GEN_TEST_LESS_EQUAL	libberdip/src/tests.h	370;"	d
GEN_TEST_LESS_EQUAL	libberdip/src/tests_c.h	97;"	d
GEN_TEST_LESS_EQUAL	libberdip/src/tests_cpp.h	95;"	d
GEN_TEST_NOT_EQUAL	libberdip/src/tests.h	310;"	d
GEN_TEST_NOT_EQUAL	libberdip/src/tests_c.h	17;"	d
GEN_TEST_NOT_EQUAL	libberdip/src/tests_cpp.h	17;"	d
GET_ALL_FILE_OF_TYPE_BEGIN	libberdip/src/files.h	88;"	d
GET_ALL_FILE_OF_TYPE_BEGIN	libberdip/src/linux_file.c	/^GET_ALL_FILE_OF_TYPE_BEGIN(linux_get_all_files_of_type_begin)$/;"	f
GET_ALL_FILE_OF_TYPE_END	libberdip/src/files.h	91;"	d
GET_ALL_FILE_OF_TYPE_END	libberdip/src/linux_file.c	/^GET_ALL_FILE_OF_TYPE_END(linux_get_all_files_of_type_end)$/;"	f
GET_ALL_IN_DIR	libberdip/src/files.h	98;"	d
GET_ALL_IN_DIR	libberdip/src/linux_file.c	/^GET_ALL_IN_DIR(linux_get_all_in_dir)$/;"	f
GET_FILE_POSITION	libberdip/src/files.h	72;"	d
GET_FILE_POSITION	libberdip/src/linux_file.c	/^GET_FILE_POSITION(linux_get_file_position)$/;"	f
GET_FILE_SIZE	libberdip/src/files.h	69;"	d
GET_FILE_SIZE	libberdip/src/linux_file.c	/^GET_FILE_SIZE(linux_get_file_size)$/;"	f
GET_FILE_SIZE	libberdip/src/std_file.c	/^internal GET_FILE_SIZE(get_file_size)$/;"	f
GetAllFileOfTypeBegin	libberdip/src/files.h	/^typedef GET_ALL_FILE_OF_TYPE_BEGIN(GetAllFileOfTypeBegin);$/;"	t
GetAllFileOfTypeEnd	libberdip/src/files.h	/^typedef GET_ALL_FILE_OF_TYPE_END(GetAllFileOfTypeEnd);$/;"	t
GetAllInDir	libberdip/src/files.h	/^typedef GET_ALL_IN_DIR(GetAllInDir);$/;"	t
GetFilePosition	libberdip/src/files.h	/^typedef GET_FILE_POSITION(GetFilePosition);$/;"	t
GetFileSize_	libberdip/src/files.h	/^typedef GET_FILE_SIZE(GetFileSize_); \/\/ NOTE(michiel): MSVC conflict$/;"	t
HAVE_IRQ	kernel/xbmd.c	103;"	d	file:
HAVE_IRQ	kernel/xbmd.c	96;"	d	file:
HAVE_KREG	kernel/xbmd.c	104;"	d	file:
HAVE_REGION	kernel/xbmd.c	102;"	d	file:
HAVE_REGION	kernel/xbmd.c	95;"	d	file:
INIT_ALLOCATOR	libberdip/src/memory.cpp	/^internal INIT_ALLOCATOR(initialize_arena_allocator)$/;"	f
INIT_ALLOCATOR	libberdip/src/memory.cpp	/^internal INIT_ALLOCATOR(initialize_platform_allocator)$/;"	f
INIT_ALLOCATOR	libberdip/src/memory.h	66;"	d
INIT_ALLOCATOR	libberdip/src/std_memory.cpp	/^internal INIT_ALLOCATOR(initialize_std_allocator)$/;"	f
INIT_ALLOCATOR	libberdip/src/suballoc.h	/^internal INIT_ALLOCATOR(initialize_sub_allocator)$/;"	f
INIT_FILE_API	libberdip/src/files.h	157;"	d
INIT_FILE_API	libberdip/src/linux_file.c	/^internal INIT_FILE_API(linux_file_api)$/;"	f
INIT_FILE_API	libberdip/src/std_file.c	/^internal INIT_FILE_API(std_file_api)$/;"	f
INIT_MEMORY_API	libberdip/src/linux_memory.cpp	/^internal INIT_MEMORY_API(linux_memory_api)$/;"	f
INIT_MEMORY_API	libberdip/src/memory.h	36;"	d
INIT_MEMORY_API	libberdip/src/std_memory.cpp	/^internal INIT_MEMORY_API(std_memory_api)$/;"	f
INIT_RENDERER	libberdip/src/rendering2d.cpp	/^extern "C" INIT_RENDERER(init_renderer)$/;"	f
INIT_RENDERER	libberdip/src/rendering2d.h	50;"	d
INIT_THREADING_API	libberdip/src/linux_threading.cpp	/^internal INIT_THREADING_API(linux_threading_api)$/;"	f
INIT_THREADING_API	libberdip/src/threading.h	35;"	d
INVALID_CODE_PATH	libberdip/src/common.h	126;"	d
INVALID_DEFAULT_CASE	libberdip/src/common.h	127;"	d
IOCTL_READ_REG	kernel/xbmd.c	497;"	d	file:
IOCTL_READ_REG	kernel/xbmd.c	626;"	d	file:
IOCTL_WRITE_REG	kernel/xbmd.c	498;"	d	file:
IOCTL_WRITE_REG	kernel/xbmd.c	625;"	d	file:
Image	libberdip/src/types.h	/^typedef struct Image$/;"	s
Image	libberdip/src/types.h	/^} Image;$/;"	t	typeref:struct:Image
Image8	libberdip/src/types.h	/^typedef struct Image8$/;"	s
Image8	libberdip/src/types.h	/^} Image8;$/;"	t	typeref:struct:Image8
InitAllocator	libberdip/src/memory.h	/^typedef INIT_ALLOCATOR(InitAllocator);$/;"	t
InitFileAPI	libberdip/src/files.h	/^typedef INIT_FILE_API(InitFileAPI);$/;"	t
InitMemoryAPI	libberdip/src/memory.h	/^typedef INIT_MEMORY_API(InitMemoryAPI);$/;"	t
InitRenderer	libberdip/src/rendering2d.h	/^typedef INIT_RENDERER(InitRenderer);$/;"	t
InitThreadingAPI	libberdip/src/threading.h	/^typedef INIT_THREADING_API(InitThreadingAPI);$/;"	t
InternedString	libberdip/src/memory.h	/^struct InternedString$/;"	s
JSON_FULL_PARSING	libberdip/src/json.h	3;"	d
JsonArray	libberdip/src/json.h	/^struct JsonArray$/;"	s
JsonArrayIter	libberdip/src/json.h	/^struct JsonArrayIter$/;"	s
JsonConstant_False	libberdip/src/json.h	/^    JsonConstant_False,$/;"	e	enum:JsonConstants
JsonConstant_None	libberdip/src/json.h	/^    JsonConstant_None,$/;"	e	enum:JsonConstants
JsonConstant_Null	libberdip/src/json.h	/^    JsonConstant_Null,$/;"	e	enum:JsonConstants
JsonConstant_True	libberdip/src/json.h	/^    JsonConstant_True,$/;"	e	enum:JsonConstants
JsonConstants	libberdip/src/json.h	/^enum JsonConstants$/;"	g
JsonItem	libberdip/src/json.h	/^struct JsonItem$/;"	s
JsonObject	libberdip/src/json.h	/^struct JsonObject$/;"	s
JsonParser	libberdip/src/json.h	/^struct JsonParser$/;"	s
JsonValue	libberdip/src/json.h	/^struct JsonValue$/;"	s
JsonValueKind	libberdip/src/json.h	/^enum JsonValueKind$/;"	g
JsonValue_Array	libberdip/src/json.h	/^    JsonValue_Array,$/;"	e	enum:JsonValueKind
JsonValue_Constant	libberdip/src/json.h	/^    JsonValue_Constant,$/;"	e	enum:JsonValueKind
JsonValue_None	libberdip/src/json.h	/^    JsonValue_None,$/;"	e	enum:JsonValueKind
JsonValue_Number	libberdip/src/json.h	/^    JsonValue_Number,$/;"	e	enum:JsonValueKind
JsonValue_Object	libberdip/src/json.h	/^    JsonValue_Object,$/;"	e	enum:JsonValueKind
JsonValue_String	libberdip/src/json.h	/^    JsonValue_String,$/;"	e	enum:JsonValueKind
KILOBYTES	kernel/xbmd.h	63;"	d
Key	libberdip/src/platform.h	/^typedef struct Key$/;"	s
Key	libberdip/src/platform.h	/^} Key;$/;"	t	typeref:struct:Key
KeyCount	libberdip/src/keys.h	/^    KeyCount$/;"	e	enum:Keys
KeyMod_Alt	libberdip/src/platform.h	/^    KeyMod_Alt = 0x30,$/;"	e	enum:KeyModifiers
KeyMod_Ctrl	libberdip/src/platform.h	/^    KeyMod_Ctrl = 0x03,$/;"	e	enum:KeyModifiers
KeyMod_LeftAlt	libberdip/src/platform.h	/^    KeyMod_LeftAlt = 0x10,$/;"	e	enum:KeyModifiers
KeyMod_LeftCtrl	libberdip/src/platform.h	/^    KeyMod_LeftCtrl = 0x01,$/;"	e	enum:KeyModifiers
KeyMod_LeftShift	libberdip/src/platform.h	/^    KeyMod_LeftShift = 0x04,$/;"	e	enum:KeyModifiers
KeyMod_None	libberdip/src/platform.h	/^    KeyMod_None = 0x00,$/;"	e	enum:KeyModifiers
KeyMod_RightAlt	libberdip/src/platform.h	/^    KeyMod_RightAlt = 0x20,$/;"	e	enum:KeyModifiers
KeyMod_RightCtrl	libberdip/src/platform.h	/^    KeyMod_RightCtrl = 0x02,$/;"	e	enum:KeyModifiers
KeyMod_RightShift	libberdip/src/platform.h	/^    KeyMod_RightShift = 0x08,$/;"	e	enum:KeyModifiers
KeyMod_Shift	libberdip/src/platform.h	/^    KeyMod_Shift = 0x0C,$/;"	e	enum:KeyModifiers
KeyModifiers	libberdip/src/platform.h	/^typedef enum KeyModifiers$/;"	g
KeyModifiers	libberdip/src/platform.h	/^} KeyModifiers;$/;"	t	typeref:enum:KeyModifiers
Key_0	libberdip/src/keys.h	/^    Key_0 = '0',         \/\/ 48$/;"	e	enum:Keys
Key_1	libberdip/src/keys.h	/^    Key_1 = '1',         \/\/ 49$/;"	e	enum:Keys
Key_2	libberdip/src/keys.h	/^    Key_2 = '2',         \/\/ 50$/;"	e	enum:Keys
Key_3	libberdip/src/keys.h	/^    Key_3 = '3',         \/\/ 51$/;"	e	enum:Keys
Key_4	libberdip/src/keys.h	/^    Key_4 = '4',         \/\/ 52$/;"	e	enum:Keys
Key_5	libberdip/src/keys.h	/^    Key_5 = '5',         \/\/ 53$/;"	e	enum:Keys
Key_6	libberdip/src/keys.h	/^    Key_6 = '6',         \/\/ 54$/;"	e	enum:Keys
Key_7	libberdip/src/keys.h	/^    Key_7 = '7',         \/\/ 55$/;"	e	enum:Keys
Key_8	libberdip/src/keys.h	/^    Key_8 = '8',         \/\/ 56$/;"	e	enum:Keys
Key_9	libberdip/src/keys.h	/^    Key_9 = '9',         \/\/ 57$/;"	e	enum:Keys
Key_A	libberdip/src/keys.h	/^    Key_A = 'a',            \/\/ 97$/;"	e	enum:Keys
Key_Ampersand	libberdip/src/keys.h	/^    Key_Ampersand = '&',$/;"	e	enum:Keys
Key_Asterisk	libberdip/src/keys.h	/^    Key_Asterisk = '*',$/;"	e	enum:Keys
Key_At	libberdip/src/keys.h	/^    Key_At = '@',$/;"	e	enum:Keys
Key_B	libberdip/src/keys.h	/^    Key_B = 'b',            \/\/ 98$/;"	e	enum:Keys
Key_BackSlash	libberdip/src/keys.h	/^    Key_BackSlash = '\\\\',   \/\/ 92$/;"	e	enum:Keys
Key_Backspace	libberdip/src/keys.h	/^    Key_Backspace = 8,$/;"	e	enum:Keys
Key_Bang	libberdip/src/keys.h	/^    Key_Bang = '!',      \/\/ 33$/;"	e	enum:Keys
Key_Break	libberdip/src/keys.h	/^    Key_Break,$/;"	e	enum:Keys
Key_C	libberdip/src/keys.h	/^    Key_C = 'c',            \/\/ 99$/;"	e	enum:Keys
Key_CapsLock	libberdip/src/keys.h	/^    Key_CapsLock,$/;"	e	enum:Keys
Key_Colon	libberdip/src/keys.h	/^    Key_Colon = ':',$/;"	e	enum:Keys
Key_Comma	libberdip/src/keys.h	/^    Key_Comma = ',',     \/\/ 44$/;"	e	enum:Keys
Key_D	libberdip/src/keys.h	/^    Key_D = 'd',            \/\/ 100$/;"	e	enum:Keys
Key_Delete	libberdip/src/keys.h	/^    Key_Delete = 127,$/;"	e	enum:Keys
Key_Dollar	libberdip/src/keys.h	/^    Key_Dollar = '$',$/;"	e	enum:Keys
Key_Dot	libberdip/src/keys.h	/^    Key_Dot = '.',       \/\/ 46$/;"	e	enum:Keys
Key_DoubleQuote	libberdip/src/keys.h	/^    Key_DoubleQuote = '"', \/\/ 34$/;"	e	enum:Keys
Key_Down	libberdip/src/keys.h	/^    Key_Down,$/;"	e	enum:Keys
Key_E	libberdip/src/keys.h	/^    Key_E = 'e',            \/\/ 101$/;"	e	enum:Keys
Key_End	libberdip/src/keys.h	/^    Key_End,$/;"	e	enum:Keys
Key_Enter	libberdip/src/keys.h	/^    Key_Enter = '\\n',    \/\/ 10$/;"	e	enum:Keys
Key_Equal	libberdip/src/keys.h	/^    Key_Equal = '=',     \/\/ 61$/;"	e	enum:Keys
Key_Escape	libberdip/src/keys.h	/^    Key_Escape = 27,$/;"	e	enum:Keys
Key_F	libberdip/src/keys.h	/^    Key_F = 'f',            \/\/ 102$/;"	e	enum:Keys
Key_F1	libberdip/src/keys.h	/^    Key_F1,$/;"	e	enum:Keys
Key_F10	libberdip/src/keys.h	/^    Key_F10,$/;"	e	enum:Keys
Key_F11	libberdip/src/keys.h	/^    Key_F11,$/;"	e	enum:Keys
Key_F12	libberdip/src/keys.h	/^    Key_F12,$/;"	e	enum:Keys
Key_F2	libberdip/src/keys.h	/^    Key_F2,$/;"	e	enum:Keys
Key_F3	libberdip/src/keys.h	/^    Key_F3,$/;"	e	enum:Keys
Key_F4	libberdip/src/keys.h	/^    Key_F4,$/;"	e	enum:Keys
Key_F5	libberdip/src/keys.h	/^    Key_F5,$/;"	e	enum:Keys
Key_F6	libberdip/src/keys.h	/^    Key_F6,$/;"	e	enum:Keys
Key_F7	libberdip/src/keys.h	/^    Key_F7,$/;"	e	enum:Keys
Key_F8	libberdip/src/keys.h	/^    Key_F8,$/;"	e	enum:Keys
Key_F9	libberdip/src/keys.h	/^    Key_F9,$/;"	e	enum:Keys
Key_G	libberdip/src/keys.h	/^    Key_G = 'g',            \/\/ 103$/;"	e	enum:Keys
Key_GameDown	libberdip/src/keys.h	/^    Key_GameDown,   \/\/ s$/;"	e	enum:Keys
Key_GameLeft	libberdip/src/keys.h	/^    Key_GameLeft,   \/\/ a$/;"	e	enum:Keys
Key_GameLeftUp	libberdip/src/keys.h	/^    Key_GameLeftUp, \/\/ q$/;"	e	enum:Keys
Key_GameRight	libberdip/src/keys.h	/^    Key_GameRight,  \/\/ d$/;"	e	enum:Keys
Key_GameRightUp	libberdip/src/keys.h	/^    Key_GameRightUp,\/\/ e$/;"	e	enum:Keys
Key_GameUp	libberdip/src/keys.h	/^    Key_GameUp,     \/\/ w   - on querty keyboard$/;"	e	enum:Keys
Key_Grave	libberdip/src/keys.h	/^    Key_Grave = '`',        \/\/ 96$/;"	e	enum:Keys
Key_Greater	libberdip/src/keys.h	/^    Key_Greater = '>',$/;"	e	enum:Keys
Key_H	libberdip/src/keys.h	/^    Key_H = 'h',            \/\/ 104$/;"	e	enum:Keys
Key_Hash	libberdip/src/keys.h	/^    Key_Hash = '#',$/;"	e	enum:Keys
Key_Home	libberdip/src/keys.h	/^    Key_Home = 128,$/;"	e	enum:Keys
Key_I	libberdip/src/keys.h	/^    Key_I = 'i',            \/\/ 105$/;"	e	enum:Keys
Key_Insert	libberdip/src/keys.h	/^    Key_Insert,$/;"	e	enum:Keys
Key_J	libberdip/src/keys.h	/^    Key_J = 'j',            \/\/ 106$/;"	e	enum:Keys
Key_K	libberdip/src/keys.h	/^    Key_K = 'k',            \/\/ 107$/;"	e	enum:Keys
Key_L	libberdip/src/keys.h	/^    Key_L = 'l',            \/\/ 108$/;"	e	enum:Keys
Key_Left	libberdip/src/keys.h	/^    Key_Left,$/;"	e	enum:Keys
Key_LeftAlt	libberdip/src/keys.h	/^    Key_LeftAlt,$/;"	e	enum:Keys
Key_LeftBrace	libberdip/src/keys.h	/^    Key_LeftBrace = '{',$/;"	e	enum:Keys
Key_LeftBracket	libberdip/src/keys.h	/^    Key_LeftBracket = '[',  \/\/ 91$/;"	e	enum:Keys
Key_LeftCtrl	libberdip/src/keys.h	/^    Key_LeftCtrl,$/;"	e	enum:Keys
Key_LeftParen	libberdip/src/keys.h	/^    Key_LeftParen = '(',$/;"	e	enum:Keys
Key_LeftShift	libberdip/src/keys.h	/^    Key_LeftShift,$/;"	e	enum:Keys
Key_Less	libberdip/src/keys.h	/^    Key_Less = '<',$/;"	e	enum:Keys
Key_M	libberdip/src/keys.h	/^    Key_M = 'm',            \/\/ 109$/;"	e	enum:Keys
Key_Menu	libberdip/src/keys.h	/^    Key_Menu,$/;"	e	enum:Keys
Key_Minus	libberdip/src/keys.h	/^    Key_Minus = '-',     \/\/ 45$/;"	e	enum:Keys
Key_N	libberdip/src/keys.h	/^    Key_N = 'n',            \/\/ 110$/;"	e	enum:Keys
Key_None	libberdip/src/keys.h	/^    Key_None = 0,$/;"	e	enum:Keys
Key_Num0	libberdip/src/keys.h	/^    Key_Num0,$/;"	e	enum:Keys
Key_Num1	libberdip/src/keys.h	/^    Key_Num1,$/;"	e	enum:Keys
Key_Num2	libberdip/src/keys.h	/^    Key_Num2,$/;"	e	enum:Keys
Key_Num3	libberdip/src/keys.h	/^    Key_Num3,$/;"	e	enum:Keys
Key_Num4	libberdip/src/keys.h	/^    Key_Num4,$/;"	e	enum:Keys
Key_Num5	libberdip/src/keys.h	/^    Key_Num5,$/;"	e	enum:Keys
Key_Num6	libberdip/src/keys.h	/^    Key_Num6,$/;"	e	enum:Keys
Key_Num7	libberdip/src/keys.h	/^    Key_Num7,$/;"	e	enum:Keys
Key_Num8	libberdip/src/keys.h	/^    Key_Num8,$/;"	e	enum:Keys
Key_Num9	libberdip/src/keys.h	/^    Key_Num9,$/;"	e	enum:Keys
Key_NumAdd	libberdip/src/keys.h	/^    Key_NumAdd,$/;"	e	enum:Keys
Key_NumDivide	libberdip/src/keys.h	/^    Key_NumDivide,$/;"	e	enum:Keys
Key_NumDot	libberdip/src/keys.h	/^    Key_NumDot,$/;"	e	enum:Keys
Key_NumEnter	libberdip/src/keys.h	/^    Key_NumEnter,$/;"	e	enum:Keys
Key_NumLock	libberdip/src/keys.h	/^    Key_NumLock,$/;"	e	enum:Keys
Key_NumMultiply	libberdip/src/keys.h	/^    Key_NumMultiply,$/;"	e	enum:Keys
Key_NumSubtract	libberdip/src/keys.h	/^    Key_NumSubtract,$/;"	e	enum:Keys
Key_O	libberdip/src/keys.h	/^    Key_O = 'o',            \/\/ 111$/;"	e	enum:Keys
Key_OS	libberdip/src/keys.h	/^    Key_OS,$/;"	e	enum:Keys
Key_P	libberdip/src/keys.h	/^    Key_P = 'p',            \/\/ 112$/;"	e	enum:Keys
Key_PageDown	libberdip/src/keys.h	/^    Key_PageDown,$/;"	e	enum:Keys
Key_PageUp	libberdip/src/keys.h	/^    Key_PageUp,$/;"	e	enum:Keys
Key_Percent	libberdip/src/keys.h	/^    Key_Percent = '%',$/;"	e	enum:Keys
Key_Pipe	libberdip/src/keys.h	/^    Key_Pipe = '|',$/;"	e	enum:Keys
Key_Plus	libberdip/src/keys.h	/^    Key_Plus = '+',$/;"	e	enum:Keys
Key_PrintScreen	libberdip/src/keys.h	/^    Key_PrintScreen,$/;"	e	enum:Keys
Key_Q	libberdip/src/keys.h	/^    Key_Q = 'q',            \/\/ 113$/;"	e	enum:Keys
Key_Question	libberdip/src/keys.h	/^    Key_Question = '?',$/;"	e	enum:Keys
Key_Quote	libberdip/src/keys.h	/^    Key_Quote = '\\'',    \/\/ 39$/;"	e	enum:Keys
Key_R	libberdip/src/keys.h	/^    Key_R = 'r',            \/\/ 114$/;"	e	enum:Keys
Key_Right	libberdip/src/keys.h	/^    Key_Right,$/;"	e	enum:Keys
Key_RightAlt	libberdip/src/keys.h	/^    Key_RightAlt,$/;"	e	enum:Keys
Key_RightBrace	libberdip/src/keys.h	/^    Key_RightBrace = '}',$/;"	e	enum:Keys
Key_RightBracket	libberdip/src/keys.h	/^    Key_RightBracket = ']', \/\/ 93$/;"	e	enum:Keys
Key_RightCtrl	libberdip/src/keys.h	/^    Key_RightCtrl,$/;"	e	enum:Keys
Key_RightParen	libberdip/src/keys.h	/^    Key_RightParen = ')',$/;"	e	enum:Keys
Key_RightShift	libberdip/src/keys.h	/^    Key_RightShift,$/;"	e	enum:Keys
Key_RoofIcon	libberdip/src/keys.h	/^    Key_RoofIcon = '^',     \/\/ :) Call it what you like$/;"	e	enum:Keys
Key_S	libberdip/src/keys.h	/^    Key_S = 's',            \/\/ 115$/;"	e	enum:Keys
Key_ScrollLock	libberdip/src/keys.h	/^    Key_ScrollLock,$/;"	e	enum:Keys
Key_SemiColon	libberdip/src/keys.h	/^    Key_SemiColon = ';', \/\/ 59$/;"	e	enum:Keys
Key_Slash	libberdip/src/keys.h	/^    Key_Slash = '\/',     \/\/ 47$/;"	e	enum:Keys
Key_Space	libberdip/src/keys.h	/^    Key_Space = ' ',     \/\/ 32$/;"	e	enum:Keys
Key_T	libberdip/src/keys.h	/^    Key_T = 't',            \/\/ 116$/;"	e	enum:Keys
Key_Tab	libberdip/src/keys.h	/^    Key_Tab = '\\t',      \/\/ 9$/;"	e	enum:Keys
Key_Tilde	libberdip/src/keys.h	/^    Key_Tilde = '~',$/;"	e	enum:Keys
Key_U	libberdip/src/keys.h	/^    Key_U = 'u',            \/\/ 117$/;"	e	enum:Keys
Key_Underscore	libberdip/src/keys.h	/^    Key_Underscore = '_',$/;"	e	enum:Keys
Key_Up	libberdip/src/keys.h	/^    Key_Up,$/;"	e	enum:Keys
Key_V	libberdip/src/keys.h	/^    Key_V = 'v',            \/\/ 118$/;"	e	enum:Keys
Key_W	libberdip/src/keys.h	/^    Key_W = 'w',            \/\/ 119$/;"	e	enum:Keys
Key_X	libberdip/src/keys.h	/^    Key_X = 'x',            \/\/ 120$/;"	e	enum:Keys
Key_Y	libberdip/src/keys.h	/^    Key_Y = 'y',            \/\/ 121$/;"	e	enum:Keys
Key_Z	libberdip/src/keys.h	/^    Key_Z = 'z',            \/\/ 122$/;"	e	enum:Keys
Keyboard	libberdip/src/platform.h	/^typedef struct Keyboard$/;"	s
Keyboard	libberdip/src/platform.h	/^} Keyboard;$/;"	t	typeref:struct:Keyboard
Keys	libberdip/src/keys.h	/^typedef enum Keys$/;"	g
Keys	libberdip/src/keys.h	/^} Keys;$/;"	t	typeref:enum:Keys
LIBBERDIP_EXPECT	libberdip/src/common.h	16;"	d
LIBBERDIP_FILE_DEBUG	libberdip/src/linux_file.c	6;"	d	file:
LIBBERDIP_NO_STDIO	libberdip/src/common.h	3;"	d
LinuxFileDirGroup	libberdip/src/linux_file.c	/^typedef struct LinuxFileDirGroup$/;"	s	file:
LinuxFileDirGroup	libberdip/src/linux_file.c	/^} LinuxFileDirGroup;$/;"	t	typeref:struct:LinuxFileDirGroup	file:
LinuxFileGroup	libberdip/src/linux_file.c	/^typedef struct LinuxFileGroup$/;"	s	file:
LinuxFileGroup	libberdip/src/linux_file.c	/^} LinuxFileGroup;$/;"	t	typeref:struct:LinuxFileGroup	file:
LinuxFindFile	libberdip/src/linux_file.c	/^typedef struct LinuxFindFile$/;"	s	file:
LinuxFindFile	libberdip/src/linux_file.c	/^} LinuxFindFile;$/;"	t	typeref:struct:LinuxFindFile	file:
LinuxGlobalMemory	libberdip/src/linux_memory.h	/^struct LinuxGlobalMemory$/;"	s
LinuxMemoryBlock	libberdip/src/linux_memory.h	/^struct LinuxMemoryBlock$/;"	s
M	user/MersenneTwister.h	/^	enum { M = 397 };              \/\/ period parameter$/;"	e	enum:MTRand::__anon71
MAGIC	user/MersenneTwister.h	/^	enum { MAGIC = 0x9908b0dfU };  \/\/ magic constant$/;"	e	enum:MTRand::__anon72
MAKE_MAGIC	libberdip/src/files.h	7;"	d
MATH_USE_SSE4_FUNC	libberdip/src/maths.h	12;"	d
MAX_SUB_ALLOC_BUCKETS	libberdip/src/suballoc.h	22;"	d
MAX_WORK_QUEUE_ENTRIES	libberdip/src/threading.h	6;"	d
MBUF	libberdip/src/memory.h	231;"	d
MEGABYTES	kernel/xbmd.h	64;"	d
MEMORY_BUF_MAGIC	libberdip/src/memory.h	233;"	d
MEMORY_DEFAULT_ALIGN	libberdip/src/memory.h	2;"	d
MEMORY_MAP_DELETED_KEY	libberdip/src/memory.h	276;"	d
MEMORY_MAP_EMPTY_KEY	libberdip/src/memory.h	275;"	d
MEMORY_MINIMUM_PLATFORM_BLOCK_SIZE	libberdip/src/memory.h	6;"	d
MEMORY_PLATFORM_REAL_SIZE	libberdip/src/linux_memory.h	/^compile_expect(sizeof(LinuxMemoryBlock) == MEMORY_PLATFORM_REAL_SIZE);$/;"	v
MEMORY_PLATFORM_REAL_SIZE	libberdip/src/memory.h	10;"	d
MEMORY_PLATFORM_REAL_SIZE	libberdip/src/std_memory.h	/^compile_expect(sizeof(StdMemoryBlock) == MEMORY_PLATFORM_REAL_SIZE);$/;"	v
MERSENNETWISTER_H	user/MersenneTwister.h	45;"	d
MIN_SUBALLOC_BITS	libberdip/src/suballoc.h	6;"	d
MIN_SUBALLOC_SIZE	libberdip/src/suballoc.cpp	1;"	d	file:
MORE_FFT_SINES	libberdip/src/fft.cpp	2;"	d	file:
MTRand	user/MersenneTwister.h	/^class MTRand {$/;"	c
MTRand	user/MersenneTwister.h	/^inline MTRand::MTRand( const uint32& oneSeed )$/;"	f	class:MTRand
MTRand	user/MersenneTwister.h	/^inline MTRand::MTRand( uint32 *const bigSeed )$/;"	f	class:MTRand
MTRand	user/MersenneTwister.h	/^inline MTRand::MTRand()$/;"	f	class:MTRand
MULTILANE_SHUFFLE_MASK	libberdip/src/multilane.h	1;"	d
MULTILANE_SHUFFLE_MASK_D	libberdip/src/multilane.h	2;"	d
MemoryAPI	libberdip/src/memory.h	/^struct MemoryAPI$/;"	s
MemoryAllocFlags	libberdip/src/memory.h	/^enum MemoryAllocFlags$/;"	g
MemoryAllocator	libberdip/src/memory.h	/^struct MemoryAllocator$/;"	s
MemoryArena	libberdip/src/memory.h	/^struct MemoryArena$/;"	s
MemoryBuffer	libberdip/src/memory.h	/^struct MemoryBuffer$/;"	s
MemoryInterns	libberdip/src/memory.h	/^struct MemoryInterns$/;"	s
MemoryMap	libberdip/src/memory.h	/^struct MemoryMap \/\/ TODO(michiel): Need a better name$/;"	s
Memory_AlignMask	libberdip/src/memory.h	/^    Memory_AlignMask   = 0x0000FFFF,$/;"	e	enum:MemoryAllocFlags
Memory_Debug	libberdip/src/memory.h	/^    Memory_Debug       = 0xFF000000,$/;"	e	enum:MemoryAllocFlags
Memory_NoClear	libberdip/src/memory.h	/^    Memory_NoClear     = 0x01000000,$/;"	e	enum:MemoryAllocFlags
Mouse	libberdip/src/platform.h	/^typedef struct Mouse$/;"	s
Mouse	libberdip/src/platform.h	/^} Mouse;$/;"	t	typeref:struct:Mouse
MouseButtonCount	libberdip/src/platform.h	/^    MouseButtonCount$/;"	e	enum:MouseButtons
MouseButtons	libberdip/src/platform.h	/^typedef enum MouseButtons$/;"	g
MouseButtons	libberdip/src/platform.h	/^} MouseButtons;$/;"	t	typeref:enum:MouseButtons
Mouse_Extended1	libberdip/src/platform.h	/^    Mouse_Extended1,$/;"	e	enum:MouseButtons
Mouse_Extended2	libberdip/src/platform.h	/^    Mouse_Extended2,$/;"	e	enum:MouseButtons
Mouse_Left	libberdip/src/platform.h	/^    Mouse_Left,$/;"	e	enum:MouseButtons
Mouse_Middle	libberdip/src/platform.h	/^    Mouse_Middle,$/;"	e	enum:MouseButtons
Mouse_None	libberdip/src/platform.h	/^    Mouse_None,$/;"	e	enum:MouseButtons
Mouse_Right	libberdip/src/platform.h	/^    Mouse_Right,$/;"	e	enum:MouseButtons
N	user/MersenneTwister.h	/^	enum { N = 624 };              \/\/ length of state vector$/;"	e	enum:MTRand::__anon69
NOT_IMPLEMENTED	libberdip/src/common.h	121;"	d
NOT_IMPLEMENTED	libberdip/src/common.h	123;"	d
NO_INTRINSICS	libberdip/src/common.h	20;"	d
NO_INTRINSICS	libberdip/src/fonts.cpp	2;"	d	file:
NO_INTRINSICS	libberdip/src/fonts.cpp	3;"	d	file:
NRDCOMP	user/xbmd_main.h	70;"	d
NUM_SEMS	kernel/xbmd.c	/^        NUM_SEMS$/;"	e	enum:__anon73	file:
ONE_PAST_MAX_FONT_CODEPOINT	libberdip/src/fonts.cpp	41;"	d	file:
OPEN_FILE	libberdip/src/files.h	102;"	d
OPEN_FILE	libberdip/src/linux_file.c	/^OPEN_FILE(linux_open_file)$/;"	f
OPEN_FILE	libberdip/src/std_file.c	/^internal OPEN_FILE(open_file)$/;"	f
OPEN_NEXT_FILE	libberdip/src/files.h	94;"	d
OPEN_NEXT_FILE	libberdip/src/linux_file.c	/^OPEN_NEXT_FILE(linux_open_next_file)$/;"	f
OpenFile_	libberdip/src/files.h	/^typedef OPEN_FILE(OpenFile_); \/\/ NOTE(NAME): MSVC conflict$/;"	t
OpenNextFile	libberdip/src/files.h	/^typedef OPEN_NEXT_FILE(OpenNextFile);$/;"	t
Outside_Bottom	libberdip/src/drawing.cpp	/^    Outside_Bottom = 0x04,$/;"	e	enum:RectPositionFlag	file:
Outside_Bottom	libberdip/src/drawing2d.cpp	/^    Outside_Bottom = 0x04,$/;"	e	enum:RectPositionFlag	file:
Outside_Inside	libberdip/src/drawing.cpp	/^    Outside_Inside = 0x00,$/;"	e	enum:RectPositionFlag	file:
Outside_Inside	libberdip/src/drawing2d.cpp	/^    Outside_Inside = 0x00,$/;"	e	enum:RectPositionFlag	file:
Outside_Left	libberdip/src/drawing.cpp	/^    Outside_Left   = 0x01,$/;"	e	enum:RectPositionFlag	file:
Outside_Left	libberdip/src/drawing2d.cpp	/^    Outside_Left   = 0x01,$/;"	e	enum:RectPositionFlag	file:
Outside_Right	libberdip/src/drawing.cpp	/^    Outside_Right  = 0x02,$/;"	e	enum:RectPositionFlag	file:
Outside_Right	libberdip/src/drawing2d.cpp	/^    Outside_Right  = 0x02,$/;"	e	enum:RectPositionFlag	file:
Outside_Top	libberdip/src/drawing.cpp	/^    Outside_Top    = 0x08,$/;"	e	enum:RectPositionFlag	file:
Outside_Top	libberdip/src/drawing2d.cpp	/^    Outside_Top    = 0x08,$/;"	e	enum:RectPositionFlag	file:
PCI_DEVICE_ID_XILINX_PCIE	kernel/xbmd_direct.c	49;"	d	file:
PCI_EXERCISER_DEVICE_ID_AMD_PCIE	kernel/xbmd.c	91;"	d	file:
PCI_EXERCISER_VENDOR_ID_AMD	kernel/xbmd.c	88;"	d	file:
PCI_VENDOR_ID_XILINX	kernel/xbmd_direct.c	46;"	d	file:
PERLIN_DEPTH	libberdip/src/perlin.h	1;"	d
PERLIN_DEPTH_MASK	libberdip/src/perlin.h	2;"	d
PERLIN_N	libberdip/src/perlin.h	4;"	d
PERLIN_NMASK	libberdip/src/perlin.h	159;"	d
PERLIN_NP	libberdip/src/perlin.h	158;"	d
PLATFORM_ADD_WORK_ENTRY	libberdip/src/linux_threading.cpp	/^internal PLATFORM_ADD_WORK_ENTRY(linux_add_work_entry)$/;"	f
PLATFORM_ADD_WORK_ENTRY	libberdip/src/threading.h	16;"	d
PLATFORM_ALLOCATE_MEMORY	libberdip/src/linux_memory.cpp	/^internal PLATFORM_ALLOCATE_MEMORY(linux_allocate_memory)$/;"	f
PLATFORM_ALLOCATE_MEMORY	libberdip/src/memory.h	40;"	d
PLATFORM_ALLOCATE_MEMORY	libberdip/src/std_memory.cpp	/^internal PLATFORM_ALLOCATE_MEMORY(std_allocate_memory)$/;"	f
PLATFORM_COMPLETE_ALL_WORK	libberdip/src/linux_threading.cpp	/^internal PLATFORM_COMPLETE_ALL_WORK(linux_complete_all_work)$/;"	f
PLATFORM_COMPLETE_ALL_WORK	libberdip/src/threading.h	19;"	d
PLATFORM_CREATE_WORK_QUEUE	libberdip/src/linux_threading.cpp	/^internal PLATFORM_CREATE_WORK_QUEUE(linux_create_work_queue)$/;"	f
PLATFORM_CREATE_WORK_QUEUE	libberdip/src/threading.h	13;"	d
PLATFORM_DEALLOCATE_ALL_MEMORY	libberdip/src/linux_memory.cpp	/^internal PLATFORM_DEALLOCATE_ALL_MEMORY(linux_deallocate_all_memory)$/;"	f
PLATFORM_DEALLOCATE_ALL_MEMORY	libberdip/src/memory.h	52;"	d
PLATFORM_DEALLOCATE_ALL_MEMORY	libberdip/src/std_memory.cpp	/^internal PLATFORM_DEALLOCATE_ALL_MEMORY(std_deallocate_all_memory)$/;"	f
PLATFORM_DEALLOCATE_MEMORY	libberdip/src/linux_memory.cpp	/^internal PLATFORM_DEALLOCATE_MEMORY(linux_deallocate_memory)$/;"	f
PLATFORM_DEALLOCATE_MEMORY	libberdip/src/memory.h	48;"	d
PLATFORM_DEALLOCATE_MEMORY	libberdip/src/std_memory.cpp	/^internal PLATFORM_DEALLOCATE_MEMORY(std_deallocate_memory)$/;"	f
PLATFORM_EXECUTABLE_MEMORY	libberdip/src/linux_memory.cpp	/^internal PLATFORM_EXECUTABLE_MEMORY(linux_executable_memory)$/;"	f
PLATFORM_EXECUTABLE_MEMORY	libberdip/src/memory.h	58;"	d
PLATFORM_EXECUTABLE_MEMORY	libberdip/src/std_memory.cpp	/^internal PLATFORM_EXECUTABLE_MEMORY(std_executable_memory)$/;"	f
PLATFORM_REALLOCATE_MEMORY	libberdip/src/linux_memory.cpp	/^internal PLATFORM_REALLOCATE_MEMORY(linux_reallocate_memory)$/;"	f
PLATFORM_REALLOCATE_MEMORY	libberdip/src/memory.h	44;"	d
PLATFORM_REALLOCATE_MEMORY	libberdip/src/std_memory.cpp	/^internal PLATFORM_REALLOCATE_MEMORY(std_reallocate_memory)$/;"	f
PLATFORM_WORK_QUEUE_CALLBACK	libberdip/src/threading.h	10;"	d
PRINT_INDENT_COUNT	libberdip/src/files.cpp	4;"	d	file:
PatternMatchFlag	libberdip/src/strings.h	/^enum PatternMatchFlag$/;"	g
PatternMatchFlag_MaySkip	libberdip/src/strings.h	/^    PatternMatchFlag_MaySkip   = 0x01,$/;"	e	enum:PatternMatchFlag
PatternMatchFlag_None	libberdip/src/strings.h	/^    PatternMatchFlag_None      = 0x00,$/;"	e	enum:PatternMatchFlag
PatternMatchFlag_Restarted	libberdip/src/strings.h	/^    PatternMatchFlag_Restarted = 0x02,$/;"	e	enum:PatternMatchFlag
PerlinNoise	libberdip/src/perlin.h	/^struct PerlinNoise$/;"	s
PerlinNoiseOld	libberdip/src/perlin.h	/^struct PerlinNoiseOld$/;"	s
PlatformAddWorkEntry	libberdip/src/threading.h	/^typedef PLATFORM_ADD_WORK_ENTRY(PlatformAddWorkEntry);$/;"	t
PlatformAllocateMemory	libberdip/src/memory.h	/^typedef PLATFORM_ALLOCATE_MEMORY(PlatformAllocateMemory);$/;"	t
PlatformCompleteAllWork	libberdip/src/threading.h	/^typedef PLATFORM_COMPLETE_ALL_WORK(PlatformCompleteAllWork);$/;"	t
PlatformCreateWorkQueue	libberdip/src/threading.h	/^typedef PLATFORM_CREATE_WORK_QUEUE(PlatformCreateWorkQueue);$/;"	t
PlatformDeallocateAllMemory	libberdip/src/memory.h	/^typedef PLATFORM_DEALLOCATE_ALL_MEMORY(PlatformDeallocateAllMemory);$/;"	t
PlatformDeallocateMemory	libberdip/src/memory.h	/^typedef PLATFORM_DEALLOCATE_MEMORY(PlatformDeallocateMemory);$/;"	t
PlatformExecutableMemory	libberdip/src/memory.h	/^typedef PLATFORM_EXECUTABLE_MEMORY(PlatformExecutableMemory);$/;"	t
PlatformMemoryBlock	libberdip/src/memory.h	/^struct PlatformMemoryBlock$/;"	s
PlatformReallocateMemory	libberdip/src/memory.h	/^typedef PLATFORM_REALLOCATE_MEMORY(PlatformReallocateMemory);$/;"	t
PlatformWorkQueue	libberdip/src/linux_threading.cpp	/^struct PlatformWorkQueue$/;"	s	file:
PlatformWorkQueueCallback	libberdip/src/threading.h	/^typedef PLATFORM_WORK_QUEUE_CALLBACK(PlatformWorkQueueCallback);$/;"	t
PlatformWorkQueueEntry	libberdip/src/threading.h	/^typedef struct PlatformWorkQueueEntry$/;"	s
PlatformWorkQueueEntry	libberdip/src/threading.h	/^} PlatformWorkQueueEntry;$/;"	t	typeref:struct:PlatformWorkQueueEntry
RCOMPDSIZE	user/xbmd_main.h	71;"	d
RDMAPERF	user/xbmd_main.h	68;"	d
RDMASTAT	user/xbmd_main.h	69;"	d
RDMATLPA	user/xbmd_main.h	64;"	d
RDMATLPC	user/xbmd_main.h	66;"	d
RDMATLPP	user/xbmd_main.h	63;"	d
RDMATLPS	user/xbmd_main.h	65;"	d
READ_ENTIRE_FILE	libberdip/src/files.h	80;"	d
READ_ENTIRE_FILE	libberdip/src/linux_file.c	/^READ_ENTIRE_FILE(linux_read_entire_file)$/;"	f
READ_ENTIRE_FILE	libberdip/src/std_file.c	/^internal READ_ENTIRE_FILE(read_entire_file)$/;"	f
READ_FROM_FILE	libberdip/src/files.h	105;"	d
READ_FROM_FILE	libberdip/src/linux_file.c	/^READ_FROM_FILE(linux_read_from_file)$/;"	f
READ_FROM_FILE	libberdip/src/std_file.c	/^internal READ_FROM_FILE(read_from_file)$/;"	f
READ_FROM_FILE_OFFSET	libberdip/src/files.h	108;"	d
READ_FROM_FILE_OFFSET	libberdip/src/linux_file.c	/^READ_FROM_FILE_OFFSET(linux_read_from_file_offset)$/;"	f
READ_FROM_FILE_OFFSET	libberdip/src/std_file.c	/^internal READ_FROM_FILE_OFFSET(read_from_file_offset)$/;"	f
REALLOCATE_MEMORY_SIZE	libberdip/src/memory.cpp	/^internal REALLOCATE_MEMORY_SIZE(platform_reallocate_size)$/;"	f
REALLOCATE_MEMORY_SIZE	libberdip/src/memory.h	78;"	d
REALLOCATE_MEMORY_SIZE	libberdip/src/std_memory.cpp	/^internal REALLOCATE_MEMORY_SIZE(std_reallocate_size)$/;"	f
REALLOCATE_MEMORY_SIZE	libberdip/src/suballoc.cpp	/^internal REALLOCATE_MEMORY_SIZE(sub_realloc)$/;"	f
RENDER_DISPLAY	libberdip/src/rendering2d.cpp	/^extern "C" RENDER_DISPLAY(render_display)$/;"	f
RENDER_DISPLAY	libberdip/src/rendering2d.h	53;"	d
REPAINT_GUI	user/xbmd_main.cpp	1205;"	d	file:
REPAINT_GUI	user/xbmd_main.cpp	86;"	d	file:
RW_MAX_BYTES	kernel/xbmd_direct.c	43;"	d	file:
RandomList	libberdip/src/random.h	/^typedef struct RandomList$/;"	s
RandomList	libberdip/src/random.h	/^} RandomList;$/;"	t	typeref:struct:RandomList
RandomListEntry	libberdip/src/random.h	/^typedef struct RandomListEntry$/;"	s
RandomListEntry	libberdip/src/random.h	/^} RandomListEntry;$/;"	t	typeref:struct:RandomListEntry
RandomSeriesPCG	libberdip/src/random.h	/^typedef struct RandomSeriesPCG$/;"	s
RandomSeriesPCG	libberdip/src/random.h	/^} RandomSeriesPCG;$/;"	t	typeref:struct:RandomSeriesPCG
RandomSeriesPCG_4x	libberdip/src/random_simd.h	/^struct RandomSeriesPCG_4x$/;"	s
ReadData	user/bmd.cpp	/^int ReadData(int g_devFile, char* buff, size_t size)$/;"	f
ReadEntireFile	libberdip/src/files.h	/^typedef READ_ENTIRE_FILE(ReadEntireFile);$/;"	t
ReadFromFile	libberdip/src/files.h	/^typedef READ_FROM_FILE(ReadFromFile);$/;"	t
ReadFromFileOffset	libberdip/src/files.h	/^typedef READ_FROM_FILE_OFFSET(ReadFromFileOffset);$/;"	t
ReallocateMemorySize	libberdip/src/memory.h	/^typedef REALLOCATE_MEMORY_SIZE(ReallocateMemorySize);$/;"	t
RectPositionFlag	libberdip/src/drawing.cpp	/^enum RectPositionFlag$/;"	g	file:
RectPositionFlag	libberdip/src/drawing2d.cpp	/^enum RectPositionFlag$/;"	g	file:
Rectangle2	libberdip/src/vector_types.h	/^typedef struct Rectangle2$/;"	s
Rectangle2	libberdip/src/vector_types.h	/^} Rectangle2;$/;"	t	typeref:struct:Rectangle2
Rectangle2s	libberdip/src/vector_types.h	/^typedef struct Rectangle2s$/;"	s
Rectangle2s	libberdip/src/vector_types.h	/^} Rectangle2s;$/;"	t	typeref:struct:Rectangle2s
Rectangle2u	libberdip/src/vector_types.h	/^typedef struct Rectangle2u$/;"	s
Rectangle2u	libberdip/src/vector_types.h	/^} Rectangle2u;$/;"	t	typeref:struct:Rectangle2u
RegValueRead	user/bmd.cpp	/^struct RegValueRead$/;"	s	file:
RegWrite	kernel/xbmd.c	/^typedef union RegWrite {$/;"	u	file:
RegWrite	kernel/xbmd.c	/^} RegWrite;$/;"	t	typeref:union:RegWrite	file:
Reg_ComplSize	kernel/xbmd.h	/^    Reg_ComplSize,$/;"	e	enum:XbmDmaControlReg
Reg_ComplWithData	kernel/xbmd.h	/^    Reg_ComplWithData,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceCS	kernel/xbmd.h	/^    Reg_DeviceCS = 0, \/\/ NOTE(michiel): Control Status$/;"	e	enum:XbmDmaControlReg
Reg_DeviceDMACS	kernel/xbmd.h	/^    Reg_DeviceDMACS,  \/\/ NOTE(michiel): DMA Control Status$/;"	e	enum:XbmDmaControlReg
Reg_DeviceDirectedLinkChange	kernel/xbmd.h	/^    Reg_DeviceDirectedLinkChange,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceFCCompletionInfo	kernel/xbmd.h	/^    Reg_DeviceFCCompletionInfo,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceFCControl	kernel/xbmd.h	/^    Reg_DeviceFCControl,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceFCNonPostedInfo	kernel/xbmd.h	/^    Reg_DeviceFCNonPostedInfo,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceFCPostedInfo	kernel/xbmd.h	/^    Reg_DeviceFCPostedInfo,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceLinkTlpSize	kernel/xbmd.h	/^    Reg_DeviceLinkTlpSize,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceLinkWidth	kernel/xbmd.h	/^    Reg_DeviceLinkWidth,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceMSIControl	kernel/xbmd.h	/^    Reg_DeviceMSIControl,$/;"	e	enum:XbmDmaControlReg
Reg_DeviceMiscControl	kernel/xbmd.h	/^    Reg_DeviceMiscControl,$/;"	e	enum:XbmDmaControlReg
Reg_ReadComplStatus	kernel/xbmd.h	/^    Reg_ReadComplStatus,$/;"	e	enum:XbmDmaControlReg
Reg_ReadDMAPerf	kernel/xbmd.h	/^    Reg_ReadDMAPerf,$/;"	e	enum:XbmDmaControlReg
Reg_ReadTlpAddress	kernel/xbmd.h	/^    Reg_ReadTlpAddress,$/;"	e	enum:XbmDmaControlReg
Reg_ReadTlpCount	kernel/xbmd.h	/^    Reg_ReadTlpCount,$/;"	e	enum:XbmDmaControlReg
Reg_ReadTlpPattern	kernel/xbmd.h	/^    Reg_ReadTlpPattern,$/;"	e	enum:XbmDmaControlReg
Reg_ReadTlpSize	kernel/xbmd.h	/^    Reg_ReadTlpSize,$/;"	e	enum:XbmDmaControlReg
Reg_WriteDMAPerf	kernel/xbmd.h	/^    Reg_WriteDMAPerf,$/;"	e	enum:XbmDmaControlReg
Reg_WriteTlpAddress	kernel/xbmd.h	/^    Reg_WriteTlpAddress,$/;"	e	enum:XbmDmaControlReg
Reg_WriteTlpCount	kernel/xbmd.h	/^    Reg_WriteTlpCount,$/;"	e	enum:XbmDmaControlReg
Reg_WriteTlpPattern	kernel/xbmd.h	/^    Reg_WriteTlpPattern,$/;"	e	enum:XbmDmaControlReg
Reg_WriteTlpSize	kernel/xbmd.h	/^    Reg_WriteTlpSize,$/;"	e	enum:XbmDmaControlReg
RenderDisplay	libberdip/src/rendering2d.h	/^typedef RENDER_DISPLAY(RenderDisplay);$/;"	t
Renderer2D	libberdip/src/rendering2d.h	/^struct Renderer2D$/;"	s
S16_MAX	libberdip/src/common.h	139;"	d
S16_MIN	libberdip/src/common.h	138;"	d
S32_4x	libberdip/src/multilane.h	/^S32_4x(s32 s)$/;"	f
S32_4x	libberdip/src/multilane.h	/^S32_4x(s32 s0, s32 s1, s32 s2, s32 s3)$/;"	f
S32_MAX	libberdip/src/common.h	140;"	d
S32_MIN	libberdip/src/common.h	141;"	d
S64_2x	libberdip/src/multilane.h	/^S64_2x(s64 a)$/;"	f
S64_2x	libberdip/src/multilane.h	/^S64_2x(s64 a, s64 b)$/;"	f
S64_MAX	libberdip/src/common.h	142;"	d
S64_MIN	libberdip/src/common.h	143;"	d
S8_MAX	libberdip/src/common.h	137;"	d
S8_MIN	libberdip/src/common.h	136;"	d
SAVE	user/MersenneTwister.h	/^	enum { SAVE = N + 1 };         \/\/ length of array for save()$/;"	e	enum:MTRand::__anon70
SEM_DMA	kernel/xbmd.c	/^        SEM_DMA,$/;"	e	enum:__anon73	file:
SEM_READ	kernel/xbmd.c	/^        SEM_READ,$/;"	e	enum:__anon73	file:
SEM_READREG	kernel/xbmd.c	/^        SEM_READREG,$/;"	e	enum:__anon73	file:
SEM_WAITFOR	kernel/xbmd.c	/^        SEM_WAITFOR,$/;"	e	enum:__anon73	file:
SEM_WRITE	kernel/xbmd.c	/^        SEM_WRITE,$/;"	e	enum:__anon73	file:
SEM_WRITEREG	kernel/xbmd.c	/^        SEM_WRITEREG,$/;"	e	enum:__anon73	file:
SET_FILE_POSITION	libberdip/src/files.h	75;"	d
SET_FILE_POSITION	libberdip/src/linux_file.c	/^SET_FILE_POSITION(linux_set_file_position)$/;"	f
SHA1_OUTPUT_BYTE_COUNT	libberdip/src/sha.h	4;"	d
SHA1_OUTPUT_COUNT	libberdip/src/sha.h	3;"	d
SHA256_OUTPUT_COUNT	libberdip/src/sha.h	52;"	d
SINCOS_F64_PRECISION	libberdip/src/trigonometry_v1.h	50;"	d
STBTT_DEF	libberdip/src/stb_truetype.h	489;"	d
STBTT_DEF	libberdip/src/stb_truetype.h	491;"	d
STBTT_FIX	libberdip/src/stb_truetype.h	2722;"	d
STBTT_FIXMASK	libberdip/src/stb_truetype.h	2723;"	d
STBTT_FIXSHIFT	libberdip/src/stb_truetype.h	2721;"	d
STBTT_GPOS_TODO_assert	libberdip/src/stb_truetype.h	2409;"	d
STBTT_MACSTYLE_BOLD	libberdip/src/stb_truetype.h	995;"	d
STBTT_MACSTYLE_DONTCARE	libberdip/src/stb_truetype.h	994;"	d
STBTT_MACSTYLE_ITALIC	libberdip/src/stb_truetype.h	996;"	d
STBTT_MACSTYLE_NONE	libberdip/src/stb_truetype.h	998;"	d
STBTT_MACSTYLE_UNDERSCORE	libberdip/src/stb_truetype.h	997;"	d
STBTT_MAC_EID_ARABIC	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon61
STBTT_MAC_EID_CHINESE_TRAD	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon61
STBTT_MAC_EID_GREEK	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon61
STBTT_MAC_EID_HEBREW	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon61
STBTT_MAC_EID_JAPANESE	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon61
STBTT_MAC_EID_KOREAN	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon61
STBTT_MAC_EID_ROMAN	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon61
STBTT_MAC_EID_RUSSIAN	libberdip/src/stb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon61
STBTT_MAC_LANG_ARABIC	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon63
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon63
STBTT_MAC_LANG_CHINESE_TRAD	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon63
STBTT_MAC_LANG_DUTCH	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon63
STBTT_MAC_LANG_ENGLISH	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon63
STBTT_MAC_LANG_FRENCH	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon63
STBTT_MAC_LANG_GERMAN	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon63
STBTT_MAC_LANG_HEBREW	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon63
STBTT_MAC_LANG_ITALIAN	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon63
STBTT_MAC_LANG_JAPANESE	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon63
STBTT_MAC_LANG_KOREAN	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon63
STBTT_MAC_LANG_RUSSIAN	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon63
STBTT_MAC_LANG_SPANISH	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon63
STBTT_MAC_LANG_SWEDISH	libberdip/src/stb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon63
STBTT_MAX_OVERSAMPLE	libberdip/src/stb_truetype.h	1077;"	d
STBTT_MS_EID_SHIFTJIS	libberdip/src/stb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon60
STBTT_MS_EID_SYMBOL	libberdip/src/stb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon60
STBTT_MS_EID_UNICODE_BMP	libberdip/src/stb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon60
STBTT_MS_EID_UNICODE_FULL	libberdip/src/stb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon60
STBTT_MS_LANG_CHINESE	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon62
STBTT_MS_LANG_DUTCH	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon62
STBTT_MS_LANG_ENGLISH	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon62
STBTT_MS_LANG_FRENCH	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon62
STBTT_MS_LANG_GERMAN	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon62
STBTT_MS_LANG_HEBREW	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon62
STBTT_MS_LANG_ITALIAN	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon62
STBTT_MS_LANG_JAPANESE	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon62
STBTT_MS_LANG_KOREAN	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon62
STBTT_MS_LANG_RUSSIAN	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon62
STBTT_MS_LANG_SPANISH	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon62
STBTT_MS_LANG_SWEDISH	libberdip/src/stb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon62
STBTT_PLATFORM_ID_ISO	libberdip/src/stb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon58
STBTT_PLATFORM_ID_MAC	libberdip/src/stb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon58
STBTT_PLATFORM_ID_MICROSOFT	libberdip/src/stb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon58
STBTT_PLATFORM_ID_UNICODE	libberdip/src/stb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon58
STBTT_POINT_SIZE	libberdip/src/stb_truetype.h	588;"	d
STBTT_RASTERIZER_VERSION	libberdip/src/stb_truetype.h	1087;"	d
STBTT_STATIC	libberdip/src/fonts.cpp	37;"	d	file:
STBTT_STATIC	libberdip/src/rendering2d.cpp	50;"	d	file:
STBTT_UNICODE_EID_ISO_10646	libberdip/src/stb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon59
STBTT_UNICODE_EID_UNICODE_1_0	libberdip/src/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon59
STBTT_UNICODE_EID_UNICODE_1_1	libberdip/src/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon59
STBTT_UNICODE_EID_UNICODE_2_0_BMP	libberdip/src/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon59
STBTT_UNICODE_EID_UNICODE_2_0_FULL	libberdip/src/stb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon59
STBTT__COMPARE	libberdip/src/stb_truetype.h	3217;"	d
STBTT__CSCTX_INIT	libberdip/src/stb_truetype.h	1862;"	d
STBTT__CSERR	libberdip/src/stb_truetype.h	1971;"	d
STBTT__CSERR	libberdip/src/stb_truetype.h	2219;"	d
STBTT__NOTUSED	libberdip/src/stb_truetype.h	1091;"	d
STBTT__NOTUSED	libberdip/src/stb_truetype.h	1093;"	d
STBTT__OVER_MASK	libberdip/src/stb_truetype.h	3830;"	d
STBTT_acos	libberdip/src/fonts.cpp	25;"	d	file:
STBTT_acos	libberdip/src/fonts.cpp	33;"	d	file:
STBTT_acos	libberdip/src/rendering2d.cpp	39;"	d	file:
STBTT_acos	libberdip/src/stb_truetype.h	446;"	d
STBTT_assert	libberdip/src/fonts.cpp	18;"	d	file:
STBTT_assert	libberdip/src/rendering2d.cpp	45;"	d	file:
STBTT_assert	libberdip/src/stb_truetype.h	463;"	d
STBTT_cos	libberdip/src/fonts.cpp	24;"	d	file:
STBTT_cos	libberdip/src/fonts.cpp	32;"	d	file:
STBTT_cos	libberdip/src/rendering2d.cpp	38;"	d	file:
STBTT_cos	libberdip/src/stb_truetype.h	445;"	d
STBTT_fabs	libberdip/src/fonts.cpp	26;"	d	file:
STBTT_fabs	libberdip/src/fonts.cpp	34;"	d	file:
STBTT_fabs	libberdip/src/rendering2d.cpp	40;"	d	file:
STBTT_fabs	libberdip/src/stb_truetype.h	451;"	d
STBTT_fmod	libberdip/src/fonts.cpp	23;"	d	file:
STBTT_fmod	libberdip/src/fonts.cpp	31;"	d	file:
STBTT_fmod	libberdip/src/rendering2d.cpp	37;"	d	file:
STBTT_fmod	libberdip/src/stb_truetype.h	440;"	d
STBTT_free	libberdip/src/rendering2d.cpp	43;"	d	file:
STBTT_free	libberdip/src/stb_truetype.h	458;"	d
STBTT_iceil	libberdip/src/fonts.cpp	21;"	d	file:
STBTT_iceil	libberdip/src/fonts.cpp	29;"	d	file:
STBTT_iceil	libberdip/src/rendering2d.cpp	34;"	d	file:
STBTT_iceil	libberdip/src/stb_truetype.h	429;"	d
STBTT_ifloor	libberdip/src/fonts.cpp	20;"	d	file:
STBTT_ifloor	libberdip/src/fonts.cpp	28;"	d	file:
STBTT_ifloor	libberdip/src/rendering2d.cpp	33;"	d	file:
STBTT_ifloor	libberdip/src/stb_truetype.h	428;"	d
STBTT_malloc	libberdip/src/rendering2d.cpp	42;"	d	file:
STBTT_malloc	libberdip/src/stb_truetype.h	457;"	d
STBTT_max	libberdip/src/stb_truetype.h	4216;"	d
STBTT_memcpy	libberdip/src/rendering2d.cpp	/^STBTT_memcpy(void *dest, void *src, umm size)$/;"	f
STBTT_memcpy	libberdip/src/stb_truetype.h	473;"	d
STBTT_memset	libberdip/src/rendering2d.cpp	/^STBTT_memset(void *dest, s32 value, umm size)$/;"	f
STBTT_memset	libberdip/src/stb_truetype.h	474;"	d
STBTT_min	libberdip/src/stb_truetype.h	4215;"	d
STBTT_pow	libberdip/src/fonts.cpp	22;"	d	file:
STBTT_pow	libberdip/src/fonts.cpp	30;"	d	file:
STBTT_pow	libberdip/src/rendering2d.cpp	36;"	d	file:
STBTT_pow	libberdip/src/stb_truetype.h	435;"	d
STBTT_sqrt	libberdip/src/fonts.cpp	17;"	d	file:
STBTT_sqrt	libberdip/src/rendering2d.cpp	35;"	d	file:
STBTT_sqrt	libberdip/src/stb_truetype.h	434;"	d
STBTT_strlen	libberdip/src/rendering2d.cpp	48;"	d	file:
STBTT_strlen	libberdip/src/stb_truetype.h	468;"	d
STBTT_vcubic	libberdip/src/stb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anon55
STBTT_vcurve	libberdip/src/stb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anon55
STBTT_vline	libberdip/src/stb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anon55
STBTT_vmove	libberdip/src/stb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anon55
STB_TRUETYPE_IMPLEMENTATION	libberdip/src/fonts.cpp	38;"	d	file:
STB_TRUETYPE_IMPLEMENTATION	libberdip/src/rendering2d.cpp	51;"	d	file:
STR_FMT	libberdip/src/strings.h	305;"	d
SUBALLOC_HEADER_OFFSET	libberdip/src/suballoc.cpp	4;"	d	file:
SUB_ALLOC_DEBUG	libberdip/src/suballoc.h	2;"	d
SUCCESS	kernel/xbmd.h	66;"	d
SetFilePosition	libberdip/src/files.h	/^typedef SET_FILE_POSITION(SetFilePosition);$/;"	t
Sha1Context	libberdip/src/sha.h	/^struct Sha1Context$/;"	s
Sha256Context	libberdip/src/sha.h	/^struct Sha256Context$/;"	s
SinCos32_4x	libberdip/src/multilane.h	/^struct SinCos32_4x$/;"	s
SinCos64_2x	libberdip/src/multilane.h	/^struct SinCos64_2x$/;"	s
SourcePos	libberdip/src/tokenizer.h	/^struct SourcePos$/;"	s
StdGlobalMemory	libberdip/src/std_memory.h	/^struct StdGlobalMemory$/;"	s
StdMemoryBlock	libberdip/src/std_memory.h	/^struct StdMemoryBlock$/;"	s
Stream	libberdip/src/types.h	/^struct Stream$/;"	s
String	libberdip/src/types.h	/^typedef Buffer String;$/;"	t
SubAllocItem	libberdip/src/suballoc.h	/^union SubAllocItem$/;"	u
SubAllocator	libberdip/src/suballoc.h	/^struct SubAllocator$/;"	s
TEST_BEGIN	libberdip/src/tests.h	37;"	d
TEST_BEGIN	libberdip/test/common_c.c	/^TEST_BEGIN(buffer)$/;"	f
TEST_BEGIN	libberdip/test/common_cpp.cpp	/^TEST_BEGIN(buffer)$/;"	f
TEST_BEGIN	libberdip/test/common_cpp.cpp	/^TEST_BEGIN(get_extension)$/;"	f
TEST_BEGIN	libberdip/test/common_cpp.cpp	/^TEST_BEGIN(map)$/;"	f
TEST_BEGIN	libberdip/test/common_cpp.cpp	/^TEST_BEGIN(string_funcs)$/;"	f
TEST_BEGIN	libberdip/test/common_cpp.cpp	/^TEST_BEGIN(string_intern)$/;"	f
TEST_BEGIN	libberdip/test/maths.cpp	/^TEST_BEGIN(divmod)$/;"	f
TEST_BEGIN	libberdip/test/tokenizer_cpp.cpp	/^TEST_BEGIN(tokenizer)$/;"	f
TEST_END	libberdip/src/tests.h	42;"	d
TEST_END	libberdip/test/common_c.c	/^TEST_END(buffer)$/;"	f
TEST_END	libberdip/test/common_c.c	/^TEST_END(map)$/;"	f
TEST_END	libberdip/test/common_c.c	/^TEST_END(string_funcs)$/;"	f
TEST_END	libberdip/test/common_c.c	/^TEST_END(string_intern)$/;"	f
TRIGONOMETRY_FILE	libberdip/src/maths.h	8;"	d
TempArenaMemory	libberdip/src/memory.h	/^struct TempArenaMemory$/;"	s
ThreadingAPI	libberdip/src/threading.h	/^typedef struct ThreadingAPI$/;"	s
ThreadingAPI	libberdip/src/threading.h	/^} ThreadingAPI;$/;"	t	typeref:struct:ThreadingAPI
TicketMutex	libberdip/src/intrinsics.h	/^struct TicketMutex$/;"	s
Token	libberdip/src/tokenizer.h	/^struct Token$/;"	s
TokenCount	libberdip/src/tokenizer.h	/^    TokenCount$/;"	e	enum:TokenKind
TokenKind	libberdip/src/tokenizer.h	/^enum TokenKind$/;"	g
Token_Add	libberdip/src/tokenizer.h	/^    Token_Add,          \/\/ +$/;"	e	enum:TokenKind
Token_AddAssign	libberdip/src/tokenizer.h	/^    Token_AddAssign,    \/\/ +=$/;"	e	enum:TokenKind
Token_And	libberdip/src/tokenizer.h	/^    Token_And,          \/\/ &$/;"	e	enum:TokenKind
Token_AndAssign	libberdip/src/tokenizer.h	/^    Token_AndAssign,    \/\/ &=$/;"	e	enum:TokenKind
Token_Assign	libberdip/src/tokenizer.h	/^    Token_Assign,       \/\/ =$/;"	e	enum:TokenKind
Token_Backslash	libberdip/src/tokenizer.h	/^    Token_Backslash,    \/\/ \\ <= Extra space in comment needed otherwise the newline is escaped$/;"	e	enum:TokenKind
Token_BraceClose	libberdip/src/tokenizer.h	/^    Token_BraceClose,   \/\/ }$/;"	e	enum:TokenKind
Token_BraceOpen	libberdip/src/tokenizer.h	/^    Token_BraceOpen,    \/\/ {$/;"	e	enum:TokenKind
Token_BracketClose	libberdip/src/tokenizer.h	/^    Token_BracketClose, \/\/ ]$/;"	e	enum:TokenKind
Token_BracketOpen	libberdip/src/tokenizer.h	/^    Token_BracketOpen,  \/\/ [$/;"	e	enum:TokenKind
Token_Colon	libberdip/src/tokenizer.h	/^    Token_Colon,        \/\/ :$/;"	e	enum:TokenKind
Token_Comma	libberdip/src/tokenizer.h	/^    Token_Comma,        \/\/ ,$/;"	e	enum:TokenKind
Token_Decrement	libberdip/src/tokenizer.h	/^    Token_Decrement,    \/\/ --$/;"	e	enum:TokenKind
Token_DivAssign	libberdip/src/tokenizer.h	/^    Token_DivAssign,    \/\/ \/=$/;"	e	enum:TokenKind
Token_Divide	libberdip/src/tokenizer.h	/^    Token_Divide,       \/\/ \/$/;"	e	enum:TokenKind
Token_Dollar	libberdip/src/tokenizer.h	/^    Token_Dollar,       \/\/ \$$/;"	e	enum:TokenKind
Token_Dot	libberdip/src/tokenizer.h	/^    Token_Dot,          \/\/ .$/;"	e	enum:TokenKind
Token_EOF	libberdip/src/tokenizer.h	/^    Token_EOF,$/;"	e	enum:TokenKind
Token_Eq	libberdip/src/tokenizer.h	/^    Token_Eq,           \/\/ ==$/;"	e	enum:TokenKind
Token_Float	libberdip/src/tokenizer.h	/^    Token_Float,        \/\/ 0.12 0.12f 0.12e10 0.12e+10 0.12e-10 etc$/;"	e	enum:TokenKind
Token_Gt	libberdip/src/tokenizer.h	/^    Token_Gt,           \/\/ >$/;"	e	enum:TokenKind
Token_GtEq	libberdip/src/tokenizer.h	/^    Token_GtEq,         \/\/ >=$/;"	e	enum:TokenKind
Token_Increment	libberdip/src/tokenizer.h	/^    Token_Increment,    \/\/ ++$/;"	e	enum:TokenKind
Token_Integer	libberdip/src/tokenizer.h	/^    Token_Integer,      \/\/ 12 0x12 0b10 12e10 12e+10 12e-10 etc$/;"	e	enum:TokenKind
Token_InvAssign	libberdip/src/tokenizer.h	/^    Token_InvAssign,    \/\/ ~=$/;"	e	enum:TokenKind
Token_Invert	libberdip/src/tokenizer.h	/^    Token_Invert,       \/\/ ~$/;"	e	enum:TokenKind
Token_LogicalAnd	libberdip/src/tokenizer.h	/^    Token_LogicalAnd,   \/\/ &&$/;"	e	enum:TokenKind
Token_LogicalOr	libberdip/src/tokenizer.h	/^    Token_LogicalOr,    \/\/ ||$/;"	e	enum:TokenKind
Token_Lt	libberdip/src/tokenizer.h	/^    Token_Lt,           \/\/ <$/;"	e	enum:TokenKind
Token_LtEq	libberdip/src/tokenizer.h	/^    Token_LtEq,         \/\/ <=$/;"	e	enum:TokenKind
Token_ModAssign	libberdip/src/tokenizer.h	/^    Token_ModAssign,    \/\/ %=$/;"	e	enum:TokenKind
Token_Modulus	libberdip/src/tokenizer.h	/^    Token_Modulus,      \/\/ %$/;"	e	enum:TokenKind
Token_MulAssign	libberdip/src/tokenizer.h	/^    Token_MulAssign,    \/\/ *=$/;"	e	enum:TokenKind
Token_Multiply	libberdip/src/tokenizer.h	/^    Token_Multiply,     \/\/ *$/;"	e	enum:TokenKind
Token_Name	libberdip/src/tokenizer.h	/^    Token_Name,         \/\/ a..zA..Z_...$/;"	e	enum:TokenKind
Token_Negate	libberdip/src/tokenizer.h	/^    Token_Negate = Token_Subtract,$/;"	e	enum:TokenKind
Token_Neq	libberdip/src/tokenizer.h	/^    Token_Neq,          \/\/ !=$/;"	e	enum:TokenKind
Token_Newline	libberdip/src/tokenizer.h	/^    Token_Newline,$/;"	e	enum:TokenKind
Token_None	libberdip/src/tokenizer.h	/^    Token_None,$/;"	e	enum:TokenKind
Token_Not	libberdip/src/tokenizer.h	/^    Token_Not,          \/\/ !$/;"	e	enum:TokenKind
Token_Number	libberdip/src/tokenizer.h	/^    Token_Number,       \/\/ #$/;"	e	enum:TokenKind
Token_Or	libberdip/src/tokenizer.h	/^    Token_Or,           \/\/ |$/;"	e	enum:TokenKind
Token_OrAssign	libberdip/src/tokenizer.h	/^    Token_OrAssign,     \/\/ |=$/;"	e	enum:TokenKind
Token_ParenClose	libberdip/src/tokenizer.h	/^    Token_ParenClose,   \/\/ )$/;"	e	enum:TokenKind
Token_ParenOpen	libberdip/src/tokenizer.h	/^    Token_ParenOpen,    \/\/ ($/;"	e	enum:TokenKind
Token_Query	libberdip/src/tokenizer.h	/^    Token_Query,        \/\/ ?$/;"	e	enum:TokenKind
Token_Quote	libberdip/src/tokenizer.h	/^    Token_Quote,        \/\/ '$/;"	e	enum:TokenKind
Token_SemiColon	libberdip/src/tokenizer.h	/^    Token_SemiColon,    \/\/ ;$/;"	e	enum:TokenKind
Token_ShiftLeft	libberdip/src/tokenizer.h	/^    Token_ShiftLeft,    \/\/ <<$/;"	e	enum:TokenKind
Token_ShiftRight	libberdip/src/tokenizer.h	/^    Token_ShiftRight,   \/\/ >>$/;"	e	enum:TokenKind
Token_SlAssign	libberdip/src/tokenizer.h	/^    Token_SlAssign,     \/\/ <<=$/;"	e	enum:TokenKind
Token_SrAssign	libberdip/src/tokenizer.h	/^    Token_SrAssign,     \/\/ >>=$/;"	e	enum:TokenKind
Token_String	libberdip/src/tokenizer.h	/^    Token_String,       \/\/ "..."$/;"	e	enum:TokenKind
Token_SubAssign	libberdip/src/tokenizer.h	/^    Token_SubAssign,    \/\/ -=$/;"	e	enum:TokenKind
Token_Subtract	libberdip/src/tokenizer.h	/^    Token_Subtract,     \/\/ -$/;"	e	enum:TokenKind
Token_Xor	libberdip/src/tokenizer.h	/^    Token_Xor,          \/\/ ^$/;"	e	enum:TokenKind
Token_XorAssign	libberdip/src/tokenizer.h	/^    Token_XorAssign,    \/\/ ^=$/;"	e	enum:TokenKind
Tokenizer	libberdip/src/tokenizer.h	/^struct Tokenizer$/;"	s
TransferData	user/bmd.cpp	/^struct TransferData  {$/;"	s	file:
U16_MAX	libberdip/src/common.h	132;"	d
U32F32	libberdip/src/common.h	/^typedef union u32f32 { u32 u; f32 f; } U32F32;$/;"	t	typeref:union:u32f32
U32_MAX	libberdip/src/common.h	133;"	d
U64F64	libberdip/src/common.h	/^typedef union u64f64 { u64 u; f64 f; } U64F64;$/;"	t	typeref:union:u64f64
U64_MAX	libberdip/src/common.h	134;"	d
U8_MAX	libberdip/src/common.h	131;"	d
V2	libberdip/src/vectors.h	/^V2(f32 x, f32 y)$/;"	f
V2	libberdip/src/vectors.h	/^V2(v2s v)$/;"	f
V2	libberdip/src/vectors.h	/^V2(v2u v)$/;"	f
V2S	libberdip/src/vectors.h	/^V2S(s32 x, s32 y)$/;"	f
V2S	libberdip/src/vectors.h	/^V2S(v2 vf)$/;"	f
V2S	libberdip/src/vectors.h	/^V2S(v2u u)$/;"	f
V2U	libberdip/src/vectors.h	/^V2U(u32 x, u32 y)$/;"	f
V2U	libberdip/src/vectors.h	/^V2U(v2 vf)$/;"	f
V2U	libberdip/src/vectors.h	/^V2U(v2s vs)$/;"	f
V2_4x	libberdip/src/multilane.h	/^V2_4x(f32 *f, b32 interleaved = true)$/;"	f
V2_4x	libberdip/src/multilane.h	/^V2_4x(f32 x, f32 y)$/;"	f
V2_4x	libberdip/src/multilane.h	/^V2_4x(v2 vec0, v2 vec1, v2 vec2, v2 vec3)$/;"	f
V3	libberdip/src/vectors.h	/^V3(f32 x, f32 y, f32 z)$/;"	f
V3	libberdip/src/vectors.h	/^V3(v2 xy, f32 z)$/;"	f
V3	libberdip/src/vectors.h	/^V3(v3s v)$/;"	f
V3	libberdip/src/vectors.h	/^V3(v3u v)$/;"	f
V3S	libberdip/src/vectors.h	/^V3S(s32 x, s32 y, s32 z)$/;"	f
V3S	libberdip/src/vectors.h	/^V3S(v2s xy, s32 z)$/;"	f
V3S	libberdip/src/vectors.h	/^V3S(v3 vf)$/;"	f
V3S	libberdip/src/vectors.h	/^V3S(v3u vu)$/;"	f
V3U	libberdip/src/vectors.h	/^V3U(u32 x, u32 y, u32 z)$/;"	f
V3U	libberdip/src/vectors.h	/^V3U(v2u xy, u32 z)$/;"	f
V3U	libberdip/src/vectors.h	/^V3U(v3 vf)$/;"	f
V3U	libberdip/src/vectors.h	/^V3U(v3s vs)$/;"	f
V3_4x	libberdip/src/multilane.h	/^V3_4x(f32 *f, b32 interleaved = true)$/;"	f
V3_4x	libberdip/src/multilane.h	/^V3_4x(f32 x, f32 y, f32 z)$/;"	f
V3_4x	libberdip/src/multilane.h	/^V3_4x(v3 vec)$/;"	f
V3_4x	libberdip/src/multilane.h	/^V3_4x(v3 vec0, v3 vec1, v3 vec2, v3 vec3)$/;"	f
V4	libberdip/src/vectors.h	/^V4(f32 x, f32 y, f32 z, f32 w)$/;"	f
V4	libberdip/src/vectors.h	/^V4(v2 xy, f32 z, f32 w)$/;"	f
V4	libberdip/src/vectors.h	/^V4(v2 xy, v2 zw)$/;"	f
V4	libberdip/src/vectors.h	/^V4(v3 xyz, f32 w)$/;"	f
V4_4x	libberdip/src/multilane.h	/^V4_4x(f32 *f, b32 interleaved = true)$/;"	f
V4_4x	libberdip/src/multilane.h	/^V4_4x(f32 x, f32 y, f32 z, f32 w)$/;"	f
V4_4x	libberdip/src/multilane.h	/^V4_4x(v4 vec)$/;"	f
V4_4x	libberdip/src/multilane.h	/^V4_4x(v4 vec0, v4 vec1, v4 vec2, v4 vec3)$/;"	f
VERBOSE	kernel/xbmd.h	69;"	d
Vertex2D	libberdip/src/drawing2d.cpp	/^struct Vertex2D$/;"	s	file:
WDMAPERF	user/xbmd_main.h	67;"	d
WDMATLPA	user/xbmd_main.h	59;"	d
WDMATLPC	user/xbmd_main.h	61;"	d
WDMATLPP	user/xbmd_main.h	62;"	d
WDMATLPS	user/xbmd_main.h	60;"	d
WRITE_ENTIRE_FILE	libberdip/src/files.h	84;"	d
WRITE_ENTIRE_FILE	libberdip/src/linux_file.c	/^WRITE_ENTIRE_FILE(linux_write_entire_file)$/;"	f
WRITE_ENTIRE_FILE	libberdip/src/std_file.c	/^internal WRITE_ENTIRE_FILE(write_entire_file)$/;"	f
WRITE_FMT_TO_FILE	libberdip/src/files.h	115;"	d
WRITE_FMT_TO_FILE	libberdip/src/linux_file.c	/^WRITE_FMT_TO_FILE(linux_write_fmt_to_file)$/;"	f
WRITE_FMT_TO_FILE	libberdip/src/std_file.c	/^internal WRITE_FMT_TO_FILE(write_fmt_to_file)$/;"	f
WRITE_TO_FILE	libberdip/src/files.h	112;"	d
WRITE_TO_FILE	libberdip/src/linux_file.c	/^WRITE_TO_FILE(linux_write_to_file)$/;"	f
WRITE_TO_FILE	libberdip/src/std_file.c	/^internal WRITE_TO_FILE(write_to_file)$/;"	f
WRITE_VFMT_TO_FILE	libberdip/src/files.h	118;"	d
WRITE_VFMT_TO_FILE	libberdip/src/linux_file.c	/^WRITE_VFMT_TO_FILE(linux_write_vfmt_to_file)$/;"	f
WRITE_VFMT_TO_FILE	libberdip/src/std_file.c	/^internal WRITE_VFMT_TO_FILE(write_vfmt_to_file)$/;"	f
WriteData	user/bmd.cpp	/^int WriteData(int g_devFile, char* buff, size_t size)$/;"	f
WriteEntireFile	libberdip/src/files.h	/^typedef WRITE_ENTIRE_FILE(WriteEntireFile);$/;"	t
WriteFmtToFile	libberdip/src/files.h	/^typedef WRITE_FMT_TO_FILE(WriteFmtToFile);$/;"	t
WriteToFile	libberdip/src/files.h	/^typedef WRITE_TO_FILE(WriteToFile);$/;"	t
WriteVFmtToFile	libberdip/src/files.h	/^typedef WRITE_VFMT_TO_FILE(WriteVFmtToFile);$/;"	t
XBMD_IOC_DISP_REGS	kernel/xbmd.h	106;"	d
XBMD_IOC_INITCARD	kernel/xbmd.h	104;"	d
XBMD_IOC_MAGIC	kernel/xbmd.h	102;"	d
XBMD_IOC_RD_BMD_REG	kernel/xbmd.h	140;"	d
XBMD_IOC_RD_CFG_REG	kernel/xbmd.h	141;"	d
XBMD_IOC_READ_CMPL	kernel/xbmd.h	119;"	d
XBMD_IOC_READ_CSIZE	kernel/xbmd.h	121;"	d
XBMD_IOC_READ_CTRL	kernel/xbmd.h	107;"	d
XBMD_IOC_READ_CWDATA	kernel/xbmd.h	120;"	d
XBMD_IOC_READ_DIR_LINK	kernel/xbmd.h	126;"	d
XBMD_IOC_READ_DMA_CTRL	kernel/xbmd.h	108;"	d
XBMD_IOC_READ_FC_CMPL	kernel/xbmd.h	130;"	d
XBMD_IOC_READ_FC_CTRL	kernel/xbmd.h	127;"	d
XBMD_IOC_READ_FC_NPOST	kernel/xbmd.h	129;"	d
XBMD_IOC_READ_FC_POST	kernel/xbmd.h	128;"	d
XBMD_IOC_READ_INTRPT	kernel/xbmd.h	125;"	d
XBMD_IOC_READ_LINKLEN	kernel/xbmd.h	123;"	d
XBMD_IOC_READ_LINKWDTH	kernel/xbmd.h	122;"	d
XBMD_IOC_READ_MISC_CTL	kernel/xbmd.h	124;"	d
XBMD_IOC_READ_RD_ADDR	kernel/xbmd.h	114;"	d
XBMD_IOC_READ_RD_COUNT	kernel/xbmd.h	116;"	d
XBMD_IOC_READ_RD_LEN	kernel/xbmd.h	115;"	d
XBMD_IOC_READ_RD_PERF	kernel/xbmd.h	118;"	d
XBMD_IOC_READ_RD_PTRN	kernel/xbmd.h	113;"	d
XBMD_IOC_READ_WR_ADDR	kernel/xbmd.h	109;"	d
XBMD_IOC_READ_WR_COUNT	kernel/xbmd.h	111;"	d
XBMD_IOC_READ_WR_LEN	kernel/xbmd.h	110;"	d
XBMD_IOC_READ_WR_PERF	kernel/xbmd.h	117;"	d
XBMD_IOC_READ_WR_PTRN	kernel/xbmd.h	112;"	d
XBMD_IOC_RESET	kernel/xbmd.h	105;"	d
XBMD_IOC_WRITE_DIR_LINK	kernel/xbmd.h	139;"	d
XBMD_IOC_WRITE_DMA_CTRL	kernel/xbmd.h	131;"	d
XBMD_IOC_WRITE_MISC_CTL	kernel/xbmd.h	138;"	d
XBMD_IOC_WRITE_RD_COUNT	kernel/xbmd.h	136;"	d
XBMD_IOC_WRITE_RD_LEN	kernel/xbmd.h	135;"	d
XBMD_IOC_WRITE_RD_PTRN	kernel/xbmd.h	137;"	d
XBMD_IOC_WRITE_WR_COUNT	kernel/xbmd.h	133;"	d
XBMD_IOC_WRITE_WR_LEN	kernel/xbmd.h	132;"	d
XBMD_IOC_WRITE_WR_PTRN	kernel/xbmd.h	134;"	d
XBMD_IOC_WR_BMD_REG	kernel/xbmd.h	142;"	d
XBMD_IOC_WR_CFG_REG	kernel/xbmd.h	143;"	d
XBMD_REGISTER_SIZE	kernel/xbmd.c	94;"	d	file:
XPCIe_Exit	kernel/xbmd.c	/^XPCIe_Exit(xbmd_device *dev)$/;"	f	file:
XPCIe_IRQHandler	kernel/xbmd.c	/^irqreturn_t XPCIe_IRQHandler(int irq, void *dev_id)$/;"	f
XPCIe_IRQMSIHandler	kernel/xbmd.c	/^irqreturn_t XPCIe_IRQMSIHandler(int irq, void *dev_id)$/;"	f
XPCIe_InitCard	kernel/xbmd.c	/^void XPCIe_InitCard(xbmd_device *dev)$/;"	f
XPCIe_InitiatorReset	kernel/xbmd.c	/^void XPCIe_InitiatorReset(xbmd_device *dev)$/;"	f
XPCIe_Ioctl	kernel/xbmd.c	/^long XPCIe_Ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f
XPCIe_Open	kernel/xbmd.c	/^int XPCIe_Open(struct inode *inode, struct file *filp)$/;"	f
XPCIe_Probe	kernel/xbmd.c	/^XPCIe_Probe(struct pci_dev *pci, const struct pci_device_id *pci_id)$/;"	f	file:
XPCIe_Read	kernel/xbmd.c	/^ssize_t XPCIe_Read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)$/;"	f
XPCIe_ReadCfgReg	kernel/xbmd.c	/^u32 XPCIe_ReadCfgReg(xbmd_device *dev, u32 byte) {$/;"	f
XPCIe_ReadReg	kernel/xbmd.c	/^u32 XPCIe_ReadReg(xbmd_device *dev, u32 dw_offset)$/;"	f
XPCIe_Release	kernel/xbmd.c	/^int XPCIe_Release(struct inode *inode, struct file *filp)$/;"	f
XPCIe_Remove	kernel/xbmd.c	/^void XPCIe_Remove(struct pci_dev *pci)$/;"	f
XPCIe_Write	kernel/xbmd.c	/^ssize_t XPCIe_Write(struct file *filp, const char __user *buf, size_t count,$/;"	f
XPCIe_WriteCfgReg	kernel/xbmd.c	/^u32 XPCIe_WriteCfgReg(xbmd_device *dev, u32 byte, u32 val) {$/;"	f
XPCIe_WriteReg	kernel/xbmd.c	/^void XPCIe_WriteReg(xbmd_device *dev, u32 dw_offset, u32 val)$/;"	f
XPCIe_drive	kernel/xbmd.c	/^module_pci_driver(XPCIe_drive);$/;"	v
XPCIe_drive	kernel/xbmd.c	/^static struct pci_driver XPCIe_drive =$/;"	v	typeref:struct:pci_driver	file:
XPCIe_fops	kernel/xbmd.c	/^struct file_operations XPCIe_fops = {$/;"	v	typeref:struct:file_operations
XPCIe_ids	kernel/xbmd.c	/^static const struct pci_device_id XPCIe_ids[] =$/;"	v	typeref:struct:pci_device_id	file:
XbmDmaControlReg	kernel/xbmd.h	/^typedef enum XbmDmaControlReg$/;"	g
XbmDmaControlReg	kernel/xbmd.h	/^} XbmDmaControlReg;$/;"	t	typeref:enum:XbmDmaControlReg
_CRT_SECURE_NO_WARNINGS	libberdip/src/fonts.cpp	4;"	d	file:
__STB_INCLUDE_STB_TRUETYPE_H__	libberdip/src/stb_truetype.h	486;"	d
__has_builtin	libberdip/src/common.h	75;"	d
a	libberdip/src/multilane.h	/^        f32_4x a;$/;"	m	struct:v4_4x::__anon7
a	libberdip/src/vector_types.h	/^        f32 a;$/;"	m	struct:v4::__anon31
a	libberdip/src/vector_types.h	/^        s32 a;$/;"	m	struct:v4s::__anon38
a	libberdip/src/vector_types.h	/^        u32 a;$/;"	m	struct:v4u::__anon46
abcd	libberdip/src/sha.h	/^    __m128i abcd;$/;"	m	struct:Sha1Context
abef	libberdip/src/sha.h	/^    __m128i abef;$/;"	m	struct:Sha256Context
absolute	libberdip/src/complex.h	/^absolute(Complex32 c)$/;"	f
absolute	libberdip/src/complex.h	/^absolute(Complex64 c)$/;"	f
absolute	libberdip/src/maths.h	/^absolute(f32 value)$/;"	f
absolute	libberdip/src/maths.h	/^absolute(f64 value)$/;"	f
absolute	libberdip/src/maths.h	/^absolute(s32 value)$/;"	f
absolute	libberdip/src/maths.h	/^absolute(s64 value)$/;"	f
absolute	libberdip/src/multilane.h	/^absolute(f32_4x f4)$/;"	f
absolute	libberdip/src/vectors.h	/^absolute(v2 a)$/;"	f
absolute	libberdip/src/vectors.h	/^absolute(v3 a)$/;"	f
absolute	libberdip/src/vectors.h	/^absolute(v4 a)$/;"	f
acos_pi	libberdip/src/trigonometry_v1.h	/^acos_pi(f32 angle)$/;"	f
acos_pi	libberdip/src/trigonometry_v2.h	/^acos_pi(f32 angle)$/;"	f
acos_pi	libberdip/src/trigonometry_v2.h	/^acos_pi(f64 angle)$/;"	f
add_character	libberdip/src/fonts.cpp	/^add_character(MemoryAllocator *allocator, stbtt_fontinfo *fontInfo, FontLoader *font, u32 codePoint)$/;"	f
add_to_free_list	libberdip/src/suballoc.cpp	/^add_to_free_list(SubAllocator *subAllocator, SubAllocItem *entry, u32 bucket)$/;"	f
add_work_entry	libberdip/src/threading.h	/^    PlatformAddWorkEntry    *add_work_entry;$/;"	m	struct:ThreadingAPI
adv	libberdip/src/fonts.h	112;"	d
adv	libberdip/src/fonts.h	62;"	d
advance	libberdip/src/common.h	/^advance(Buffer *b, u32 amount = 1)$/;"	f
advance	libberdip/src/common.h	/^advance(Buffer *b, u32 amount)$/;"	f
advance	libberdip/src/common.h	/^advance(Buffer b, u32 amount = 1)$/;"	f
advance	libberdip/src/json.cpp	/^advance(JsonParser *parser)$/;"	f
advance_scanner	libberdip/src/tokenizer.cpp	/^advance_scanner(Tokenizer *tokenizer)$/;"	f
advance_sub	libberdip/src/common.h	/^advance_sub(Buffer b, u32 amount)$/;"	f
align16	libberdip/src/common.h	204;"	d
align4	libberdip/src/common.h	202;"	d
align8	libberdip/src/common.h	203;"	d
align_down	libberdip/src/common.h	200;"	d
align_memory_alloc	libberdip/src/memory.h	/^align_memory_alloc(u32 alignment, b32 clear = true)$/;"	f
align_ptr_down	libberdip/src/common.h	205;"	d
align_ptr_up	libberdip/src/common.h	206;"	d
align_up	libberdip/src/common.h	201;"	d
all	libberdip/src/multilane.h	/^all(f32_4x f4)$/;"	f
alloc_circular_buffer	libberdip/src/circularbuf.cpp	/^alloc_circular_buffer(MemoryAllocator *allocator, u32 size)$/;"	f
allocate_array	libberdip/src/memory.h	156;"	d
allocate_copy	libberdip/src/memory.h	/^    AllocateMemoryCopy    *allocate_copy;$/;"	m	struct:MemoryAllocator
allocate_copy	libberdip/src/memory.h	/^allocate_copy(MemoryAllocator *alloc, umm size, void *source, u32 flags)$/;"	f
allocate_copy_array	libberdip/src/memory.h	158;"	d
allocate_copy_struct	libberdip/src/memory.h	157;"	d
allocate_memory	libberdip/src/memory.h	/^    PlatformAllocateMemory *allocate_memory;$/;"	m	struct:MemoryAPI
allocate_rand_list	libberdip/src/random.h	/^allocate_rand_list(MemoryAllocator *allocator, u32 count)$/;"	f
allocate_size	libberdip/src/memory.h	/^    AllocateMemorySize    *allocate_size;$/;"	m	struct:MemoryAllocator
allocate_size	libberdip/src/memory.h	/^allocate_size(MemoryAllocator *alloc, umm size, u32 flags)$/;"	f
allocate_stringz	libberdip/src/memory.h	/^    AllocateMemoryStringZ *allocate_stringz;$/;"	m	struct:MemoryAllocator
allocate_stringz	libberdip/src/memory.h	/^allocate_stringz(MemoryAllocator *alloc, String source)$/;"	f
allocate_struct	libberdip/src/memory.h	155;"	d
allocator	libberdip/src/files.h	/^    MemoryAllocator *allocator;$/;"	m	struct:ApiFileGroup
allocator	libberdip/src/memory.h	/^    void *allocator;$/;"	m	struct:MemoryAllocator
alphaMask	libberdip/src/bitmap.cpp	/^    u32       alphaMask;$/;"	m	struct:BitmapHeader_v5	file:
alpha_blend_colours	libberdip/src/drawing.cpp	/^alpha_blend_colours(v4 src, v4 overlay)$/;"	f
alpha_blend_colours	libberdip/src/drawing2d.cpp	/^alpha_blend_colours(v4 src, v4 overlay)$/;"	f
alpha_blend_colours	libberdip/src/drawing_simd.cpp	/^alpha_blend_colours(v4_4x src, v4_4x overlay)$/;"	f
amdexerciser_exit	kernel/xbmd.c	/^EXPORT_SYMBOL_GPL(amdexerciser_exit);$/;"	v
amdexerciser_exit	kernel/xbmd.c	/^void amdexerciser_exit(void)$/;"	f
and_not	libberdip/src/multilane.h	/^and_not(f32_4x a, f32_4x b)$/;"	f
any	libberdip/src/multilane.h	/^any(f32_4x f4)$/;"	f
append_string	libberdip/src/strings.h	/^append_string(String base, String suffix, u32 maxCount)$/;"	f
append_string_fmt	libberdip/src/strings.h	/^append_string_fmt(String base, u32 maxCount, const char *fmt, ...)$/;"	f
arena	libberdip/src/json.h	/^    Arena arena;     \/\/ NOTE(michiel): Storage for the parsed data structure$/;"	m	struct:JsonParser
arena	libberdip/src/memory.h	/^    MemoryArena *arena;$/;"	m	struct:TempArenaMemory
arena	libberdip/src/memory.h	/^    MemoryArena arena;$/;"	m	struct:MemoryInterns
arena_allocate_array	libberdip/src/memory.h	219;"	d
arena_allocate_copy_array	libberdip/src/memory.h	221;"	d
arena_allocate_copy_struct	libberdip/src/memory.h	220;"	d
arena_allocate_struct	libberdip/src/memory.h	218;"	d
array	libberdip/src/json.h	/^        JsonArray     array;$/;"	m	union:JsonValue::__anon1
array_count	libberdip/src/common.h	195;"	d
array_of_unicode_codepoints	libberdip/src/stb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode codepoints$/;"	m	struct:__anon54
ascenderHeight	libberdip/src/fonts.h	/^    f32 ascenderHeight;$/;"	m	struct:FontInfo
asin_pi	libberdip/src/trigonometry_v1.h	/^asin_pi(f32 angle)$/;"	f
asin_pi	libberdip/src/trigonometry_v2.h	/^asin_pi(f32 angle)$/;"	f
asin_pi	libberdip/src/trigonometry_v2.h	/^asin_pi(f64 angle)$/;"	f
at	libberdip/src/bitstreamer.h	/^    u8 *at;$/;"	m	struct:BitStreamer
atan2_pi	libberdip/src/trigonometry_v1.h	/^atan2_pi(f32 y, f32 x)$/;"	f
atan2_pi	libberdip/src/trigonometry_v2.h	/^atan2_pi(f32 y, f32 x)$/;"	f
atan2_pi	libberdip/src/trigonometry_v2.h	/^atan2_pi(f64 y, f64 x)$/;"	f
atan2_pi_4x	libberdip/src/multilane.h	/^atan2_pi_4x(f32_4x y, f32_4x x)$/;"	f
atan_pi	libberdip/src/trigonometry_v1.h	/^atan_pi(f32 angle)$/;"	f
atan_pi	libberdip/src/trigonometry_v2.h	/^atan_pi(f32 x)$/;"	f
atan_pi_4x	libberdip/src/multilane.h	/^atan_pi_4x(f32_4x x)$/;"	f
atomic_add_u32	libberdip/src/intrinsics.h	/^internal inline u32 atomic_add_u32(u32 volatile *value, u32 addend)$/;"	f
atomic_add_u64	libberdip/src/intrinsics.h	/^internal inline u64 atomic_add_u64(u64 volatile *value, u64 addend)$/;"	f
atomic_compare_exchange_u32	libberdip/src/intrinsics.h	/^internal inline u32 atomic_compare_exchange_u32(u32 volatile *value, u32 new_value, u32 expected)$/;"	f
atomic_compare_exchange_u64	libberdip/src/intrinsics.h	/^internal inline u64 atomic_compare_exchange_u64(u64 volatile *value, u64 new_value, u64 expected)$/;"	f
atomic_exchange_u64	libberdip/src/intrinsics.h	/^internal inline u64 atomic_exchange_u64(u64 volatile *value, u64 new_value)$/;"	f
atomic_lock	libberdip/src/intrinsics.h	/^atomic_lock(u32 volatile *lock)$/;"	f
atomic_unlock	libberdip/src/intrinsics.h	/^atomic_unlock(u32 volatile *lock)$/;"	f
aut_change_enable	user/xbmd_descriptors.h	/^  bool              aut_change_enable;      \/\/ Autonomous Change enable $/;"	m	struct:xbmd_descriptors_t
b	libberdip/src/multilane.h	/^        f32_4x b;$/;"	m	struct:v3_4x::__anon4
b	libberdip/src/multilane.h	/^        f32_4x b;$/;"	m	struct:v4_4x::__anon7
b	libberdip/src/vector_types.h	/^                s32 b;$/;"	m	struct:v4s::__anon38::__anon39::__anon40
b	libberdip/src/vector_types.h	/^                u32 b;$/;"	m	struct:v4u::__anon46::__anon47::__anon48
b	libberdip/src/vector_types.h	/^        f32 b;$/;"	m	struct:v3::__anon21
b	libberdip/src/vector_types.h	/^        f32 b;$/;"	m	struct:v4::__anon31
b16	libberdip/src/types.h	/^typedef int16_t  b16;$/;"	t
b32	libberdip/src/types.h	/^typedef int32_t  b32;$/;"	t
b64	libberdip/src/types.h	/^typedef int64_t  b64;$/;"	t
b8	libberdip/src/types.h	/^typedef int8_t   b8;$/;"	t
background	libberdip/src/rendering2d.h	/^    v4 background;$/;"	m	struct:Renderer2D
barycentric_alpha	libberdip/src/drawing2d.cpp	/^barycentric_alpha(v2 p, v2 a, v2 b, v2 c,$/;"	f
base	libberdip/src/memory.h	/^    u8 *base;$/;"	m	struct:PlatformMemoryBlock
base	libberdip/src/suballoc.h	/^    u8 *base;          \/\/ NOTE(michiel): Base of used memory pool$/;"	m	struct:SubAllocator
base64_decode	libberdip/src/base64.cpp	/^base64_decode(umm sourceLength, void *source, umm destLength, void *destination)$/;"	f
base64_encode	libberdip/src/base64.cpp	/^base64_encode(umm sourceLength, void *source, umm destLength, void *destination)$/;"	f
baseAddr	kernel/xbmd.c	/^unsigned long baseAddr;$/;"	m	struct:xbmd_device	file:
baseAddr	kernel/xbmd_direct.c	/^    unsigned long baseAddr;$/;"	m	struct:xbmd_device	file:
baseLength	kernel/xbmd.c	/^    unsigned long baseLength;$/;"	m	struct:xbmd_device	file:
baseLength	kernel/xbmd_direct.c	/^    unsigned long baseLength;$/;"	m	struct:xbmd_device	file:
basePath	libberdip/src/files.h	/^    String basePath;$/;"	m	struct:ApiFileDirGroup
baseVirtual	kernel/xbmd.c	/^    void __iomem *baseVirtual;$/;"	m	struct:xbmd_device	file:
baseVirtual	kernel/xbmd_direct.c	/^    void __iomem *baseVirtual;$/;"	m	struct:xbmd_device	file:
begin_temporary_memory	libberdip/src/memory.cpp	/^begin_temporary_memory(MemoryArena *arena)$/;"	f
begin_ticket_mutex	libberdip/src/intrinsics.h	/^begin_ticket_mutex(TicketMutex *mutex)$/;"	f
bit_reverse16	libberdip/src/common.h	/^bit_reverse16(u16 b)$/;"	f
bit_reverse32	libberdip/src/common.h	/^bit_reverse32(u32 b)$/;"	f
bit_reverse64	libberdip/src/common.h	/^bit_reverse64(u64 b)$/;"	f
bit_reverse8	libberdip/src/common.h	/^bit_reverse8(u8 b)$/;"	f
bitmap	libberdip/src/fonts.h	/^    Image bitmap;$/;"	m	struct:FontGlyph
bitmap	libberdip/src/rendering2d.h	/^    Image bitmap;$/;"	m	struct:DrawImage
bitmapOffset	libberdip/src/bitmap.cpp	/^    u32 bitmapOffset;$/;"	m	struct:BitmapHeader	file:
bitmapOffset	libberdip/src/bitmap.cpp	/^    u32 bitmapOffset;$/;"	m	struct:BitmapHeader_v5	file:
bitsPerPixel	libberdip/src/bitmap.cpp	/^    u16       bitsPerPixel;$/;"	m	struct:BitmapHeader_v5	file:
bitsPerPixel	libberdip/src/bitmap.cpp	/^    u16 bitsPerPixel;$/;"	m	struct:BitmapHeader	file:
block	libberdip/src/linux_memory.h	/^    PlatformMemoryBlock block;$/;"	m	struct:LinuxMemoryBlock
block	libberdip/src/memory.h	/^    PlatformMemoryBlock *block;$/;"	m	struct:MemoryBuffer
block	libberdip/src/memory.h	/^    PlatformMemoryBlock *block;$/;"	m	struct:MemoryMap
block	libberdip/src/memory.h	/^    PlatformMemoryBlock *block;$/;"	m	struct:TempArenaMemory
block	libberdip/src/std_memory.h	/^    PlatformMemoryBlock block;$/;"	m	struct:StdMemoryBlock
blueMask	libberdip/src/bitmap.cpp	/^    u32       blueMask;$/;"	m	struct:BitmapHeader_v5	file:
blueMask	libberdip/src/bitmap.cpp	/^    u32 blueMask;$/;"	m	struct:BitmapHeader	file:
bmd	user/xbmd_ep.h	/^  bmd_t bmd;$/;"	m	struct:xbmd_ep_t
bmd_fatal_text	user/bmd.h	/^  const char* bmd_fatal_text;      \/\/ Contains text stating error condition if BMD fails during setup of transfer$/;"	m	class:bmd_t
bmd_space	user/xbmd_main.cpp	/^  GtkWidget  *bmd_space;                    \/\/ Displays EP BMD Descriptor Regs$/;"	m	struct:__anon68	file:
bmd_t	user/bmd.cpp	/^bmd_t::bmd_t(void){$/;"	f	class:bmd_t
bmd_t	user/bmd.h	/^class bmd_t {$/;"	c
bootstrap_alloc	libberdip/src/memory.h	/^    BootstrapAllocator    *bootstrap_alloc;$/;"	m	struct:MemoryAllocator
bottom_y	libberdip/src/stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon66
bounds	libberdip/src/stb_truetype.h	/^   int bounds;$/;"	m	struct:__anon64
bucketCount	libberdip/src/suballoc.h	/^    u32 bucketCount;   \/\/ NOTE(michiel): Buckets that are in use$/;"	m	struct:SubAllocator
bucket_from_request	libberdip/src/suballoc.cpp	/^bucket_from_request(SubAllocator *subAllocator, u32 request)$/;"	f
bucket_from_size	libberdip/src/suballoc.cpp	/^bucket_from_size(SubAllocator *subAllocator, u32 size)$/;"	f
buffer	libberdip/src/circularbuf.h	/^    u8  buffer[8]; \/\/ NOTE(michiel): At _least_ 8$/;"	m	struct:CircularBuffer
buffer	libberdip/src/types.h	/^    Buffer buffer;$/;"	m	struct:Stream
buttons	libberdip/src/platform.h	/^    Key buttons[MouseButtonCount];$/;"	m	struct:Mouse
byteSize	libberdip/src/rendering2d.h	/^    umm byteSize;$/;"	m	struct:DrawHeader
byte_shuffle	libberdip/src/multilane.h	/^byte_shuffle(f32_4x a, f32_4x shuffler)$/;"	f
bytes_to_hex	libberdip/src/strings.h	/^bytes_to_hex(Buffer bytes, umm destLength, u8 *dest)$/;"	f
bytes_to_trans	user/xbmd_descriptors.h	/^  int               bytes_to_trans;         \/\/ Temporary Bytes to Transfer (int)$/;"	m	struct:xbmd_descriptors_t
byteswap16	libberdip/src/common.h	/^byteswap16(u16 be)$/;"	f
byteswap32	libberdip/src/common.h	/^byteswap32(u32 be)$/;"	f
byteswap64	libberdip/src/common.h	/^byteswap64(u64 be)$/;"	f
c	libberdip/src/drawing2d.cpp	/^    v4 c;  \/\/ NOTE(michiel): Colour$/;"	m	struct:Vertex2D	file:
calculate_intersection	libberdip/src/drawing.cpp	/^calculate_intersection(v2 start, v2 end, v2 rectMin, v2 rectMax, u32 flags)$/;"	f
calculate_intersection	libberdip/src/drawing2d.cpp	/^calculate_intersection(v2 start, v2 end, v2 rectMin, v2 rectMax, u32 flags)$/;"	f
calculate_point_outside_rect	libberdip/src/drawing.cpp	/^calculate_point_outside_rect(v2 point, v2 rectMin, v2 rectMax)$/;"	f
calculate_point_outside_rect	libberdip/src/drawing2d.cpp	/^calculate_point_outside_rect(v2 point, v2 rectMin, v2 rectMax)$/;"	f
callback	libberdip/src/threading.h	/^    PlatformWorkQueueCallback *callback;$/;"	m	struct:PlatformWorkQueueEntry
capitalize	libberdip/src/strings.h	/^capitalize(String str, u32 maxDestSize, u8 *dest)$/;"	f
cdata	libberdip/src/stb_truetype.h	/^stbtt_bakedchar cdata[96]; \/\/ ASCII 32..126 is 95 glyphs$/;"	v
cdgh	libberdip/src/sha.h	/^    __m128i cdgh;$/;"	m	struct:Sha256Context
ceil	libberdip/src/multilane.h	/^ceil(f32_4x f4)$/;"	f
ceil	libberdip/src/vectors.h	/^ceil(v2 a)$/;"	f
ceil32	libberdip/src/maths.h	/^ceil32(f32 value)$/;"	f
ceil64	libberdip/src/maths.h	/^ceil64(f64 value)$/;"	f
cff	libberdip/src/stb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo
cfg	user/xbmd_ep.h	/^  cfg_t cfg;$/;"	m	struct:xbmd_ep_t
cfg_check_link_speed	user/cfg.cpp	/^int cfg_t::cfg_check_link_speed(int g_devFile){$/;"	f	class:cfg_t
cfg_check_link_width	user/cfg.cpp	/^int cfg_t::cfg_check_link_width(int g_devFile){$/;"	f	class:cfg_t
cfg_enable_functionality	user/cfg.cpp	/^int cfg_t::cfg_enable_functionality(int g_devFile, int dev_ctrl_phantom_func_en, int dev_ctrl_extended_tag_en,$/;"	f	class:cfg_t
cfg_fatal_text	user/cfg.h	/^  const char*    cfg_fatal_text;                 \/\/ Contains text stating error condition if BMD fails during setup $/;"	m	class:cfg_t
cfg_get_capabilities	user/cfg.cpp	/^int cfg_t::cfg_get_capabilities(int g_devFile)$/;"	f	class:cfg_t
cfg_rdwr_reg	user/cfg.cpp	/^int cfg_t::cfg_rdwr_reg(int g_devFile, int reg, int reg_value, int wr_en){$/;"	f	class:cfg_t
cfg_read_regs	user/cfg.cpp	/^int cfg_t::cfg_read_regs(int g_devFile){$/;"	f	class:cfg_t
cfg_space	user/xbmd_main.cpp	/^  GtkWidget  *cfg_space;                    \/\/ Displays EP CFG space$/;"	m	struct:__anon68	file:
cfg_t	user/cfg.cpp	/^  cfg_t::cfg_t(void){$/;"	f	class:cfg_t
cfg_t	user/cfg.h	/^class cfg_t {$/;"	c
cfg_update_regs	user/cfg.cpp	/^int cfg_t::cfg_update_regs(int g_devFile)$/;"	f	class:cfg_t
chardata_for_range	libberdip/src/stb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon54
charstrings	libberdip/src/stb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo
check_arena_integrity	libberdip/src/memory.cpp	/^check_arena_integrity(MemoryArena *arena)$/;"	f
chrDev	kernel/xbmd.c	/^    struct cdev   chrDev;$/;"	m	struct:xbmd_device	typeref:struct:xbmd_device::cdev	file:
chrDev	kernel/xbmd_direct.c	/^    struct cdev   chrDev;$/;"	m	struct:xbmd_device	typeref:struct:xbmd_device::cdev	file:
circular_add	libberdip/src/circularbuf.cpp	/^circular_add(CircularBuffer *buffer, u32 sourceCount, u8 *source)$/;"	f
circular_add_byte	libberdip/src/circularbuf.h	/^circular_add_byte(CircularBuffer *buffer, u8 byte)$/;"	f
circular_get	libberdip/src/circularbuf.cpp	/^circular_get(CircularBuffer *buffer, u32 maxDataCount, u8 *dest)$/;"	f
circular_get_byte	libberdip/src/circularbuf.h	/^circular_get_byte(CircularBuffer *buffer)$/;"	f
circular_unadd_byte	libberdip/src/circularbuf.h	/^circular_unadd_byte(CircularBuffer *buffer)$/;"	f
circular_unget_byte	libberdip/src/circularbuf.h	/^circular_unget_byte(CircularBuffer *buffer, u8 byte)$/;"	f
clamp	libberdip/src/common.h	216;"	d
clamp01	libberdip/src/common.h	/^clamp01(f32 value)$/;"	f
clamp01	libberdip/src/common.h	/^clamp01(f64 value)$/;"	f
clamp01	libberdip/src/vectors.h	/^clamp01(v2 a)$/;"	f
clamp01	libberdip/src/vectors.h	/^clamp01(v3 a)$/;"	f
clamp01	libberdip/src/vectors.h	/^clamp01(v4 a)$/;"	f
clamp01_4x	libberdip/src/multilane.h	/^clamp01_4x(f32_4x f)$/;"	f
clamp01_4x	libberdip/src/multilane.h	/^clamp01_4x(v2_4x f)$/;"	f
clamp01_4x	libberdip/src/multilane.h	/^clamp01_4x(v3_4x f)$/;"	f
clamp01_4x	libberdip/src/multilane.h	/^clamp01_4x(v4_4x f)$/;"	f
clamp_4x	libberdip/src/multilane.h	/^clamp_4x(f32_4x min, f32_4x f, f32_4x max)$/;"	f
clamp_4x	libberdip/src/multilane.h	/^clamp_4x(f32_4x min, v2_4x f, f32_4x max)$/;"	f
clamp_4x	libberdip/src/multilane.h	/^clamp_4x(f32_4x min, v3_4x f, f32_4x max)$/;"	f
clamp_4x	libberdip/src/multilane.h	/^clamp_4x(f32_4x min, v4_4x f, f32_4x max)$/;"	f
clamp_4x	libberdip/src/multilane.h	/^clamp_4x(v2_4x min, v2_4x f, v2_4x max)$/;"	f
clamp_4x	libberdip/src/multilane.h	/^clamp_4x(v3_4x min, v3_4x f, v3_4x max)$/;"	f
clamp_4x	libberdip/src/multilane.h	/^clamp_4x(v4_4x min, v4_4x f, v4_4x max)$/;"	f
class	kernel/xbmd.c	/^static struct class* class;$/;"	v	typeref:struct:class	file:
clear	libberdip/src/drawing.cpp	/^clear(Image *image)$/;"	f
clear	libberdip/src/drawing2d.cpp	/^clear(Image *image)$/;"	f
clear_arena	libberdip/src/memory.cpp	/^clear_arena(MemoryArena *arena)$/;"	f
clear_region	libberdip/src/drawing.cpp	/^clear_region(Image *image, s32 startX, s32 startY, s32 width, s32 height)$/;"	f
clear_region	libberdip/src/drawing2d.cpp	/^clear_region(Image *image, s32 startX, s32 startY, s32 width, s32 height)$/;"	f
clear_region_simd	libberdip/src/drawing_simd.cpp	/^clear_region_simd(Image *image, s32 startX, s32 startY, s32 width, s32 height)$/;"	f
closeProgram	libberdip/src/platform.h	/^    b32 closeProgram;$/;"	m	struct:API
close_file	libberdip/src/files.h	/^    CloseFile *close_file;$/;"	m	struct:FileAPI
coalesceCount	libberdip/src/suballoc.h	/^    u32 coalesceCount; \/\/ NOTE(michiel): Count of blocks that got coalesced (should be times 2, 2 blocks go to 1)$/;"	m	struct:SubAllocator
codepoint_from_utf8	libberdip/src/strings.h	/^codepoint_from_utf8(String str)$/;"	f
codepoint_from_utf8_advance	libberdip/src/strings.h	/^codepoint_from_utf8_advance(String *str)$/;"	f
codepoint_to_utf8	libberdip/src/json.cpp	/^codepoint_to_utf8(u32 codepoint, u8 *buffer)$/;"	f
color	user/xbmd_main.cpp	/^GdkColor color;$/;"	v
colour	libberdip/src/drawing.cpp	/^    v4 colour;$/;"	m	struct:ColouredPoint	file:
colour	libberdip/src/rendering2d.h	/^    v4 colour;$/;"	m	struct:DrawClear
coloursImportant	libberdip/src/bitmap.cpp	/^    u32       coloursImportant;$/;"	m	struct:BitmapHeader_v5	file:
coloursImportant	libberdip/src/bitmap.cpp	/^    u32 coloursImportant;$/;"	m	struct:BitmapHeader	file:
coloursUsed	libberdip/src/bitmap.cpp	/^    u32       coloursUsed;$/;"	m	struct:BitmapHeader_v5	file:
coloursUsed	libberdip/src/bitmap.cpp	/^    u32 coloursUsed;$/;"	m	struct:BitmapHeader	file:
column	libberdip/src/tokenizer.h	/^    u32 column;$/;"	m	struct:SourcePos
compile_expect	libberdip/src/common.h	115;"	d
compile_expect	libberdip/src/common.h	117;"	d
complete_all_work	libberdip/src/threading.h	/^    PlatformCompleteAllWork *complete_all_work;$/;"	m	struct:ThreadingAPI
completionCount	libberdip/src/linux_threading.cpp	/^    u32 volatile completionCount;$/;"	m	struct:PlatformWorkQueue	file:
completionGoal	libberdip/src/linux_threading.cpp	/^    u32 volatile completionGoal;$/;"	m	struct:PlatformWorkQueue	file:
complex	libberdip/src/complex.h	/^complex(f32 real, f32 imag)$/;"	f
complex	libberdip/src/complex.h	/^complex(f64 real, f64 imag)$/;"	f
complex_square_root	libberdip/src/complex.h	/^complex_square_root(f64 value)$/;"	f
compression	libberdip/src/bitmap.cpp	/^    u32       compression;$/;"	m	struct:BitmapHeader_v5	file:
compression	libberdip/src/bitmap.cpp	/^    u32 compression;$/;"	m	struct:BitmapHeader	file:
conjugate	libberdip/src/complex.h	/^conjugate(Complex32 a)$/;"	f
conjugate	libberdip/src/complex.h	/^conjugate(Complex64 a)$/;"	f
constant	libberdip/src/json.h	/^        JsonConstants constant;$/;"	m	union:JsonValue::__anon1
convert	libberdip/src/maths.h	588;"	d
convert	libberdip/src/maths.h	641;"	d
convert_to_utf	libberdip/src/utf8conv.py	/^def convert_to_utf(value):$/;"	f
copy	libberdip/src/common.h	/^copy(umm size, const void *src, void *dst)$/;"	f
copy	libberdip/src/strings.h	/^copy(String source, String *dest)$/;"	f
copy_array	libberdip/src/common.h	437;"	d
copy_single	libberdip/src/common.h	/^copy_single(umm size, u32 value, void *dst)$/;"	f
copy_struct	libberdip/src/common.h	436;"	d
copy_to_bytes	libberdip/src/bitstreamer.cpp	/^copy_to_bytes(BitStreamer *bitStream, u32 nrBytes, u8 *dest)$/;"	f
copy_to_string	libberdip/src/bitstreamer.cpp	/^copy_to_string(BitStreamer *bitStream, u32 nrBytes, u8 *dest)$/;"	f
cos	libberdip/src/multilane.h	/^    f32_4x cos;$/;"	m	struct:SinCos32_4x
cos	libberdip/src/multilane.h	/^    f64_2x cos;$/;"	m	struct:SinCos64_2x
cos_f32	libberdip/src/trigonometry_v1.h	/^cos_f32(f32 angle)$/;"	f
cos_f32	libberdip/src/trigonometry_v2.h	/^cos_f32(f32 angle)$/;"	f
cos_f32_4x	libberdip/src/multilane.h	/^cos_f32_4x(f32_4x angles)$/;"	f
cos_f32_approx8_small	libberdip/src/trigonometry_v1.h	/^cos_f32_approx8_small(f32 angle)$/;"	f
cos_f64	libberdip/src/trigonometry_v1.h	/^cos_f64(f64 angle)$/;"	f
cos_f64_approx8_small	libberdip/src/trigonometry_v1.h	/^cos_f64_approx8_small(f64 angle)$/;"	f
cos_pi	libberdip/src/trigonometry_v1.h	/^cos_pi(f32 radians)$/;"	f
cos_pi	libberdip/src/trigonometry_v1.h	/^cos_pi(f64 radians)$/;"	f
cos_pi	libberdip/src/trigonometry_v2.h	/^cos_pi(f32 angle)$/;"	f
cos_pi	libberdip/src/trigonometry_v2.h	/^cos_pi(f64 angle)$/;"	f
cosh	libberdip/src/trigonometry_v1.h	/^cosh(f32 x)$/;"	f
cosh	libberdip/src/trigonometry_v1.h	/^cosh(f64 x)$/;"	f
count	libberdip/src/memory.h	/^    umm count;$/;"	m	struct:MemoryBuffer
count	libberdip/src/memory.h	/^    umm count;$/;"	m	struct:MemoryMap
crc16_calc_crc	libberdip/src/crc.cpp	/^crc16_calc_crc(u16 *lut, u32 byteCount, void *data)$/;"	f	file:
crc16_init_table	libberdip/src/crc.cpp	/^crc16_init_table(u16 poly, u16 *lut)$/;"	f	file:
crc8_calc_crc	libberdip/src/crc.cpp	/^crc8_calc_crc(u8 *lut, u32 byteCount, void *data)$/;"	f	file:
crc8_init_table	libberdip/src/crc.cpp	/^crc8_init_table(u8 poly, u8 *lut)$/;"	f	file:
create_bitstreamer	libberdip/src/bitstreamer.cpp	/^create_bitstreamer(Buffer memory, BitStreamKind kind \/* = BitStream_LittleEndian *\/)$/;"	f
create_work_queue	libberdip/src/threading.h	/^    PlatformCreateWorkQueue *create_work_queue;$/;"	m	struct:ThreadingAPI
cross	libberdip/src/vectors.h	/^cross(v3 a, v3 b)$/;"	f
csType	libberdip/src/bitmap.cpp	/^    u32       csType;$/;"	m	struct:BitmapHeader_v5	file:
currentBlock	libberdip/src/memory.h	/^    PlatformMemoryBlock *currentBlock;$/;"	m	struct:MemoryArena
cursor	libberdip/src/stb_truetype.h	/^   int cursor;$/;"	m	struct:__anon50
cx	libberdip/src/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon56
cx1	libberdip/src/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon56
cy	libberdip/src/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon56
cy1	libberdip/src/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon56
d2hAddr	kernel/xbmd_direct.c	/^    dma_addr_t    d2hAddr;$/;"	m	struct:xbmd_device	file:
d2hBuffer	kernel/xbmd_direct.c	/^    u8           *d2hBuffer;$/;"	m	struct:xbmd_device	file:
data	libberdip/src/memory.h	/^    char data[1];$/;"	m	struct:InternedString
data	libberdip/src/memory.h	/^    u8 data[1];$/;"	m	struct:MemoryBuffer
data	libberdip/src/random.h	/^    u8 *data;$/;"	m	struct:RandomListEntry
data	libberdip/src/stb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo
data	libberdip/src/stb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anon50
data	libberdip/src/threading.h	/^    void *data;$/;"	m	struct:PlatformWorkQueueEntry
data	libberdip/src/types.h	/^    u8 *data;$/;"	m	struct:Buffer
data	user/bmd.cpp	/^  unsigned int data[DMA_BUF_SIZE\/4];$/;"	m	struct:TransferData	file:
deallocate	libberdip/src/memory.h	/^    DeallocateMemory      *deallocate;$/;"	m	struct:MemoryAllocator
deallocate	libberdip/src/memory.h	/^deallocate(MemoryAllocator *alloc, void *memory)$/;"	f
deallocate_all	libberdip/src/memory.h	/^    DeallocateAll         *deallocate_all;$/;"	m	struct:MemoryAllocator
deallocate_all	libberdip/src/memory.h	/^    PlatformDeallocateAllMemory *deallocate_all;$/;"	m	struct:MemoryAPI
deallocate_all	libberdip/src/memory.h	/^deallocate_all(MemoryAllocator *alloc)$/;"	f
deallocate_memory	libberdip/src/memory.h	/^    PlatformDeallocateMemory *deallocate_memory;$/;"	m	struct:MemoryAPI
debug_memory_alloc	libberdip/src/memory.h	/^debug_memory_alloc(void)$/;"	f
default_memory_alloc	libberdip/src/memory.h	/^default_memory_alloc(void)$/;"	f
deg2rad	libberdip/src/common.h	212;"	d
descenderHeight	libberdip/src/fonts.h	/^    f32 descenderHeight;$/;"	m	struct:FontInfo
deviceCapOffset	user/cli.cpp	/^    u32 deviceCapOffset;$/;"	m	struct:Config	file:
deviceStatContOffset	user/cli.cpp	/^    u32 deviceStatContOffset;$/;"	m	struct:Config	file:
device_cap_offset	user/cfg.h	/^  unsigned int   device_cap_offset;              \/\/ Device CAP offset$/;"	m	class:cfg_t
device_cap_offset	user/xbmd_descriptors.h	/^  unsigned int      device_cap_offset;      \/\/ Device CAP offset$/;"	m	struct:xbmd_descriptors_t
device_stat_cont_offset	user/cfg.h	/^  unsigned int   device_stat_cont_offset;        \/\/ Device Stat\/Control Offset$/;"	m	class:cfg_t
device_stat_cont_offset	user/xbmd_descriptors.h	/^  unsigned int      device_stat_cont_offset;\/\/ Device Status\/Control offset$/;"	m	struct:xbmd_descriptors_t
dir	libberdip/src/linux_file.c	/^    DIR *dir;$/;"	m	struct:LinuxFileDirGroup	file:
dir	libberdip/src/linux_file.c	/^    DIR *dir;$/;"	m	struct:LinuxFindFile	file:
dirData	libberdip/src/linux_file.c	/^    struct dirent *dirData;$/;"	m	struct:LinuxFileDirGroup	typeref:struct:LinuxFileDirGroup::dirent	file:
direction	libberdip/src/stb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge
direction	libberdip/src/stb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge
direction	libberdip/src/vectors.h	/^direction(v2 from, v2 to)$/;"	f
direction_unit	libberdip/src/vectors.h	/^direction_unit(v2 from, v2 to)$/;"	f
display_bmd_log	user/xbmd_main.cpp	/^void display_bmd_log(xbmd_app *app) {$/;"	f
div	libberdip/src/types.h	/^    s32 div;$/;"	m	struct:DivModS32
div	libberdip/src/types.h	/^    s64 div;$/;"	m	struct:DivModS64
div	libberdip/src/types.h	/^    u32 div;$/;"	m	struct:DivModU32
div	libberdip/src/types.h	/^    u64 div;$/;"	m	struct:DivModU64
divmod	libberdip/src/maths.h	/^divmod(s32 a, s32 b)$/;"	f
divmod	libberdip/src/maths.h	/^divmod(s64 a, s64 b)$/;"	f
divmod	libberdip/src/maths.h	/^divmod(u32 a, u32 b)$/;"	f
divmod	libberdip/src/maths.h	/^divmod(u64 a, u64 b)$/;"	f
dmaD2HDone	kernel/xbmd_direct.c	/^    u32           dmaD2HDone;$/;"	m	struct:xbmd_device	file:
dmaD2HQueue	kernel/xbmd_direct.c	/^    wait_queue_head_t dmaD2HQueue;$/;"	m	struct:xbmd_device	file:
dmaD2HStart	kernel/xbmd_direct.c	/^    u32           dmaD2HStart;$/;"	m	struct:xbmd_device	file:
dmaH2DDone	kernel/xbmd_direct.c	/^    u32           dmaH2DDone;$/;"	m	struct:xbmd_device	file:
dmaH2DQueue	kernel/xbmd_direct.c	/^    wait_queue_head_t dmaH2DQueue;$/;"	m	struct:xbmd_device	file:
dmaH2DStart	kernel/xbmd_direct.c	/^    u32           dmaH2DStart;$/;"	m	struct:xbmd_device	file:
dmaSem	kernel/xbmd_direct.c	/^    struct semaphore  dmaSem;$/;"	m	struct:xbmd_device	typeref:struct:xbmd_device::semaphore	file:
dot	libberdip/src/vectors.h	/^dot(v2 a, v2 b)$/;"	f
dot	libberdip/src/vectors.h	/^dot(v3 a, v3 b)$/;"	f
dot	libberdip/src/vectors.h	/^dot(v4 a, v4 b)$/;"	f
drawBuffer	libberdip/src/rendering2d.h	/^    u8 *drawBuffer;$/;"	m	struct:Renderer2D
drawBufferAt	libberdip/src/rendering2d.h	/^    u8 *drawBufferAt;$/;"	m	struct:Renderer2D
drawCount	libberdip/src/rendering2d.h	/^    u32 drawCount; \/\/ NOTE(michiel): Amount of expected headers in the buffer$/;"	m	struct:Renderer2D
draw_circle	libberdip/src/drawing2d.cpp	/^draw_circle(Image *image, Vertex2D center, Vertex2D edge)$/;"	f
draw_clipped_faded_image	libberdip/src/drawing.cpp	/^draw_clipped_faded_image(Image *screen, u32 xStart, u32 yStart, Image *image, Rectangle2u clipRect, u32 fadePixels,$/;"	f
draw_clipped_image	libberdip/src/drawing.cpp	/^draw_clipped_image(Image *screen, u32 xStart, u32 yStart, Image *image, Rectangle2u clipRect,$/;"	f
draw_greyscale_image	libberdip/src/drawing.cpp	/^draw_greyscale_image(Image *screen, u32 xStart, u32 yStart, Image *image, f32 modIntensity = 1.0f)$/;"	f
draw_image	libberdip/src/drawing.cpp	/^draw_image(Image *screen, u32 xStart, u32 yStart, Image *image, v4 modColour = V4(1, 1, 1, 1))$/;"	f
draw_image	libberdip/src/drawing.cpp	/^draw_image(Image *screen, u32 xStart, u32 yStart, Image8 *image, v4 modColour = V4(1, 1, 1, 1))$/;"	f
draw_image	libberdip/src/drawing2d.cpp	/^draw_image(Image *screen, Vertex2D offset, Image *image)$/;"	f
draw_line	libberdip/src/drawing.cpp	/^draw_line(Image *image, f32 startX, f32 startY, f32 endX, f32 endY, v4 colour = V4(1, 1, 1, 1))$/;"	f
draw_line	libberdip/src/drawing.cpp	/^draw_line(Image *image, s32 startX, s32 startY, s32 endX, s32 endY, u32 colour)$/;"	f
draw_line	libberdip/src/drawing.cpp	/^draw_line(Image *image, s32 startX, s32 startY, s32 endX, s32 endY, v4 colour)$/;"	f
draw_line	libberdip/src/drawing.cpp	/^draw_line(Image *image, v2 start, v2 end, v4 colour = V4(1, 1, 1, 1))$/;"	f
draw_line	libberdip/src/drawing.cpp	/^draw_line(Image *image, v2 start, v2 end, v4 colourStart, v4 colourEnd)$/;"	f
draw_line	libberdip/src/drawing2d.cpp	/^draw_line(Image *image, Vertex2D start, Vertex2D end)$/;"	f
draw_line_simd	libberdip/src/drawing_simd.cpp	/^draw_line_simd(Image *image, v2 start, v2 end, v4 colourStart = V4(1, 1, 1, 1), v4 colourEnd = V4(1, 1, 1, 1))$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, ColouredPoint *points, v2 offset, v2 scale = V2(1, 1))$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, f32 *xValues, f32 *yValues, v2 offset, v2 scale = V2(1, 1),$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, v2 *points, v2 offset, v2 scale = V2(1, 1),$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, v2 *points, v2 offset, v4 colour = V4(1, 1, 1, 1))$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, v2 *points, v4 *colours, v2 offset, v2 scale = V2(1, 1))$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, v2 *points, v4 colour)$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, v3 *points, v3 offset, v3 scale = V3(1, 1, 1),$/;"	f
draw_lines	libberdip/src/drawing.cpp	/^draw_lines(Image *image, u32 pointCount, v3 *points, v3 offset,$/;"	f
draw_lines	libberdip/src/drawing2d.cpp	/^draw_lines(Image *image, u32 pointCount, Vertex2D *points, v2 offset = V2(0, 0), v2 scale = V2(1, 1))$/;"	f
draw_lines_simd	libberdip/src/drawing_simd.cpp	/^draw_lines_simd(Image *image, u32 pointCount, ColouredPoint *points, v2 offset, v2 scale = V2(1, 1))$/;"	f
draw_lines_simd	libberdip/src/drawing_simd.cpp	/^draw_lines_simd(Image *image, u32 pointCount, v2 *points, v4 *colours, v2 offset, v2 scale = V2(1, 1))$/;"	f
draw_pixel	libberdip/src/drawing.cpp	/^draw_pixel(Image *image, u32 x, u32 y, u32 colour)$/;"	f
draw_pixel	libberdip/src/drawing.cpp	/^draw_pixel(Image *image, u32 x, u32 y, v4 colour)$/;"	f
draw_pixel	libberdip/src/drawing.cpp	/^draw_pixel(u32 *pixelAt, v4 colour)$/;"	f
draw_pixel	libberdip/src/drawing2d.cpp	/^draw_pixel(Image *image, u32 x, u32 y, v4 colour)$/;"	f
draw_pixel	libberdip/src/drawing2d.cpp	/^draw_pixel(u32 *pixelAt, v4 colour)$/;"	f
draw_pixels	libberdip/src/drawing_simd.cpp	/^draw_pixels(f32_4x *pixelAt, v4_4x colour)$/;"	f
draw_stems	libberdip/src/drawing.cpp	/^draw_stems(Image *image, v2 pointSize, u32 pointCount, f32 *xValues, f32 *yValues, v2 offset, v2 scale = V2(1, 1),$/;"	f
draw_stems	libberdip/src/drawing.cpp	/^draw_stems(Image *image, v2 pointSize, u32 pointCount, v2 *points, v2 offset, v2 scale = V2(1, 1),$/;"	f
draw_text	libberdip/src/drawing.cpp	/^draw_text(BitmapFont *font, Image *image, u32 xStart, u32 yStart, String text,$/;"	f
draw_text	libberdip/src/drawing.cpp	/^draw_text(BitmapFont *font, Image *image, u32 xStart, u32 yStart, char *text,$/;"	f
draw_triangle	libberdip/src/drawing2d.cpp	/^draw_triangle(Image *image, Vertex2D a, Vertex2D b, Vertex2D c)$/;"	f
dx	libberdip/src/stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
e	libberdip/src/multilane.h	/^    f32     e[4];$/;"	m	union:f32_4x
e	libberdip/src/multilane.h	/^    f32_4x e[2];$/;"	m	union:v2_4x
e	libberdip/src/multilane.h	/^    f32_4x e[3];$/;"	m	union:v3_4x
e	libberdip/src/multilane.h	/^    f32_4x e[4];$/;"	m	union:v4_4x
e	libberdip/src/multilane.h	/^    f64     e[2];$/;"	m	union:f64_2x
e	libberdip/src/vector_types.h	/^    f32 e[2];$/;"	m	union:v2
e	libberdip/src/vector_types.h	/^    f32 e[3];$/;"	m	union:v3
e	libberdip/src/vector_types.h	/^    f32 e[4];$/;"	m	union:v4
e	libberdip/src/vector_types.h	/^    f64 e[2];$/;"	m	union:v2d
e	libberdip/src/vector_types.h	/^    s32 e[2];$/;"	m	union:v2s
e	libberdip/src/vector_types.h	/^    s32 e[3];$/;"	m	union:v3s
e	libberdip/src/vector_types.h	/^    s32 e[4];$/;"	m	union:v4s
e	libberdip/src/vector_types.h	/^    u32 e[2];$/;"	m	union:v2u
e	libberdip/src/vector_types.h	/^    u32 e[3];$/;"	m	union:v3u
e	libberdip/src/vector_types.h	/^    u32 e[4];$/;"	m	union:v4u
e0	libberdip/src/sha.h	/^    __m128i e0;$/;"	m	struct:Sha1Context
edgeCount	libberdip/src/platform.h	/^    u8 edgeCount;$/;"	m	struct:Key
edge_function	libberdip/src/drawing.cpp	/^edge_function(v2 p, v2 lineStart, v2 lineEnd)$/;"	f
edge_offsets	libberdip/src/drawing.cpp	/^edge_offsets(v2 p, v2 a, v2 b, v2 c)$/;"	f
ef32	libberdip/src/maths.h	/^    f32 ef32[4];$/;"	m	union:FloatMathVec
ef64	libberdip/src/maths.h	/^    f64 ef64[2];$/;"	m	union:FloatMathVec
ei32	libberdip/src/maths.h	/^    s32 ei32[4];$/;"	m	union:FloatMathVec
end	libberdip/src/bitstreamer.h	/^    u8 *end;$/;"	m	struct:BitStreamer
end	libberdip/src/suballoc.h	/^    u8 *end;           \/\/ NOTE(michiel): One byte past the last accessible memory position$/;"	m	struct:SubAllocator
end_temporary_memory	libberdip/src/memory.cpp	/^end_temporary_memory(TempArenaMemory tempMem)$/;"	f
end_ticket_mutex	libberdip/src/intrinsics.h	/^end_ticket_mutex(TicketMutex *mutex)$/;"	f
endpoints	libberdip/src/bitmap.cpp	/^    u32       endpoints[9];$/;"	m	struct:BitmapHeader_v5	file:
ends_with	libberdip/src/strings.h	/^ends_with(String baseString, String expectedSuffix)$/;"	f
entries	libberdip/src/linux_threading.cpp	/^    PlatformWorkQueueEntry entries[MAX_WORK_QUEUE_ENTRIES];$/;"	m	struct:PlatformWorkQueue	file:
entries	libberdip/src/random.h	/^    RandomListEntry *entries;$/;"	m	struct:RandomList
entryCount	libberdip/src/random.h	/^    u32 entryCount;$/;"	m	struct:RandomList
enum16	libberdip/src/types.h	34;"	d
enum32	libberdip/src/types.h	35;"	d
enum64	libberdip/src/types.h	36;"	d
enum8	libberdip/src/types.h	33;"	d
equal	libberdip/src/stb_truetype.h	/^static int equal(float *a, float *b)$/;"	f
erase_old_results	user/xbmd_main.cpp	/^void erase_old_results(xbmd_app *app){$/;"	f
error	libberdip/src/tokenizer.h	/^    b32 error;$/;"	m	struct:Tokenizer
eu32	libberdip/src/maths.h	/^    u32 eu32[4];$/;"	m	union:FloatMathVec
euler_power	libberdip/src/complex.h	/^euler_power(f32 imagPower)$/;"	f
euler_power	libberdip/src/complex.h	/^euler_power(f64 imagPower)$/;"	f
executable_memory	libberdip/src/memory.h	/^    PlatformExecutableMemory *executable_memory;$/;"	m	struct:MemoryAPI
exp	libberdip/src/complex.h	/^exp(Complex64 c)$/;"	f
exp32	libberdip/src/maths.h	/^exp32(f32 f)$/;"	f
exp64	libberdip/src/maths.h	/^exp64(f64 f)$/;"	f
exp_f32_4x	libberdip/src/multilane.h	/^exp_f32_4x(f32_4x f4)$/;"	f
expect_integer_range	libberdip/src/tokenizer.cpp	/^expect_integer_range(Tokenizer *tokenizer, s32 minValue, s32 maxValue)$/;"	f
expect_name	libberdip/src/tokenizer.cpp	/^expect_name(Tokenizer *tokenizer, String name)$/;"	f
expect_token	libberdip/src/tokenizer.cpp	/^expect_token(Tokenizer *tokenizer, TokenKind tokenKind)$/;"	f
ey	libberdip/src/stb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge
f	libberdip/src/common.h	/^typedef union u32f32 { u32 u; f32 f; } U32F32;$/;"	m	union:u32f32
f	libberdip/src/common.h	/^typedef union u64f64 { u64 u; f64 f; } U64F64;$/;"	m	union:u64f64
f32	libberdip/src/tokenizer.h	/^        f32 f32;$/;"	m	union:Token::__anon49
f32	libberdip/src/types.h	/^typedef float    f32;$/;"	t
f32_4x	libberdip/src/multilane.h	/^union f32_4x$/;"	u
f32_4x_from_s32	libberdip/src/multilane.h	/^f32_4x_from_s32(f32_4x a)$/;"	f
f64	libberdip/src/types.h	/^typedef double   f64;$/;"	t
f64_2x	libberdip/src/multilane.h	/^union f64_2x$/;"	u
f80	libberdip/src/types.h	/^typedef long double f80;$/;"	t
false	libberdip/src/common.h	84;"	d
fast_exp	libberdip/src/maths.h	/^fast_exp(f32 x)$/;"	f
fast_exp_	libberdip/src/maths.h	/^fast_exp_(f32 x, u32 approx)$/;"	f
fatal_error	user/cli.cpp	/^fatal_error(char *message, ...)$/;"	f
fatal_error	user/direct.cpp	/^fatal_error(char *message, ...)$/;"	f
fdselect	libberdip/src/stb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo
fdx	libberdip/src/stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fdy	libberdip/src/stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fft	libberdip/src/fft.cpp	/^fft(u32 dftCount, Complex32 *signal)$/;"	f
fft_cos	libberdip/src/fft.cpp	9;"	d	file:
fft_exact	libberdip/src/fft.cpp	/^fft_exact(u32 dftCount, Complex32 *signal)$/;"	f
fft_sin	libberdip/src/fft.cpp	10;"	d	file:
file	libberdip/src/files.h	/^    ApiFile file;$/;"	m	struct:FileStream
file	libberdip/src/platform.h	/^    FileAPI      file;$/;"	m	struct:API
fileAvailable	libberdip/src/linux_file.c	/^    b32 fileAvailable;$/;"	m	struct:LinuxFileGroup	file:
fileCount	libberdip/src/files.h	/^    u32 fileCount;$/;"	m	struct:ApiFileGroup
fileData	libberdip/src/linux_file.c	/^    struct dirent *fileData;$/;"	m	struct:LinuxFindFile	typeref:struct:LinuxFindFile::dirent	file:
fileDirCount	libberdip/src/files.h	/^    u32 fileDirCount;$/;"	m	struct:ApiFileDirGroup
fileDirs	libberdip/src/files.h	/^    ApiFileDir *fileDirs;$/;"	m	struct:ApiFileDirGroup
fileSize	libberdip/src/bitmap.cpp	/^    u32 fileSize;$/;"	m	struct:BitmapHeader	file:
fileSize	libberdip/src/bitmap.cpp	/^    u32 fileSize;$/;"	m	struct:BitmapHeader_v5	file:
fileSize	libberdip/src/files.h	/^    u64 fileSize;$/;"	m	struct:ApiFile
fileType	libberdip/src/bitmap.cpp	/^    u16 fileType;$/;"	m	struct:BitmapHeader	file:
fileType	libberdip/src/bitmap.cpp	/^    u16 fileType;$/;"	m	struct:BitmapHeader_v5	file:
file_error	libberdip/src/files.h	/^    FileError *file_error;$/;"	m	struct:FileAPI
filename	libberdip/src/files.h	/^    String filename;$/;"	m	struct:ApiFile
filename	libberdip/src/tokenizer.h	/^    String filename;$/;"	m	struct:SourcePos
fill_circle	libberdip/src/drawing.cpp	/^fill_circle(Image *image, f32 x0, f32 y0, f32 radius, v4 colour = V4(1, 1, 1, 1))$/;"	f
fill_circle	libberdip/src/drawing.cpp	/^fill_circle(Image *image, s32 xStart, s32 yStart, u32 radius, u32 colour)$/;"	f
fill_circle	libberdip/src/drawing.cpp	/^fill_circle(Image *image, s32 xStart, s32 yStart, u32 radius, v4 colour)$/;"	f
fill_circle	libberdip/src/drawing.cpp	/^fill_circle(Image *image, v2 pos, f32 radius, v4 colour = V4(1, 1, 1, 1))$/;"	f
fill_circle_gradient	libberdip/src/drawing.cpp	/^fill_circle_gradient(Image *image, f32 x0, f32 y0, f32 radius, v4 colour = V4(1, 1, 1, 1), v4 edgeColour = V4(0, 0, 0, 1), f32 innerRadius = 0.0f)$/;"	f
fill_circle_gradient_left	libberdip/src/drawing.cpp	/^fill_circle_gradient_left(Image *image, f32 x0, f32 y0, f32 radius, v4 colour = V4(1, 1, 1, 1), v4 edgeColour = V4(0, 0, 0, 1), f32 innerRadius = 0.0f)$/;"	f
fill_circle_gradient_right	libberdip/src/drawing.cpp	/^fill_circle_gradient_right(Image *image, f32 x0, f32 y0, f32 radius, v4 colour = V4(1, 1, 1, 1), v4 edgeColour = V4(0, 0, 0, 1), f32 innerRadius = 0.0f)$/;"	f
fill_rect_simd	libberdip/src/drawing_simd.cpp	/^fill_rect_simd(Image *image, f32 xStart, f32 yStart, f32 width, f32 height, v4 colour)$/;"	f
fill_rect_simd	libberdip/src/drawing_simd.cpp	/^fill_rect_simd(Image *image, v2 topLeft, v2 dim, v4 colour)$/;"	f
fill_rectangle	libberdip/src/drawing.cpp	/^fill_rectangle(Image *image, Rectangle2 rect, u32 colour)$/;"	f
fill_rectangle	libberdip/src/drawing.cpp	/^fill_rectangle(Image *image, Rectangle2 rect, v4 colour)$/;"	f
fill_rectangle	libberdip/src/drawing.cpp	/^fill_rectangle(Image *image, s32 xStart, s32 yStart, u32 width, u32 height, v4 colour)$/;"	f
fill_rectangle	libberdip/src/drawing.cpp	/^fill_rectangle(Image *image, u32 xStart, u32 yStart, u32 width, u32 height, u32 colour)$/;"	f
fill_rectangle	libberdip/src/drawing.cpp	/^fill_rectangle(Image *image, v2 pos, v2 dim, u32 colour)$/;"	f
fill_rectangle	libberdip/src/drawing.cpp	/^fill_rectangle(Image *image, v2 pos, v2 dim, v4 colour)$/;"	f
fill_triangle	libberdip/src/drawing.cpp	/^fill_triangle(Image *image, v2 a, v2 b, v2 c, v4 colour)$/;"	f
fill_triangle	libberdip/src/drawing.cpp	/^fill_triangle(Image *image, v2s a, v2s b, v2s c, v4 colour)$/;"	f
fill_triangle	libberdip/src/drawing.cpp	/^fill_triangle(Image *image, v2u a, v2u b, v2u c, v4 colour)$/;"	f
fill_tube	libberdip/src/drawing.cpp	/^fill_tube(Image *image, u32 xStart, u32 yStart, u32 w, u32 h,$/;"	f
findData	libberdip/src/linux_file.c	/^    LinuxFindFile findData;$/;"	m	struct:LinuxFileGroup	file:
find_least_significant_set_bit	libberdip/src/common.h	/^find_least_significant_set_bit(u32 value)$/;"	f
find_least_significant_set_bit	libberdip/src/common.h	/^find_least_significant_set_bit(u64 value)$/;"	f
find_most_significant_set_bit	libberdip/src/common.h	/^find_most_significant_set_bit(u32 value)$/;"	f
find_most_significant_set_bit	libberdip/src/common.h	/^find_most_significant_set_bit(u64 value)$/;"	f
first_free	libberdip/src/stb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap
first_unicode_codepoint_in_range	libberdip/src/stb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and this is the first codepoint$/;"	m	struct:__anon54
first_x	libberdip/src/stb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon64
first_y	libberdip/src/stb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anon64
float_from_string	libberdip/src/strings.h	/^float_from_string(String s)$/;"	f
floor	libberdip/src/multilane.h	/^floor(f32_4x f4)$/;"	f
floor	libberdip/src/vectors.h	/^floor(v2 a)$/;"	f
floor32	libberdip/src/maths.h	/^floor32(f32 value)$/;"	f
floor64	libberdip/src/maths.h	/^floor64(f64 value)$/;"	f
font_size	libberdip/src/stb_truetype.h	/^   float font_size;$/;"	m	struct:__anon54
fontdicts	libberdip/src/stb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo
fontstart	libberdip/src/stb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo
found	libberdip/src/common.h	/^    b32 found;$/;"	m	struct:BitScanResult
fraction	libberdip/src/multilane.h	/^fraction(f32_4x a)$/;"	f
fraction32	libberdip/src/maths.h	/^fraction32(f32 value)$/;"	f
fraction64	libberdip/src/maths.h	/^fraction64(f64 value)$/;"	f
freeLists	libberdip/src/suballoc.h	/^    SubAllocItem *freeLists[MAX_SUB_ALLOC_BUCKETS]; \/\/ NOTE(michiel): The freelists$/;"	m	struct:SubAllocator
free_last_block	libberdip/src/memory.cpp	/^free_last_block(MemoryArena *arena)$/;"	f
ftex	libberdip/src/stb_truetype.h	/^GLuint ftex;$/;"	v
fx	libberdip/src/stb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
g	libberdip/src/multilane.h	/^        f32_4x g;$/;"	m	struct:v3_4x::__anon4
g	libberdip/src/multilane.h	/^        f32_4x g;$/;"	m	struct:v4_4x::__anon7
g	libberdip/src/vector_types.h	/^                s32 g;$/;"	m	struct:v4s::__anon38::__anon39::__anon40
g	libberdip/src/vector_types.h	/^                u32 g;$/;"	m	struct:v4u::__anon46::__anon47::__anon48
g	libberdip/src/vector_types.h	/^        f32 g;$/;"	m	struct:v3::__anon21
g	libberdip/src/vector_types.h	/^        f32 g;$/;"	m	struct:v4::__anon31
gApi	libberdip/src/rendering2d.cpp	/^global API *gApi;$/;"	v
gBase64Map	libberdip/src/base64.cpp	/^global const char gBase64Map[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v
gDecimalChars	libberdip/src/strings.h	/^global const char gDecimalChars[]  = "0123456789";$/;"	v
gDecode64Map	libberdip/src/base64.cpp	/^global const u32 gDecode64Map[256] = {$/;"	v
gDrvrMajor	kernel/xbmd_direct.c	/^int             gDrvrMajor = 0;           \/\/ Major number not dynamic.$/;"	v
gDrvrMinor	kernel/xbmd_direct.c	/^int             gDrvrMinor = 0;$/;"	v
gGB2312CodePoints	libberdip/src/fonts_gb2312.cpp	/^global u32 gGB2312CodePoints[] = {$/;"	v
gLinuxMemory	libberdip/src/linux_memory.h	/^global LinuxGlobalMemory gLinuxMemory;$/;"	v
gLowerHexChars	libberdip/src/strings.h	/^global const char gLowerHexChars[] = "0123456789abcdef";$/;"	v
gMemoryApi	libberdip/src/fonts.cpp	/^global MemoryAPI *gMemoryApi;$/;"	v
gNumFromHex	libberdip/src/strings.h	/^global const u32 gNumFromHex[256] = {$/;"	v
gReadData	user/bmd.cpp	/^} *gReadData, *gWriteData;$/;"	v	typeref:struct:TransferData
gRegReads	user/bmd.cpp	/^static RegValueRead gRegReads[] = {$/;"	v	file:
gSem	kernel/xbmd.c	/^struct semaphore gSem[NUM_SEMS];$/;"	v	typeref:struct:semaphore
gSpaces	libberdip/src/files.cpp	/^global char *gSpaces = "                                                                                                                                                                                                                                                                ";$/;"	v
gStdMemory	libberdip/src/std_memory.h	/^global StdGlobalMemory gStdMemory;$/;"	v
gUpperHexChars	libberdip/src/strings.h	/^global const char gUpperHexChars[] = "0123456789ABCDEF";$/;"	v
gWriteData	user/bmd.cpp	/^} *gReadData, *gWriteData;$/;"	v	typeref:struct:TransferData
g_devFile	user/xbmd_descriptors.h	/^  int               g_devFile;              \/\/ Device file number$/;"	m	struct:xbmd_descriptors_t
gammaBlue	libberdip/src/bitmap.cpp	/^    u32       gammaBlue;$/;"	m	struct:BitmapHeader_v5	file:
gammaGreen	libberdip/src/bitmap.cpp	/^    u32       gammaGreen;$/;"	m	struct:BitmapHeader_v5	file:
gammaRed	libberdip/src/bitmap.cpp	/^    u32       gammaRed;$/;"	m	struct:BitmapHeader_v5	file:
get_aligned_size_for	libberdip/src/memory.cpp	/^get_aligned_size_for(MemoryArena *arena, umm size, u32 flags)$/;"	f
get_alignment_offset	libberdip/src/memory.cpp	/^get_alignment_offset(MemoryArena *arena, umm alignment)$/;"	f
get_all_files_of_type_begin	libberdip/src/files.h	/^    GetAllFileOfTypeBegin *get_all_files_of_type_begin;$/;"	m	struct:FileAPI
get_all_files_of_type_end	libberdip/src/files.h	/^    GetAllFileOfTypeEnd *get_all_files_of_type_end;$/;"	m	struct:FileAPI
get_all_in_dir	libberdip/src/files.h	/^    GetAllInDir *get_all_in_dir;$/;"	m	struct:FileAPI
get_available_size	libberdip/src/circularbuf.h	/^get_available_size(CircularBuffer *buffer)$/;"	f
get_bits	libberdip/src/bitstreamer.cpp	/^get_bits(BitStreamer *bitStream, u32 nrBits)$/;"	f
get_bits_be	libberdip/src/bitstreamer.cpp	/^get_bits_be(BitStreamer *stream, u32 nrBits)$/;"	f
get_bits_le	libberdip/src/bitstreamer.cpp	/^get_bits_le(BitStreamer *stream, u32 nrBits)$/;"	f
get_bucket_size	libberdip/src/suballoc.cpp	/^get_bucket_size(SubAllocator *subAllocator, u32 bucket)$/;"	f
get_capabilities	user/cli.cpp	/^get_capabilities(Config *config, int fd)$/;"	f
get_center	libberdip/src/vectors.h	/^get_center(Rectangle2 a)$/;"	f
get_code_point_from_utf8	libberdip/src/fonts.h	/^get_code_point_from_utf8(u8 *startOfUtf8, u32 *codePoint)$/;"	f
get_dim	libberdip/src/vectors.h	/^get_dim(Rectangle2 a)$/;"	f
get_dim	libberdip/src/vectors.h	/^get_dim(Rectangle2s rect)$/;"	f
get_dim	libberdip/src/vectors.h	/^get_dim(Rectangle2u rect)$/;"	f
get_elem	libberdip/src/multilane.h	/^get_elem(v2_4x vec, u32 index)$/;"	f
get_elem	libberdip/src/multilane.h	/^get_elem(v3_4x vec, u32 index)$/;"	f
get_elem	libberdip/src/multilane.h	/^get_elem(v4_4x vec, u32 index)$/;"	f
get_extension	libberdip/src/strings.h	/^get_extension(String name)$/;"	f
get_file_position	libberdip/src/files.h	/^    GetFilePosition *get_file_position;$/;"	m	struct:FileAPI
get_file_size	libberdip/src/files.h	/^    GetFileSize_ *get_file_size;$/;"	m	struct:FileAPI
get_glyph_from_code_point	libberdip/src/fonts.h	/^get_glyph_from_code_point(BitmapFont *font, u32 codePoint)$/;"	f
get_height	libberdip/src/vectors.h	/^get_height(Rectangle2 a)$/;"	f
get_height	libberdip/src/vectors.h	/^get_height(Rectangle2s a)$/;"	f
get_horizontal_advance_for_pair	libberdip/src/fonts.h	/^get_horizontal_advance_for_pair(BitmapFont *font, u32 prevPoint, u32 codePoint)$/;"	f
get_le_u32	libberdip/src/bitstreamer.cpp	/^get_le_u32(BitStreamer *bitStream)$/;"	f
get_line	libberdip/src/strings.h	/^get_line(String input)$/;"	f
get_line_advance_for	libberdip/src/fonts.h	/^get_line_advance_for(FontInfo *info)$/;"	f
get_linux_handle	libberdip/src/linux_file.c	/^get_linux_handle(ApiFile *apiFile)$/;"	f
get_pixel_pointer	libberdip/src/bitmap.cpp	/^get_pixel_pointer(Image *image, u32 x, u32 y)$/;"	f
get_rd_mbps	user/bmd.cpp	/^const char* bmd_t::get_rd_mbps(int iter_count){$/;"	f	class:bmd_t
get_rd_result_text	user/bmd.cpp	/^const char* bmd_t::get_rd_result_text(void){$/;"	f	class:bmd_t
get_rd_success	user/bmd.cpp	/^bool bmd_t::get_rd_success(void){$/;"	f	class:bmd_t
get_results_and_display	user/xbmd_main.cpp	/^bool get_results_and_display(xbmd_app *app) {$/;"	f
get_sibling	libberdip/src/suballoc.cpp	/^get_sibling(SubAllocator *subAllocator, SubAllocItem *entry, u32 size)$/;"	f
get_size	libberdip/src/circularbuf.h	/^get_size(CircularBuffer *buffer)$/;"	f
get_starting_baseline_y	libberdip/src/fonts.h	/^get_starting_baseline_y(FontInfo *info)$/;"	f
get_std_file_size	libberdip/src/std_file.c	/^get_std_file_size(FILE *file)$/;"	f
get_thread_id	libberdip/src/intrinsics.h	/^internal inline u32 get_thread_id(void)$/;"	f
get_token	libberdip/src/tokenizer.cpp	/^get_token(Tokenizer *tokenizer)$/;"	f
get_token_kind_name	libberdip/src/tokenizer.cpp	/^get_token_kind_name(TokenKind token)$/;"	f
get_total_pixel_size	libberdip/src/bitmap.cpp	/^get_total_pixel_size(Image *image)$/;"	f
get_width	libberdip/src/vectors.h	/^get_width(Rectangle2 a)$/;"	f
get_width	libberdip/src/vectors.h	/^get_width(Rectangle2s a)$/;"	f
get_wr_mbps	user/bmd.cpp	/^const char* bmd_t::get_wr_mbps(int iter_count){$/;"	f	class:bmd_t
get_wr_result_text	user/bmd.cpp	/^const char* bmd_t::get_wr_result_text(void){$/;"	f	class:bmd_t
get_wr_success	user/bmd.cpp	/^bool bmd_t::get_wr_success(void){$/;"	f	class:bmd_t
gigabytes	libberdip/src/common.h	225;"	d
global	libberdip/src/common.h	79;"	d
glyf	libberdip/src/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
glyphCount	libberdip/src/fonts.h	/^    u32 glyphCount;$/;"	m	struct:FontInfo
glyphs	libberdip/src/fonts.cpp	/^    FontGlyph *glyphs;$/;"	m	struct:FontLoader	file:
glyphs	libberdip/src/fonts.h	/^    FontGlyph *glyphs; \/\/ [glyphCount]$/;"	m	struct:BitmapFont
gpos	libberdip/src/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
gradient	libberdip/src/perlin.h	/^gradient(u32 hash, f32 x, f32 y, f32 z)$/;"	f
gradients	libberdip/src/perlin.h	/^    f32 gradients[PERLIN_DEPTH + PERLIN_DEPTH + 2];$/;"	m	struct:PerlinNoiseOld
gradients2	libberdip/src/perlin.h	/^    v2 gradients2[PERLIN_DEPTH + PERLIN_DEPTH + 2];$/;"	m	struct:PerlinNoiseOld
gradients3	libberdip/src/perlin.h	/^    v3 gradients3[PERLIN_DEPTH + PERLIN_DEPTH + 2];$/;"	m	struct:PerlinNoiseOld
greenMask	libberdip/src/bitmap.cpp	/^    u32       greenMask;$/;"	m	struct:BitmapHeader_v5	file:
greenMask	libberdip/src/bitmap.cpp	/^    u32 greenMask;$/;"	m	struct:BitmapHeader	file:
green_base_rd	user/xbmd_main.cpp	/^int green_base_rd = 0;$/;"	v
green_base_wr	user/xbmd_main.cpp	/^int green_base_wr = 0;$/;"	v
gsubrs	libberdip/src/stb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo
h	libberdip/src/stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
h	libberdip/src/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon57
h2dAddr	kernel/xbmd_direct.c	/^    dma_addr_t    h2dAddr;$/;"	m	struct:xbmd_device	file:
h2dBuffer	kernel/xbmd_direct.c	/^    u8           *h2dBuffer;$/;"	m	struct:xbmd_device	file:
h_oversample	libberdip/src/stb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon54
h_oversample	libberdip/src/stb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
hadamard	libberdip/src/multilane.h	/^hadamard(v2_4x a, v2_4x b)$/;"	f
hadamard	libberdip/src/multilane.h	/^hadamard(v3_4x a, v3_4x b)$/;"	f
hadamard	libberdip/src/multilane.h	/^hadamard(v4_4x a, v4_4x b)$/;"	f
hadamard	libberdip/src/vectors.h	/^hadamard(v2 a, v2 b)$/;"	f
hadamard	libberdip/src/vectors.h	/^hadamard(v3 a, v3 b)$/;"	f
hadamard	libberdip/src/vectors.h	/^hadamard(v4 a, v4 b)$/;"	f
hash	user/MersenneTwister.h	/^inline MTRand::uint32 MTRand::hash( time_t t, clock_t c )$/;"	f	class:MTRand
hashMap	libberdip/src/memory.h	/^    MemoryMap   hashMap;$/;"	m	struct:MemoryInterns
hash_bytes	libberdip/src/common.h	/^hash_bytes(void *ptr, umm len) {$/;"	f
hash_mix	libberdip/src/common.h	/^internal inline u64 hash_mix(u64 x, u64 y) { return hash_u64(x ^ y); }$/;"	f
hash_ptr	libberdip/src/common.h	/^internal inline u64 hash_ptr(void *ptr)    { return hash_u64((umm)ptr); }$/;"	f
hash_u64	libberdip/src/common.h	/^hash_u64(u64 x) {$/;"	f
head	libberdip/src/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
head	libberdip/src/stb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap::stbtt__hheap_chunk
height	libberdip/src/bitmap.cpp	/^    s32       height;$/;"	m	struct:BitmapHeader_v5	file:
height	libberdip/src/bitmap.cpp	/^    s32 height;$/;"	m	struct:BitmapHeader	file:
height	libberdip/src/rendering2d.h	/^    u32 height;$/;"	m	struct:Renderer2D
height	libberdip/src/stb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context
height	libberdip/src/stb_truetype.h	/^   int width,height;$/;"	m	struct:__anon66
height	libberdip/src/types.h	/^    u32 height;$/;"	m	struct:Image
height	libberdip/src/types.h	/^    u32 height;$/;"	m	struct:Image8
height	libberdip/src/vector_types.h	/^        f32 height;$/;"	m	struct:v2::__anon12
height	libberdip/src/vector_types.h	/^        s32 height;$/;"	m	struct:v2s::__anon14
height	libberdip/src/vector_types.h	/^        u32 height;$/;"	m	struct:v2u::__anon16
hex_from_string	libberdip/src/strings.h	/^hex_from_string(String s)$/;"	f
hex_from_u4	libberdip/src/strings.h	/^hex_from_u4(u8 data)$/;"	f
hex_to_bytes	libberdip/src/strings.h	/^hex_to_bytes(String hex, umm destLength, u8 *dest)$/;"	f
hhea	libberdip/src/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hiBit	user/MersenneTwister.h	/^	uint32 hiBit( const uint32& u ) const { return u & 0x80000000U; }$/;"	f	class:MTRand
hmtx	libberdip/src/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
horizontalAdvance	libberdip/src/fonts.cpp	/^    f32 *horizontalAdvance; \/\/ NOTE(michiel): Kerning$/;"	m	struct:FontLoader	file:
horizontalAdvance	libberdip/src/fonts.h	/^    f32 *horizontalAdvance; \/\/ [glyphCount * glyphCount]$/;"	m	struct:BitmapFont
horzResolution	libberdip/src/bitmap.cpp	/^    s32       horzResolution;$/;"	m	struct:BitmapHeader_v5	file:
horzResolution	libberdip/src/bitmap.cpp	/^    s32 horzResolution;$/;"	m	struct:BitmapHeader	file:
i_expect	libberdip/src/common.h	103;"	d
i_expect	libberdip/src/common.h	105;"	d
i_expect	libberdip/src/common.h	111;"	d
i_expect	libberdip/src/common.h	94;"	d
i_expect	libberdip/src/common.h	96;"	d
i_expect_almost_equal	libberdip/src/tests.h	60;"	d
i_expect_almost_equal	libberdip/src/tests.h	73;"	d
i_expect_almost_equal_f32	libberdip/src/tests.h	139;"	d
i_expect_almost_equal_f32	libberdip/src/tests.h	232;"	d
i_expect_almost_equal_f64	libberdip/src/tests.h	140;"	d
i_expect_almost_equal_f64	libberdip/src/tests.h	233;"	d
i_expect_almost_equal_s16	libberdip/src/tests.h	136;"	d
i_expect_almost_equal_s16	libberdip/src/tests.h	229;"	d
i_expect_almost_equal_s32	libberdip/src/tests.h	137;"	d
i_expect_almost_equal_s32	libberdip/src/tests.h	230;"	d
i_expect_almost_equal_s64	libberdip/src/tests.h	138;"	d
i_expect_almost_equal_s64	libberdip/src/tests.h	231;"	d
i_expect_almost_equal_s8	libberdip/src/tests.h	135;"	d
i_expect_almost_equal_s8	libberdip/src/tests.h	228;"	d
i_expect_almost_equal_u16	libberdip/src/tests.h	132;"	d
i_expect_almost_equal_u16	libberdip/src/tests.h	225;"	d
i_expect_almost_equal_u32	libberdip/src/tests.h	133;"	d
i_expect_almost_equal_u32	libberdip/src/tests.h	226;"	d
i_expect_almost_equal_u64	libberdip/src/tests.h	134;"	d
i_expect_almost_equal_u64	libberdip/src/tests.h	227;"	d
i_expect_almost_equal_u8	libberdip/src/tests.h	131;"	d
i_expect_almost_equal_u8	libberdip/src/tests.h	224;"	d
i_expect_bool_equal	libberdip/src/tests.h	61;"	d
i_expect_bool_equal	libberdip/src/tests.h	74;"	d
i_expect_bool_equal_b16	libberdip/src/tests.h	108;"	d
i_expect_bool_equal_b16	libberdip/src/tests.h	201;"	d
i_expect_bool_equal_b32	libberdip/src/tests.h	109;"	d
i_expect_bool_equal_b32	libberdip/src/tests.h	202;"	d
i_expect_bool_equal_b64	libberdip/src/tests.h	110;"	d
i_expect_bool_equal_b64	libberdip/src/tests.h	203;"	d
i_expect_bool_equal_b8	libberdip/src/tests.h	107;"	d
i_expect_bool_equal_b8	libberdip/src/tests.h	200;"	d
i_expect_bool_not_equal	libberdip/src/tests.h	62;"	d
i_expect_bool_not_equal	libberdip/src/tests.h	75;"	d
i_expect_bool_not_equal_b16	libberdip/src/tests.h	125;"	d
i_expect_bool_not_equal_b16	libberdip/src/tests.h	218;"	d
i_expect_bool_not_equal_b32	libberdip/src/tests.h	126;"	d
i_expect_bool_not_equal_b32	libberdip/src/tests.h	219;"	d
i_expect_bool_not_equal_b64	libberdip/src/tests.h	127;"	d
i_expect_bool_not_equal_b64	libberdip/src/tests.h	220;"	d
i_expect_bool_not_equal_b8	libberdip/src/tests.h	124;"	d
i_expect_bool_not_equal_b8	libberdip/src/tests.h	217;"	d
i_expect_contains	libberdip/src/tests.h	67;"	d
i_expect_contains	libberdip/src/tests.h	80;"	d
i_expect_contains_	libberdip/src/tests_cpp.h	/^i_expect_contains_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
i_expect_equal	libberdip/src/tests.h	58;"	d
i_expect_equal	libberdip/src/tests.h	71;"	d
i_expect_equal_	libberdip/src/tests_cpp.h	/^i_expect_equal_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
i_expect_equal_f32	libberdip/src/tests.h	105;"	d
i_expect_equal_f32	libberdip/src/tests.h	198;"	d
i_expect_equal_f64	libberdip/src/tests.h	106;"	d
i_expect_equal_f64	libberdip/src/tests.h	199;"	d
i_expect_equal_s16	libberdip/src/tests.h	102;"	d
i_expect_equal_s16	libberdip/src/tests.h	195;"	d
i_expect_equal_s32	libberdip/src/tests.h	103;"	d
i_expect_equal_s32	libberdip/src/tests.h	196;"	d
i_expect_equal_s64	libberdip/src/tests.h	104;"	d
i_expect_equal_s64	libberdip/src/tests.h	197;"	d
i_expect_equal_s8	libberdip/src/tests.h	101;"	d
i_expect_equal_s8	libberdip/src/tests.h	194;"	d
i_expect_equal_u16	libberdip/src/tests.h	191;"	d
i_expect_equal_u16	libberdip/src/tests.h	98;"	d
i_expect_equal_u32	libberdip/src/tests.h	192;"	d
i_expect_equal_u32	libberdip/src/tests.h	99;"	d
i_expect_equal_u64	libberdip/src/tests.h	100;"	d
i_expect_equal_u64	libberdip/src/tests.h	193;"	d
i_expect_equal_u8	libberdip/src/tests.h	190;"	d
i_expect_equal_u8	libberdip/src/tests.h	97;"	d
i_expect_greater	libberdip/src/tests.h	64;"	d
i_expect_greater	libberdip/src/tests.h	77;"	d
i_expect_greater_f32	libberdip/src/tests.h	161;"	d
i_expect_greater_f32	libberdip/src/tests.h	254;"	d
i_expect_greater_f64	libberdip/src/tests.h	162;"	d
i_expect_greater_f64	libberdip/src/tests.h	255;"	d
i_expect_greater_or_equal	libberdip/src/tests.h	66;"	d
i_expect_greater_or_equal	libberdip/src/tests.h	79;"	d
i_expect_greater_or_equal_f32	libberdip/src/tests.h	183;"	d
i_expect_greater_or_equal_f32	libberdip/src/tests.h	276;"	d
i_expect_greater_or_equal_f64	libberdip/src/tests.h	184;"	d
i_expect_greater_or_equal_f64	libberdip/src/tests.h	277;"	d
i_expect_greater_or_equal_s16	libberdip/src/tests.h	180;"	d
i_expect_greater_or_equal_s16	libberdip/src/tests.h	273;"	d
i_expect_greater_or_equal_s32	libberdip/src/tests.h	181;"	d
i_expect_greater_or_equal_s32	libberdip/src/tests.h	274;"	d
i_expect_greater_or_equal_s64	libberdip/src/tests.h	182;"	d
i_expect_greater_or_equal_s64	libberdip/src/tests.h	275;"	d
i_expect_greater_or_equal_s8	libberdip/src/tests.h	179;"	d
i_expect_greater_or_equal_s8	libberdip/src/tests.h	272;"	d
i_expect_greater_or_equal_u16	libberdip/src/tests.h	176;"	d
i_expect_greater_or_equal_u16	libberdip/src/tests.h	269;"	d
i_expect_greater_or_equal_u32	libberdip/src/tests.h	177;"	d
i_expect_greater_or_equal_u32	libberdip/src/tests.h	270;"	d
i_expect_greater_or_equal_u64	libberdip/src/tests.h	178;"	d
i_expect_greater_or_equal_u64	libberdip/src/tests.h	271;"	d
i_expect_greater_or_equal_u8	libberdip/src/tests.h	175;"	d
i_expect_greater_or_equal_u8	libberdip/src/tests.h	268;"	d
i_expect_greater_s16	libberdip/src/tests.h	158;"	d
i_expect_greater_s16	libberdip/src/tests.h	251;"	d
i_expect_greater_s32	libberdip/src/tests.h	159;"	d
i_expect_greater_s32	libberdip/src/tests.h	252;"	d
i_expect_greater_s64	libberdip/src/tests.h	160;"	d
i_expect_greater_s64	libberdip/src/tests.h	253;"	d
i_expect_greater_s8	libberdip/src/tests.h	157;"	d
i_expect_greater_s8	libberdip/src/tests.h	250;"	d
i_expect_greater_u16	libberdip/src/tests.h	154;"	d
i_expect_greater_u16	libberdip/src/tests.h	247;"	d
i_expect_greater_u32	libberdip/src/tests.h	155;"	d
i_expect_greater_u32	libberdip/src/tests.h	248;"	d
i_expect_greater_u64	libberdip/src/tests.h	156;"	d
i_expect_greater_u64	libberdip/src/tests.h	249;"	d
i_expect_greater_u8	libberdip/src/tests.h	153;"	d
i_expect_greater_u8	libberdip/src/tests.h	246;"	d
i_expect_less	libberdip/src/tests.h	63;"	d
i_expect_less	libberdip/src/tests.h	76;"	d
i_expect_less_f32	libberdip/src/tests.h	150;"	d
i_expect_less_f32	libberdip/src/tests.h	243;"	d
i_expect_less_f64	libberdip/src/tests.h	151;"	d
i_expect_less_f64	libberdip/src/tests.h	244;"	d
i_expect_less_or_equal	libberdip/src/tests.h	65;"	d
i_expect_less_or_equal	libberdip/src/tests.h	78;"	d
i_expect_less_or_equal_f32	libberdip/src/tests.h	172;"	d
i_expect_less_or_equal_f32	libberdip/src/tests.h	265;"	d
i_expect_less_or_equal_f64	libberdip/src/tests.h	173;"	d
i_expect_less_or_equal_f64	libberdip/src/tests.h	266;"	d
i_expect_less_or_equal_s16	libberdip/src/tests.h	169;"	d
i_expect_less_or_equal_s16	libberdip/src/tests.h	262;"	d
i_expect_less_or_equal_s32	libberdip/src/tests.h	170;"	d
i_expect_less_or_equal_s32	libberdip/src/tests.h	263;"	d
i_expect_less_or_equal_s64	libberdip/src/tests.h	171;"	d
i_expect_less_or_equal_s64	libberdip/src/tests.h	264;"	d
i_expect_less_or_equal_s8	libberdip/src/tests.h	168;"	d
i_expect_less_or_equal_s8	libberdip/src/tests.h	261;"	d
i_expect_less_or_equal_u16	libberdip/src/tests.h	165;"	d
i_expect_less_or_equal_u16	libberdip/src/tests.h	258;"	d
i_expect_less_or_equal_u32	libberdip/src/tests.h	166;"	d
i_expect_less_or_equal_u32	libberdip/src/tests.h	259;"	d
i_expect_less_or_equal_u64	libberdip/src/tests.h	167;"	d
i_expect_less_or_equal_u64	libberdip/src/tests.h	260;"	d
i_expect_less_or_equal_u8	libberdip/src/tests.h	164;"	d
i_expect_less_or_equal_u8	libberdip/src/tests.h	257;"	d
i_expect_less_s16	libberdip/src/tests.h	147;"	d
i_expect_less_s16	libberdip/src/tests.h	240;"	d
i_expect_less_s32	libberdip/src/tests.h	148;"	d
i_expect_less_s32	libberdip/src/tests.h	241;"	d
i_expect_less_s64	libberdip/src/tests.h	149;"	d
i_expect_less_s64	libberdip/src/tests.h	242;"	d
i_expect_less_s8	libberdip/src/tests.h	146;"	d
i_expect_less_s8	libberdip/src/tests.h	239;"	d
i_expect_less_u16	libberdip/src/tests.h	143;"	d
i_expect_less_u16	libberdip/src/tests.h	236;"	d
i_expect_less_u32	libberdip/src/tests.h	144;"	d
i_expect_less_u32	libberdip/src/tests.h	237;"	d
i_expect_less_u64	libberdip/src/tests.h	145;"	d
i_expect_less_u64	libberdip/src/tests.h	238;"	d
i_expect_less_u8	libberdip/src/tests.h	142;"	d
i_expect_less_u8	libberdip/src/tests.h	235;"	d
i_expect_not_equal	libberdip/src/tests.h	59;"	d
i_expect_not_equal	libberdip/src/tests.h	72;"	d
i_expect_not_equal_	libberdip/src/tests_cpp.h	/^i_expect_not_equal_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
i_expect_not_equal_f32	libberdip/src/tests.h	122;"	d
i_expect_not_equal_f32	libberdip/src/tests.h	215;"	d
i_expect_not_equal_f64	libberdip/src/tests.h	123;"	d
i_expect_not_equal_f64	libberdip/src/tests.h	216;"	d
i_expect_not_equal_s16	libberdip/src/tests.h	119;"	d
i_expect_not_equal_s16	libberdip/src/tests.h	212;"	d
i_expect_not_equal_s32	libberdip/src/tests.h	120;"	d
i_expect_not_equal_s32	libberdip/src/tests.h	213;"	d
i_expect_not_equal_s64	libberdip/src/tests.h	121;"	d
i_expect_not_equal_s64	libberdip/src/tests.h	214;"	d
i_expect_not_equal_s8	libberdip/src/tests.h	118;"	d
i_expect_not_equal_s8	libberdip/src/tests.h	211;"	d
i_expect_not_equal_u16	libberdip/src/tests.h	115;"	d
i_expect_not_equal_u16	libberdip/src/tests.h	208;"	d
i_expect_not_equal_u32	libberdip/src/tests.h	116;"	d
i_expect_not_equal_u32	libberdip/src/tests.h	209;"	d
i_expect_not_equal_u64	libberdip/src/tests.h	117;"	d
i_expect_not_equal_u64	libberdip/src/tests.h	210;"	d
i_expect_not_equal_u8	libberdip/src/tests.h	114;"	d
i_expect_not_equal_u8	libberdip/src/tests.h	207;"	d
i_expect_ptr_equal	libberdip/src/tests.h	112;"	d
i_expect_ptr_equal	libberdip/src/tests.h	205;"	d
i_expect_ptr_equal_	libberdip/src/tests_c.h	/^i_expect_ptr_equal_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
i_expect_ptr_not_equal	libberdip/src/tests.h	129;"	d
i_expect_ptr_not_equal	libberdip/src/tests.h	222;"	d
i_expect_ptr_not_equal_	libberdip/src/tests_c.h	/^i_expect_ptr_not_equal_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
i_expect_simple	libberdip/src/common.h	100;"	d
i_expect_simple	libberdip/src/common.h	110;"	d
i_expect_simple	libberdip/src/common.h	91;"	d
i_expect_string_contains	libberdip/src/tests.h	186;"	d
i_expect_string_contains	libberdip/src/tests.h	279;"	d
i_expect_string_contains_	libberdip/src/tests_c.h	/^i_expect_string_contains_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
i_expect_string_equal	libberdip/src/tests.h	111;"	d
i_expect_string_equal	libberdip/src/tests.h	204;"	d
i_expect_string_equal_	libberdip/src/tests_c.h	/^i_expect_string_equal_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
i_expect_string_not_equal	libberdip/src/tests.h	128;"	d
i_expect_string_not_equal	libberdip/src/tests.h	221;"	d
i_expect_string_not_equal_	libberdip/src/tests_c.h	/^i_expect_string_not_equal_(const char *file, u32 line, const char *nameA, const char *nameB,$/;"	f
id	libberdip/src/stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
ifft	libberdip/src/fft.cpp	/^ifft(u32 dftCount, Complex32 *signal)$/;"	f
ifft_exact	libberdip/src/fft.cpp	/^ifft_exact(u32 dftCount, Complex32 *signal)$/;"	f
imag	libberdip/src/complex.h	/^    f32 imag;$/;"	m	struct:Complex32
imag	libberdip/src/complex.h	/^    f64 imag;$/;"	m	struct:Complex64
in_rectangle	libberdip/src/vectors.h	/^in_rectangle(Rectangle2 rect, v2 point)$/;"	f
in_rectangle	libberdip/src/vectors.h	/^in_rectangle(Rectangle2u rect, v2u point)$/;"	f
indent	libberdip/src/files.h	/^    u32 indent;$/;"	m	struct:FileStream
indent	libberdip/src/tokenizer.h	/^    u32 indent;$/;"	m	struct:Token
index	libberdip/src/common.h	/^    u32 index;$/;"	m	struct:BitScanResult
indexToLocFormat	libberdip/src/stb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo
index_map	libberdip/src/stb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo
info	libberdip/src/fonts.cpp	/^    FontInfo info;$/;"	m	struct:FontLoader	file:
info	libberdip/src/fonts.h	/^    FontInfo info;$/;"	m	struct:BitmapFont
init_app	user/xbmd_main.cpp	/^gboolean init_app (xbmd_app *app) {$/;"	f
init_perlin_noise	libberdip/src/perlin.h	/^init_perlin_noise(PerlinNoise *perlin, RandomSeriesPCG *random)$/;"	f
init_perlin_noise	libberdip/src/perlin.h	/^init_perlin_noise(PerlinNoiseOld *noise, RandomSeriesPCG *random)$/;"	f
init_rand_list	libberdip/src/random.h	157;"	d
init_rand_list_	libberdip/src/random.h	/^init_rand_list_(RandomSeriesPCG *series, RandomList *list,$/;"	f
init_sub_allocator	libberdip/src/suballoc.cpp	/^init_sub_allocator(SubAllocator *subAllocator, u32 size, u8 *data)$/;"	f
inner	libberdip/src/complex.h	/^inner(Complex32 a, Complex32 b)$/;"	f
inner	libberdip/src/complex.h	/^inner(Complex64 a, Complex64 b)$/;"	f
input	libberdip/src/json.h	/^    String input;$/;"	m	struct:JsonArrayIter
intent	libberdip/src/bitmap.cpp	/^    u32       intent;$/;"	m	struct:BitmapHeader_v5	file:
internal	libberdip/src/common.h	78;"	d
invert	libberdip/src/stb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge
inverted_infinity_rectangle2	libberdip/src/vectors.h	/^inverted_infinity_rectangle2(void)$/;"	f
inverted_max_rectangle2	libberdip/src/vectors.h	/^inverted_max_rectangle2(void)$/;"	f
irq	kernel/xbmd.c	/^    int             irq;$/;"	m	struct:xbmd_device	file:
irq	kernel/xbmd_direct.c	/^    int             irq;$/;"	m	struct:xbmd_device	file:
isDown	libberdip/src/platform.h	/^    b8 isDown;$/;"	m	struct:Key
isPressed	libberdip/src/platform.h	/^    b8 isPressed;$/;"	m	struct:Key
isReleased	libberdip/src/platform.h	/^    b8 isReleased;$/;"	m	struct:Key
is_alnum	libberdip/src/strings.h	/^is_alnum(u32 a)$/;"	f
is_alpha	libberdip/src/strings.h	/^is_alpha(u32 a)$/;"	f
is_digit	libberdip/src/strings.h	/^is_digit(u32 n)$/;"	f
is_down	libberdip/src/platform.h	/^is_down(Keyboard *keyboard, Keys key)$/;"	f
is_down	libberdip/src/platform.h	/^is_down(Mouse *mouse, MouseButtons button)$/;"	f
is_end_of_line	libberdip/src/strings.h	/^is_end_of_line(u32 s)$/;"	f
is_equal	libberdip/src/common.h	/^is_equal(umm size, void *aInit, void *bInit)$/;"	f
is_hex_digit	libberdip/src/strings.h	/^is_hex_digit(u32 n)$/;"	f
is_infinite	libberdip/src/common_cpp.h	/^internal b32 is_infinite(f32 f)$/;"	f
is_infinite	libberdip/src/common_cpp.h	/^internal b32 is_infinite(f64 f)$/;"	f
is_inside_triangle	libberdip/src/drawing.cpp	/^is_inside_triangle(v3 edgeOffsets)$/;"	f
is_lower_case	libberdip/src/strings.h	/^is_lower_case(u32 c)$/;"	f
is_modified	libberdip/src/platform.h	/^is_modified(Keyboard *keyboard, KeyModifiers mod)$/;"	f
is_nan	libberdip/src/common_cpp.h	/^internal b32 is_nan(f32 f)$/;"	f
is_nan	libberdip/src/common_cpp.h	/^internal b32 is_nan(f64 f)$/;"	f
is_neg_infinite	libberdip/src/common_cpp.h	/^internal b32 is_neg_infinite(f32 f)$/;"	f
is_neg_infinite	libberdip/src/common_cpp.h	/^internal b32 is_neg_infinite(f64 f)$/;"	f
is_neg_nan	libberdip/src/common_cpp.h	/^internal b32 is_neg_nan(f32 f)$/;"	f
is_neg_nan	libberdip/src/common_cpp.h	/^internal b32 is_neg_nan(f64 f)$/;"	f
is_parsing	libberdip/src/tokenizer.cpp	/^is_parsing(Tokenizer *tokenizer)$/;"	f
is_pos_infinite	libberdip/src/common_cpp.h	/^internal b32 is_pos_infinite(f32 f)$/;"	f
is_pos_infinite	libberdip/src/common_cpp.h	/^internal b32 is_pos_infinite(f64 f)$/;"	f
is_pos_nan	libberdip/src/common_cpp.h	/^internal b32 is_pos_nan(f32 f)$/;"	f
is_pos_nan	libberdip/src/common_cpp.h	/^internal b32 is_pos_nan(f64 f)$/;"	f
is_pow2	libberdip/src/common.h	197;"	d
is_pressed	libberdip/src/platform.h	/^is_pressed(Keyboard *keyboard, Keys key)$/;"	f
is_pressed	libberdip/src/platform.h	/^is_pressed(Mouse *mouse, MouseButtons button)$/;"	f
is_printable	libberdip/src/strings.h	/^is_printable(u32 a)$/;"	f
is_released	libberdip/src/platform.h	/^is_released(Keyboard *keyboard, Keys key)$/;"	f
is_released	libberdip/src/platform.h	/^is_released(Mouse *mouse, MouseButtons button)$/;"	f
is_right	libberdip/src/suballoc.cpp	/^is_right(SubAllocator *subAllocator, SubAllocItem *entry, u32 size)$/;"	f
is_snake_case	libberdip/src/strings.h	/^is_snake_case(String name)$/;"	f
is_token_kind	libberdip/src/tokenizer.cpp	/^is_token_kind(Token token, TokenKind tokenKind)$/;"	f
is_upper_case	libberdip/src/strings.h	/^is_upper_case(u32 c)$/;"	f
is_valid	libberdip/src/json.cpp	/^is_valid(JsonArrayIter *iter)$/;"	f
is_valid	libberdip/src/tokenizer.cpp	/^is_valid(Token token)$/;"	f
is_valid	libberdip/src/tokenizer.cpp	/^is_valid(Tokenizer *tokenizer)$/;"	f
is_whitespace	libberdip/src/strings.h	/^is_whitespace(u32 s)$/;"	f
itemCount	libberdip/src/json.h	/^    u32 itemCount;$/;"	m	struct:JsonObject
items	libberdip/src/json.h	/^    JsonItem *items;$/;"	m	struct:JsonObject
iter_count_t	user/xbmd_descriptors.h	/^    char              iter_count_t[16];       \/\/ Number of Iterations text$/;"	m	struct:xbmd_descriptors_t
iter_count_text	user/xbmd_main.cpp	/^  GtkWidget  *iter_count_text;              \/\/ Displays current iteration$/;"	m	struct:__anon68	file:
json_decode_string	libberdip/src/json.cpp	/^json_decode_string(String input, u8 *outData)$/;"	f
json_dump	libberdip/src/json.cpp	/^json_dump(JsonValue *value)$/;"	f
json_find	libberdip/src/json.cpp	/^json_find(String json, String key, JsonValueKind kind, String *subString)$/;"	f
json_find_first	libberdip/src/json.cpp	/^json_find_first(String json, JsonValueKind kind, String *foundKey, String *subString)$/;"	f
json_is_array	libberdip/src/json.cpp	/^json_is_array(String input)$/;"	f
json_is_constant	libberdip/src/json.cpp	/^json_is_constant(String input)$/;"	f
json_is_number	libberdip/src/json.cpp	/^json_is_number(String input)$/;"	f
json_is_object	libberdip/src/json.cpp	/^json_is_object(String input)$/;"	f
json_is_string	libberdip/src/json.cpp	/^json_is_string(String input)$/;"	f
json_iterate_array	libberdip/src/json.cpp	/^json_iterate_array(String input)$/;"	f
json_next_array	libberdip/src/json.cpp	/^json_next_array(JsonArrayIter *iter)$/;"	f
json_parse_array	libberdip/src/json.cpp	/^json_parse_array(JsonParser *parser, JsonArray *array)$/;"	f
json_parse_bool	libberdip/src/json.cpp	/^json_parse_bool(String input)$/;"	f
json_parse_digits	libberdip/src/json.cpp	/^json_parse_digits(JsonParser *parser)$/;"	f
json_parse_integer	libberdip/src/json.cpp	/^json_parse_integer(String input)$/;"	f
json_parse_number	libberdip/src/json.cpp	/^json_parse_number(JsonParser *parser, String *number)$/;"	f
json_parse_object	libberdip/src/json.cpp	/^json_parse_object(JsonParser *parser, JsonObject *object)$/;"	f
json_parse_string	libberdip/src/json.cpp	/^json_parse_string(JsonParser *parser, String *string)$/;"	f
json_parse_string	libberdip/src/json.cpp	/^json_parse_string(String input)$/;"	f
json_parse_value	libberdip/src/json.cpp	/^json_parse_value(JsonParser *parser, JsonValue *value)$/;"	f
json_print	libberdip/src/json.cpp	/^json_print(JsonValue *value, u32 indent = 0)$/;"	f
json_skip_array	libberdip/src/json.cpp	/^json_skip_array(String input)$/;"	f
json_skip_constant	libberdip/src/json.cpp	/^json_skip_constant(String input)$/;"	f
json_skip_number	libberdip/src/json.cpp	/^json_skip_number(String input)$/;"	f
json_skip_object	libberdip/src/json.cpp	/^json_skip_object(String input)$/;"	f
json_skip_string	libberdip/src/json.cpp	/^json_skip_string(String input)$/;"	f
json_skip_value	libberdip/src/json.cpp	/^json_skip_value(String input)$/;"	f
keep_temporary_memory	libberdip/src/memory.cpp	/^keep_temporary_memory(TempArenaMemory tempMem)$/;"	f
kern	libberdip/src/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
key	libberdip/src/json.h	/^    String key;$/;"	m	struct:JsonItem
keyboard	libberdip/src/platform.h	/^    Keyboard keyboard;$/;"	m	struct:API
keys	libberdip/src/memory.h	/^    u64 *keys;$/;"	m	struct:MemoryMap
keys	libberdip/src/platform.h	/^    Key keys[256];$/;"	m	struct:Keyboard
kilobytes	libberdip/src/common.h	223;"	d
kind	libberdip/src/bitstreamer.h	/^    BitStreamKind kind;$/;"	m	struct:BitStreamer
kind	libberdip/src/files.h	/^    FileDirKind kind;$/;"	m	struct:ApiFileDir
kind	libberdip/src/json.h	/^    JsonValueKind kind;$/;"	m	struct:JsonValue
kind	libberdip/src/rendering2d.h	/^    DrawKind kind;$/;"	m	struct:DrawHeader
kind	libberdip/src/tokenizer.h	/^    TokenKind kind;$/;"	m	struct:Token
lastFileHandle	libberdip/src/linux_file.c	/^    s32 lastFileHandle;$/;"	m	struct:LinuxFileGroup	file:
lastInput	libberdip/src/platform.h	/^    String lastInput;$/;"	m	struct:Keyboard
lastInputData	libberdip/src/platform.h	/^    u8 lastInputData[128];$/;"	m	struct:Keyboard
left	user/MersenneTwister.h	/^	int left;         \/\/ number of values left before reload needed$/;"	m	class:MTRand
length	libberdip/src/vectors.h	/^length(v2 a)$/;"	f
length	libberdip/src/vectors.h	/^length(v3 a)$/;"	f
length	libberdip/src/vectors.h	/^length(v4 a)$/;"	f
length_squared	libberdip/src/vectors.h	/^length_squared(v2 a)$/;"	f
length_squared	libberdip/src/vectors.h	/^length_squared(v3 a)$/;"	f
length_squared	libberdip/src/vectors.h	/^length_squared(v4 a)$/;"	f
lerp	libberdip/src/maths.h	/^lerp(f32 min, f32 t, f32 max)$/;"	f
lerp	libberdip/src/maths.h	/^lerp(f64 min, f64 t, f64 max)$/;"	f
lerp	libberdip/src/maths.h	/^lerp(s32 min, f32 t, s32 max)$/;"	f
lerp	libberdip/src/maths.h	/^lerp(u32 min, f32 t, u32 max)$/;"	f
lerp	libberdip/src/multilane.h	/^lerp(f32_4x min, f32_4x t, f32_4x max)$/;"	f
lerp	libberdip/src/multilane.h	/^lerp(v2_4x min, f32_4x t, v2_4x max)$/;"	f
lerp	libberdip/src/multilane.h	/^lerp(v3_4x min, f32_4x t, v3_4x max)$/;"	f
lerp	libberdip/src/multilane.h	/^lerp(v4_4x min, f32_4x t, v4_4x max)$/;"	f
lerp	libberdip/src/vectors.h	/^lerp(v2 min, f32 t, v2 max)$/;"	f
lerp	libberdip/src/vectors.h	/^lerp(v2s min, f32 t, v2s max)$/;"	f
lerp	libberdip/src/vectors.h	/^lerp(v2u min, f32 t, v2u max)$/;"	f
lerp	libberdip/src/vectors.h	/^lerp(v3 min, f32 t, v3 max)$/;"	f
lerp	libberdip/src/vectors.h	/^lerp(v3s min, f32 t, v3s max)$/;"	f
lerp	libberdip/src/vectors.h	/^lerp(v3u min, f32 t, v3u max)$/;"	f
lerp	libberdip/src/vectors.h	/^lerp(v4 min, f32 t, v4 max)$/;"	f
line	libberdip/src/tokenizer.h	/^    u32 line;$/;"	m	struct:SourcePos
lineGap	libberdip/src/fonts.h	/^    f32 lineGap;$/;"	m	struct:FontInfo
linear1_from_sRGB255	libberdip/src/vectors.h	/^linear1_from_sRGB255(v4 c)$/;"	f
linkCapOffset	user/cli.cpp	/^    u32 linkCapOffset;$/;"	m	struct:Config	file:
linkControl	user/cli.cpp	/^    u32 linkControl;$/;"	m	struct:Config	file:
linkSpeed	user/cli.cpp	/^    u32 linkSpeed;$/;"	m	struct:Config	file:
linkSpeedCap	user/cli.cpp	/^    u32 linkSpeedCap;$/;"	m	struct:Config	file:
linkStatContOffset	user/cli.cpp	/^    u32 linkStatContOffset;$/;"	m	struct:Config	file:
linkWidth	user/cli.cpp	/^    u32 linkWidth;$/;"	m	struct:Config	file:
linkWidthCap	user/cli.cpp	/^    u32 linkWidthCap;$/;"	m	struct:Config	file:
link_cap_offset	user/cfg.h	/^  unsigned int   link_cap_offset;                \/\/ Link Cap Offset$/;"	m	class:cfg_t
link_cap_offset	user/xbmd_descriptors.h	/^  unsigned int      link_cap_offset;        \/\/ Link CAP offset$/;"	m	struct:xbmd_descriptors_t
link_control	user/cfg.h	/^  unsigned int   link_control;$/;"	m	class:cfg_t
link_speed	user/cfg.h	/^  unsigned int   link_speed;$/;"	m	class:cfg_t
link_speed_cap	user/cfg.h	/^  unsigned int   link_speed_cap;$/;"	m	class:cfg_t
link_speed_mult	user/xbmd_main.cpp	/^int link_speed_mult = 0;$/;"	v
link_stat_cont_offset	user/cfg.h	/^  unsigned int   link_stat_cont_offset;          \/\/ Link Stat\/Control Offset$/;"	m	class:cfg_t
link_stat_cont_offset	user/xbmd_descriptors.h	/^  unsigned int      link_stat_cont_offset;  \/\/ Link Status\/Control offset$/;"	m	struct:xbmd_descriptors_t
link_stat_neg_link_speed	user/cfg.h	/^  unsigned int   link_stat_neg_link_speed;       \/\/ int containing negotiated link speed$/;"	m	class:cfg_t
link_stat_neg_link_speed_c	user/cfg.h	/^  char*          link_stat_neg_link_speed_c;     \/\/ char* containing negotiated link speed$/;"	m	class:cfg_t
link_stat_neg_link_width	user/cfg.h	/^  unsigned int   link_stat_neg_link_width;       \/\/ int containing negotiated link speed$/;"	m	class:cfg_t
link_stat_neg_link_width_c	user/cfg.h	/^  char*          link_stat_neg_link_width_c;     \/\/ char* containing negotiated link width$/;"	m	class:cfg_t
link_width	user/cfg.h	/^  unsigned int   link_width;$/;"	m	class:cfg_t
link_width_cap	user/cfg.h	/^  unsigned int   link_width_cap;      $/;"	m	class:cfg_t
linux_deallocate_memory_block	libberdip/src/linux_memory.cpp	/^linux_deallocate_memory_block(LinuxMemoryBlock *block)$/;"	f
linux_do_next_work_queue_entry	libberdip/src/linux_threading.cpp	/^linux_do_next_work_queue_entry(PlatformWorkQueue *queue)$/;"	f
linux_file_size	libberdip/src/linux_file.c	/^linux_file_size(s32 fileHandle)$/;"	f
linux_find_file_in_folder	libberdip/src/linux_file.c	/^linux_find_file_in_folder(String wildcard, LinuxFindFile *finder)$/;"	f
linux_get_next_file_dir	libberdip/src/linux_file.c	/^linux_get_next_file_dir(DIR *dir)$/;"	f
linux_thread_proc	libberdip/src/linux_threading.cpp	/^linux_thread_proc(void *parameter)$/;"	f
loBit	user/MersenneTwister.h	/^	uint32 loBit( const uint32& u ) const { return u & 0x00000001U; }$/;"	f	class:MTRand
loBits	user/MersenneTwister.h	/^	uint32 loBits( const uint32& u ) const { return u & 0x7fffffffU; }$/;"	f	class:MTRand
load	user/MersenneTwister.h	/^inline void MTRand::load( uint32 *const loadArray )$/;"	f	class:MTRand
load_bitmap	libberdip/src/bitmap.cpp	/^load_bitmap(Buffer data, b32 preMultiplyAlpha = false)$/;"	f
load_bitmap	libberdip/src/bitmap.cpp	/^load_bitmap(FileAPI *api, MemoryAllocator *allocator, String filename, b32 preMultiplyAlpha = false)$/;"	f
load_bitmap	libberdip/src/bitmap.cpp	/^load_bitmap(FileAPI *api, MemoryAllocator *allocator, char *filename, b32 preMultiplyAlpha = false)$/;"	f
load_glyph_bitmap	libberdip/src/fonts.cpp	/^load_glyph_bitmap(MemoryAllocator *allocator, stbtt_fontinfo *fontInfo, FontLoader *font, u32 codePoint, u32 glyphIndex, s32 *xOffset, s32 *yOffset)$/;"	f
loca	libberdip/src/stb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
log2	libberdip/src/maths.h	/^log2(u32 value)$/;"	f
log2_up	libberdip/src/maths.h	/^log2_up(u32 value)$/;"	f
log32	libberdip/src/maths.h	/^log32(f32 x)$/;"	f
log64	libberdip/src/maths.h	/^log64(f64 x)$/;"	f
m	libberdip/src/multilane.h	/^    __m128  m;$/;"	m	union:f32_4x
m	libberdip/src/multilane.h	/^    __m128  m;$/;"	m	union:f64_2x
magic	libberdip/src/memory.h	/^    u64 magic;$/;"	m	struct:MemoryBuffer
magnitude_angle	libberdip/src/complex.h	/^magnitude_angle(Complex32 c, f32 epsilon = 0.00001f)$/;"	f
magnitude_angle	libberdip/src/complex.h	/^magnitude_angle(Complex64 c, f64 epsilon = 0.00000001)$/;"	f
main	libberdip/src/fonts.cpp	/^int main(int argc, char **argv)$/;"	f
main	libberdip/src/stb_truetype.h	/^int main(int argc, char **argv)$/;"	f
main	user/cli.cpp	/^int main(int argc, char **argv)$/;"	f
main	user/direct.cpp	/^int main(int argc, char **argv)$/;"	f
main	user/xbmd_main.cpp	/^int main (int argc, char *argv[]) {$/;"	f
main_status_bar	user/xbmd_main.cpp	/^  GtkWidget  *main_status_bar;              \/\/ Status bar stating GUI state$/;"	m	struct:__anon68	file:
main_status_bar_context_id	user/xbmd_main.cpp	/^  guint      main_status_bar_context_id;    \/\/ Status bar ID$/;"	m	struct:__anon68	file:
major	kernel/xbmd.c	/^static int major;$/;"	v	file:
make_real	libberdip/src/common_cpp.h	/^internal f32 make_real(f32 f, f32 maxVal = F32_MAX)$/;"	f
map	libberdip/src/maths.h	/^map(f32 value, f32 fromMin, f32 fromMax, f32 toMin, f32 toMax)$/;"	f
map	libberdip/src/maths.h	/^map(f64 value, f64 fromMin, f64 fromMax, f64 toMin, f64 toMax)$/;"	f
map	libberdip/src/maths.h	/^map(v2 value, v2 fromMin, v2 fromMax, v2 toMin, v2 toMax)$/;"	f
mark	libberdip/src/suballoc.h	/^    u8 *mark;          \/\/ NOTE(michiel): Used up to this mark point of memory$/;"	m	struct:SubAllocator
mask	libberdip/src/circularbuf.h	/^    u32 mask;      \/\/ NOTE(michiel): total size is pow(2), mask = total size - 1$/;"	m	struct:CircularBuffer
mask	libberdip/src/sha.h	/^    __m128i mask;$/;"	m	struct:Sha1Context
mask	libberdip/src/sha.h	/^    __m128i mask;$/;"	m	struct:Sha256Context
match_pattern	libberdip/src/strings.h	/^match_pattern(String pattern, String str)$/;"	f
match_pattern	libberdip/src/strings.h	/^match_pattern(char *pattern, char *str)$/;"	f
match_token	libberdip/src/tokenizer.cpp	/^match_token(Tokenizer *tokenizer, TokenKind tokenKind)$/;"	f
match_token_name	libberdip/src/tokenizer.cpp	/^match_token_name(Tokenizer *tokenizer, String name)$/;"	f
max	libberdip/src/vector_types.h	/^    v2 max;$/;"	m	struct:Rectangle2
max	libberdip/src/vector_types.h	/^    v2s max;$/;"	m	struct:Rectangle2s
max	libberdip/src/vector_types.h	/^    v2u max;$/;"	m	struct:Rectangle2u
maxCount	libberdip/src/memory.h	/^    umm maxCount;$/;"	m	struct:MemoryBuffer
maxCount	libberdip/src/memory.h	/^    umm maxCount;$/;"	m	struct:MemoryMap
maxDrawSize	libberdip/src/rendering2d.h	/^    u32 maxDrawSize;$/;"	m	struct:Renderer2D
maxGlyphCount	libberdip/src/fonts.cpp	/^    u32 maxGlyphCount;$/;"	m	struct:FontLoader	file:
maxTextureByteCount	libberdip/src/rendering2d.h	/^    u32 maxTextureByteCount;$/;"	m	struct:Renderer2D
maxVertexCount	libberdip/src/rendering2d.h	/^    u32 maxVertexCount;$/;"	m	struct:Renderer2D
max_x	libberdip/src/stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon64
max_y	libberdip/src/stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon64
maximum	libberdip/src/common.h	215;"	d
maximum3	libberdip/src/common.h	219;"	d
maximum4	libberdip/src/common.h	221;"	d
mbuf_clear	libberdip/src/memory.h	259;"	d
mbuf_count	libberdip/src/memory.h	249;"	d
mbuf_deallocate	libberdip/src/memory.h	255;"	d
mbuf_end	libberdip/src/memory.h	251;"	d
mbuf_fit	libberdip/src/memory.h	256;"	d
mbuf_grow	libberdip/src/memory.h	246;"	d
mbuf_grow_	libberdip/src/memory.cpp	/^mbuf_grow_(void **bufferAddress, umm newCount, umm elemSize)$/;"	f
mbuf_hdr	libberdip/src/memory.h	245;"	d
mbuf_last	libberdip/src/memory.h	252;"	d
mbuf_magic	libberdip/src/memory.h	248;"	d
mbuf_max_count	libberdip/src/memory.h	250;"	d
mbuf_pop	libberdip/src/memory.h	258;"	d
mbuf_printf	libberdip/src/memory.h	261;"	d
mbuf_printf_	libberdip/src/memory.cpp	/^mbuf_printf_(void **bufferAddress, char *fmt, ...)$/;"	f
mbuf_push	libberdip/src/memory.h	257;"	d
mbuf_sizeof	libberdip/src/memory.h	253;"	d
md	libberdip/src/maths.h	/^    __m128d md;$/;"	m	union:FloatMathVec
md	libberdip/src/multilane.h	/^    __m128d md;$/;"	m	union:f32_4x
md	libberdip/src/multilane.h	/^    __m128d md;$/;"	m	union:f64_2x
megabytes	libberdip/src/common.h	224;"	d
memory	libberdip/src/platform.h	/^    MemoryAPI    memory;$/;"	m	struct:API
mf	libberdip/src/maths.h	/^    __m128  mf;$/;"	m	union:FloatMathVec
mi	libberdip/src/maths.h	/^    __m128i mi;$/;"	m	union:FloatMathVec
mi	libberdip/src/multilane.h	/^    __m128i mi;$/;"	m	union:f32_4x
mi	libberdip/src/multilane.h	/^    __m128i mi;$/;"	m	union:f64_2x
min	libberdip/src/vector_types.h	/^    v2 min;$/;"	m	struct:Rectangle2
min	libberdip/src/vector_types.h	/^    v2s min;$/;"	m	struct:Rectangle2s
min	libberdip/src/vector_types.h	/^    v2u min;$/;"	m	struct:Rectangle2u
min_x	libberdip/src/stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon64
min_y	libberdip/src/stb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon64
minimum	libberdip/src/common.h	214;"	d
minimum3	libberdip/src/common.h	218;"	d
minimum4	libberdip/src/common.h	220;"	d
minterned_string	libberdip/src/memory.cpp	/^minterned_string(MemoryInterns *interns, String str)$/;"	f
minterned_string	libberdip/src/memory.cpp	/^minterned_string(MemoryInterns *interns, char *str)$/;"	f
minterned_string_fmt	libberdip/src/memory.cpp	/^minterned_string_fmt(MemoryInterns *interns, umm maxTempData, char *tempData, char *fmt, ...)$/;"	f
minterns_deallocate	libberdip/src/memory.cpp	/^minterns_deallocate(MemoryInterns *interns)$/;"	f
mixBits	user/MersenneTwister.h	/^	uint32 mixBits( const uint32& u, const uint32& v ) const$/;"	f	class:MTRand
mix_colours	libberdip/src/drawing.cpp	/^mix_colours(v4 src, v4 overlay)$/;"	f
mix_colours	libberdip/src/drawing2d.cpp	/^mix_colours(v4 src, v4 overlay)$/;"	f
mmap_deallocate	libberdip/src/memory.cpp	/^mmap_deallocate(MemoryMap *map)$/;"	f
mmap_get	libberdip/src/memory.h	283;"	d
mmap_get_u64	libberdip/src/memory.h	287;"	d
mmap_grow	libberdip/src/memory.cpp	/^mmap_grow(MemoryMap *map, umm newMaxCount)$/;"	f
mmap_put	libberdip/src/memory.h	284;"	d
mmap_put_u64	libberdip/src/memory.h	288;"	d
mmap_remove	libberdip/src/memory.h	285;"	d
mmap_remove_u64	libberdip/src/memory.h	289;"	d
mmap_u64_get	libberdip/src/memory.h	291;"	d
mmap_u64_get_u64	libberdip/src/memory.cpp	/^mmap_u64_get_u64(MemoryMap *map, u64 key)$/;"	f
mmap_u64_has_key_u64	libberdip/src/memory.cpp	/^mmap_u64_has_key_u64(MemoryMap *map, u64 key)$/;"	f
mmap_u64_put	libberdip/src/memory.h	292;"	d
mmap_u64_put_u64	libberdip/src/memory.cpp	/^mmap_u64_put_u64(MemoryMap *map, u64 key, u64 value)$/;"	f
mmap_u64_rem_u64	libberdip/src/memory.cpp	/^mmap_u64_rem_u64(MemoryMap *map, u64 key)$/;"	f
mmap_u64_remove	libberdip/src/memory.h	293;"	d
mod	libberdip/src/types.h	/^    s32 mod;$/;"	m	struct:DivModS32
mod	libberdip/src/types.h	/^    s64 mod;$/;"	m	struct:DivModS64
mod	libberdip/src/types.h	/^    u32 mod;$/;"	m	struct:DivModU32
mod	libberdip/src/types.h	/^    u64 mod;$/;"	m	struct:DivModU64
modifiers	libberdip/src/platform.h	/^    u32 modifiers;$/;"	m	struct:Keyboard
modulus	libberdip/src/maths.h	/^modulus(f32 x, f32 y)$/;"	f
modulus	libberdip/src/maths.h	/^modulus(f64 x, f64 y)$/;"	f
modulus	libberdip/src/multilane.h	/^modulus(f32_4x a, f32_4x b)$/;"	f
modulus01	libberdip/src/maths.h	/^modulus01(f32 f)$/;"	f
modulus01	libberdip/src/maths.h	/^modulus01(f64 f)$/;"	f
mouse	libberdip/src/platform.h	/^    Mouse mouse;$/;"	m	struct:API
msiControl	user/cli.cpp	/^    u32 msiControl;$/;"	m	struct:Config	file:
msiOffset	user/cli.cpp	/^    u32 msiOffset;$/;"	m	struct:Config	file:
msi_control	user/cfg.h	/^  unsigned int   msi_control;$/;"	m	class:cfg_t
msi_offset	user/cfg.h	/^  unsigned int   msi_offset;                     \/\/ MSI Offset$/;"	m	class:cfg_t
msi_offset	user/xbmd_descriptors.h	/^  unsigned int      msi_offset;             \/\/ MSI CAP offset$/;"	m	struct:xbmd_descriptors_t
mul_s64_2x	libberdip/src/multilane.h	/^mul_s64_2x(f32_4x a, f32_4x b)$/;"	f
mutex	libberdip/src/linux_memory.h	/^    TicketMutex mutex;$/;"	m	struct:LinuxGlobalMemory
mutex	libberdip/src/std_memory.h	/^    TicketMutex mutex;$/;"	m	struct:StdGlobalMemory
my_stbtt_initfont	libberdip/src/stb_truetype.h	/^void my_stbtt_initfont(void)$/;"	f
my_stbtt_print	libberdip/src/stb_truetype.h	/^void my_stbtt_print(float x, float y, char *text)$/;"	f
name	kernel/xbmd.c	/^    const char *name;$/;"	m	struct:xbmd_device	file:
name	kernel/xbmd_direct.c	/^    char *name;$/;"	m	struct:xbmd_device	file:
name	libberdip/src/files.h	/^    String name;$/;"	m	struct:ApiFileDir
name	user/bmd.cpp	/^    const char *name;$/;"	m	struct:RegValueRead	file:
neg_link_speed	user/xbmd_descriptors.h	/^  int               neg_link_speed;         \/\/ Negotiated Link Spee (int)$/;"	m	struct:xbmd_descriptors_t
neg_link_speed	user/xbmd_main.cpp	/^  GtkWidget  *neg_link_speed;               \/\/ Displays Neg Link Speed$/;"	m	struct:__anon68	file:
neg_link_speed_char	user/xbmd_descriptors.h	/^  char*             neg_link_speed_char;    \/\/ Negotiated Link Speed (char*)$/;"	m	struct:xbmd_descriptors_t
neg_link_width	user/xbmd_descriptors.h	/^  int               neg_link_width;         \/\/ Negotiated Link Width (int)$/;"	m	struct:xbmd_descriptors_t
neg_link_width	user/xbmd_main.cpp	/^  GtkWidget  *neg_link_width;               \/\/ Displays Neg Link Width$/;"	m	struct:__anon68	file:
neg_link_width_char	user/xbmd_descriptors.h	/^  char*             neg_link_width_char;    \/\/ Negotiated Link Width (char*)$/;"	m	struct:xbmd_descriptors_t
next	libberdip/src/linux_memory.h	/^    LinuxMemoryBlock *next;$/;"	m	struct:LinuxMemoryBlock
next	libberdip/src/memory.h	/^    InternedString *next;$/;"	m	struct:InternedString
next	libberdip/src/stb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge
next	libberdip/src/stb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk::stbtt__hheap_chunk
next	libberdip/src/std_memory.h	/^    StdMemoryBlock *next;$/;"	m	struct:StdMemoryBlock
next	libberdip/src/suballoc.h	/^    union SubAllocItem *next; \/\/ NOTE(michiel): In the free list it is used to point to the next free item$/;"	m	union:SubAllocItem	typeref:union:SubAllocItem::SubAllocItem
next	libberdip/src/types.h	/^    struct Stream *next;$/;"	m	struct:Stream	typeref:struct:Stream::Stream
nextEntryToRead	libberdip/src/linux_threading.cpp	/^    u32 volatile nextEntryToRead;$/;"	m	struct:PlatformWorkQueue	file:
nextEntryToWrite	libberdip/src/linux_threading.cpp	/^    u32 volatile nextEntryToWrite;$/;"	m	struct:PlatformWorkQueue	file:
noErrors	libberdip/src/files.h	/^    b32 noErrors;$/;"	m	struct:ApiFile
no_clear_memory_alloc	libberdip/src/memory.h	/^no_clear_memory_alloc(void)$/;"	f
no_file_errors	libberdip/src/files.h	125;"	d
nodes	libberdip/src/stb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context
normalize	libberdip/src/strings.h	/^normalize(String str, u32 maxDestSize, u8 *dest)$/;"	f
normalize	libberdip/src/vectors.h	/^normalize(v2 a)$/;"	f
normalize	libberdip/src/vectors.h	/^normalize(v4 a)$/;"	f
normalize	libberdip/src/vectors.h	/^normalize(v4 a, f32 len)$/;"	f
normalize_len	libberdip/src/vectors.h	/^normalize_len(v2 a, f32 len)$/;"	f
normalize_or_zero	libberdip/src/vectors.h	/^normalize_or_zero(v3 a)$/;"	f
normalize_or_zero	libberdip/src/vectors.h	/^normalize_or_zero(v3 a, f32 lengthSquared)$/;"	f
normalize_or_zero	libberdip/src/vectors.h	/^normalize_or_zero(v4 a)$/;"	f
numGlyphs	libberdip/src/stb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo
num_chars	libberdip/src/stb_truetype.h	/^   int num_chars;$/;"	m	struct:__anon54
num_iter	user/xbmd_descriptors.h	/^  int               num_iter;               \/\/ Number of Iterations$/;"	m	struct:xbmd_descriptors_t
num_rd_tlps	user/xbmd_descriptors.h	/^  int               num_rd_tlps;            \/\/ Number of Read TLP's$/;"	m	struct:xbmd_descriptors_t
num_remaining_in_head_chunk	libberdip/src/stb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap
num_vertices	libberdip/src/stb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anon64
num_wr_tlps	user/xbmd_descriptors.h	/^  int               num_wr_tlps;            \/\/ Number of Write TLP's$/;"	m	struct:xbmd_descriptors_t
number	libberdip/src/json.h	/^        String        number; \/\/ NOTE(michiel): We do not parse the number for you$/;"	m	union:JsonValue::__anon1
number_from_string	libberdip/src/strings.h	/^number_from_string(String s)$/;"	f
obj-m	kernel/Makefile	/^obj-m := xbmd.o$/;"	m
object	libberdip/src/json.h	/^        JsonObject    object;$/;"	m	union:JsonValue::__anon1
offset_of	libberdip/src/common.h	193;"	d
on_main_window_destroy	user/xbmd_main.cpp	/^void on_main_window_destroy(xbmd_app *app) {$/;"	f
on_rd_num_tlps_spinner_value_changed	user/xbmd_main.cpp	/^void on_rd_num_tlps_spinner_value_changed(GtkSpinButton *rd_tlps, xbmd_app *app) {$/;"	f
on_rd_tlp_box_value_changed	user/xbmd_main.cpp	/^void on_rd_tlp_box_value_changed(GtkSpinButton *rd_size, xbmd_app *app) {$/;"	f
on_rd_tlp_pattern_entry_changed	user/xbmd_main.cpp	/^void on_rd_tlp_pattern_entry_changed(GtkEntry *rd_pattern, xbmd_app *app) {$/;"	f
on_read_bmd_button_clicked	user/xbmd_main.cpp	/^void on_read_bmd_button_clicked (GtkButton *button, xbmd_app *app) {$/;"	f
on_read_cfg_button_clicked	user/xbmd_main.cpp	/^void on_read_cfg_button_clicked (GtkButton *button, xbmd_app *app) {$/;"	f
on_read_checkbox_toggled	user/xbmd_main.cpp	/^void on_read_checkbox_toggled(GtkToggleButton *rd_check, xbmd_app *app) {$/;"	f
on_run_count_spinner_value_changed	user/xbmd_main.cpp	/^void on_run_count_spinner_value_changed(GtkSpinButton *spinbutton, xbmd_app *app) {$/;"	f
on_start_button_clicked	user/xbmd_main.cpp	/^void on_start_button_clicked(GtkButton *button, xbmd_app *app) {$/;"	f
on_wr_num_tlps_spinner_value_changed	user/xbmd_main.cpp	/^void on_wr_num_tlps_spinner_value_changed(GtkSpinButton *wr_tlps, xbmd_app *app) {$/;"	f
on_wr_tlp_box_value_changed	user/xbmd_main.cpp	/^void on_wr_tlp_box_value_changed(GtkSpinButton *wr_size, xbmd_app *app) {$/;"	f
on_wr_tlp_pattern_entry_changed	user/xbmd_main.cpp	/^void on_wr_tlp_pattern_entry_changed(GtkEntry *wr_pattern, xbmd_app *app) {$/;"	f
on_write_checkbox_toggled	user/xbmd_main.cpp	/^void on_write_checkbox_toggled(GtkToggleButton *wr_check, xbmd_app *app) {$/;"	f
onePastHighestCodePoint	libberdip/src/fonts.h	/^    u32 onePastHighestCodePoint;$/;"	m	struct:FontInfo
open_file	libberdip/src/files.h	/^    OpenFile_ *open_file;$/;"	m	struct:FileAPI
open_next_file	libberdip/src/files.h	/^    OpenNextFile *open_next_file;$/;"	m	struct:FileAPI
operator !=	libberdip/src/multilane.h	/^operator !=(f32_4x a, f32_4x b)$/;"	f
operator !=	libberdip/src/multilane.h	/^operator !=(v2_4x a, v2_4x b)$/;"	f
operator !=	libberdip/src/multilane.h	/^operator !=(v3_4x a, v3_4x b)$/;"	f
operator !=	libberdip/src/multilane.h	/^operator !=(v4_4x a, v4_4x b)$/;"	f
operator !=	libberdip/src/strings.h	/^operator !=(String a, String b)$/;"	f
operator !=	libberdip/src/vectors.h	/^operator !=(v2 a, v2 b)$/;"	f
operator !=	libberdip/src/vectors.h	/^operator !=(v2s a, v2s b)$/;"	f
operator !=	libberdip/src/vectors.h	/^operator !=(v2u a, v2u b)$/;"	f
operator !=	libberdip/src/vectors.h	/^operator !=(v3 a, v3 b)$/;"	f
operator !=	libberdip/src/vectors.h	/^operator !=(v3s a, v3s b)$/;"	f
operator !=	libberdip/src/vectors.h	/^operator !=(v3u a, v3u b)$/;"	f
operator !=	libberdip/src/vectors.h	/^operator !=(v4 a, v4 b)$/;"	f
operator &	libberdip/src/multilane.h	/^operator &(f32_4x a, f32_4x b)$/;"	f
operator &	libberdip/src/vectors.h	/^operator &(v2s a, u32 b)$/;"	f
operator &	libberdip/src/vectors.h	/^operator &(v2u a, u32 b)$/;"	f
operator &	libberdip/src/vectors.h	/^operator &(v3s a, s32 b)$/;"	f
operator &	libberdip/src/vectors.h	/^operator &(v3u a, u32 b)$/;"	f
operator &=	libberdip/src/vectors.h	/^operator &=(v2s &a, u32 b)$/;"	f
operator &=	libberdip/src/vectors.h	/^operator &=(v2u &a, u32 b)$/;"	f
operator &=	libberdip/src/vectors.h	/^operator &=(v3s &a, s32 b)$/;"	f
operator &=	libberdip/src/vectors.h	/^operator &=(v3u &a, u32 b)$/;"	f
operator ()	user/MersenneTwister.h	/^	double operator()() { return rand(); }  \/\/ same as rand()$/;"	f	class:MTRand
operator *	libberdip/src/complex.h	/^operator *(Complex32 a, Complex32 b)$/;"	f
operator *	libberdip/src/complex.h	/^operator *(Complex32 a, f32 scalar)$/;"	f
operator *	libberdip/src/complex.h	/^operator *(Complex64 a, Complex64 b)$/;"	f
operator *	libberdip/src/complex.h	/^operator *(Complex64 a, f64 scalar)$/;"	f
operator *	libberdip/src/complex.h	/^operator *(f32 scalar, Complex32 a)$/;"	f
operator *	libberdip/src/complex.h	/^operator *(f64 scalar, Complex64 a)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(f32_4x a, f32_4x b)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(f32_4x a, v2_4x b)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(f32_4x a, v3_4x b)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(f32_4x a, v4_4x b)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(f64_2x a, f64_2x b)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(v2_4x a, f32_4x b)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(v3_4x a, f32_4x b)$/;"	f
operator *	libberdip/src/multilane.h	/^operator *(v4_4x a, f32_4x b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(Rectangle2 a, f32 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(f32 a, Rectangle2 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(f32 a, v2 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(f32 a, v3 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(f32 a, v4 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(s32 a, v2s b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(s32 a, v3s b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(u32 a, v2u b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(u32 a, v3u b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(v2 a, f32 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(v2s a, s32 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(v2u a, u32 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(v3 a, f32 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(v3s a, s32 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(v3u a, u32 b)$/;"	f
operator *	libberdip/src/vectors.h	/^operator *(v4 a, f32 b)$/;"	f
operator *=	libberdip/src/complex.h	/^operator *=(Complex32 &a, Complex32 b)$/;"	f
operator *=	libberdip/src/complex.h	/^operator *=(Complex32 &a, f32 b)$/;"	f
operator *=	libberdip/src/complex.h	/^operator *=(Complex64 &a, Complex64 b)$/;"	f
operator *=	libberdip/src/complex.h	/^operator *=(Complex64 &a, f64 b)$/;"	f
operator *=	libberdip/src/multilane.h	/^operator *=(f64_2x &a, f64_2x b)$/;"	f
operator *=	libberdip/src/vectors.h	/^operator *=(v2 &a, f32 b)$/;"	f
operator *=	libberdip/src/vectors.h	/^operator *=(v2s &a, s32 b)$/;"	f
operator *=	libberdip/src/vectors.h	/^operator *=(v2u &a, u32 b)$/;"	f
operator *=	libberdip/src/vectors.h	/^operator *=(v3 &a, f32 b)$/;"	f
operator *=	libberdip/src/vectors.h	/^operator *=(v3s &a, s32 b)$/;"	f
operator *=	libberdip/src/vectors.h	/^operator *=(v3u &a, u32 b)$/;"	f
operator *=	libberdip/src/vectors.h	/^operator *=(v4 &a, f32 b)$/;"	f
operator +	libberdip/src/complex.h	/^operator +(Complex32 a, Complex32 b)$/;"	f
operator +	libberdip/src/complex.h	/^operator +(Complex64 a, Complex64 b)$/;"	f
operator +	libberdip/src/multilane.h	/^operator +(f32_4x a, f32_4x b)$/;"	f
operator +	libberdip/src/multilane.h	/^operator +(f64_2x a, f64_2x b)$/;"	f
operator +	libberdip/src/multilane.h	/^operator +(v2_4x a, v2_4x b)$/;"	f
operator +	libberdip/src/multilane.h	/^operator +(v3_4x a, v3_4x b)$/;"	f
operator +	libberdip/src/multilane.h	/^operator +(v4_4x a, v4_4x b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(Rectangle2 a, v2 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v2 a, f32 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v2 a, v2 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v2s a, s32 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v2s a, v2s b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v2u a, u32 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v2u a, v2u b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v3 a, f32 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v3 a, v3 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v3s a, s32 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v3s a, v3s b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v3u a, u32 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v3u a, v3u b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v4 a, f32 b)$/;"	f
operator +	libberdip/src/vectors.h	/^operator +(v4 a, v4 b)$/;"	f
operator +=	libberdip/src/complex.h	/^operator +=(Complex32 &a, Complex32 b)$/;"	f
operator +=	libberdip/src/complex.h	/^operator +=(Complex64 &a, Complex64 b)$/;"	f
operator +=	libberdip/src/multilane.h	/^operator +=(f64_2x &a, f64_2x b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v2 &a, f32 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v2 &a, v2 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v2s &a, s32 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v2s &a, v2s b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v2u &a, u32 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v2u &a, v2u b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v3 &a, f32 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v3 &a, v3 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v3s &a, s32 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v3s &a, v3s b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v3u &a, u32 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v3u &a, v3u b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v4 &a, f32 b)$/;"	f
operator +=	libberdip/src/vectors.h	/^operator +=(v4 &a, v4 b)$/;"	f
operator -	libberdip/src/complex.h	/^operator -(Complex32 a, Complex32 b)$/;"	f
operator -	libberdip/src/complex.h	/^operator -(Complex64 a, Complex64 b)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(f32_4x a, f32_4x b)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(f32_4x f4)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(f64_2x a, f64_2x b)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(v2_4x a, v2_4x b)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(v2_4x vec)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(v3_4x a, v3_4x b)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(v3_4x vec)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(v4_4x a, v4_4x b)$/;"	f
operator -	libberdip/src/multilane.h	/^operator -(v4_4x vec)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2 a)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2 a, f32 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2 a, v2 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2s a)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2s a, s32 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2s a, v2s b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2u a)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2u a, u32 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v2u a, v2u b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3 a)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3 a, f32 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3 a, v3 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3s a)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3s a, s32 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3s a, v3s b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3u a)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3u a, u32 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v3u a, v3u b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v4 a)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v4 a, f32 b)$/;"	f
operator -	libberdip/src/vectors.h	/^operator -(v4 a, v4 b)$/;"	f
operator -=	libberdip/src/complex.h	/^operator -=(Complex32 &a, Complex32 b)$/;"	f
operator -=	libberdip/src/complex.h	/^operator -=(Complex64 &a, Complex64 b)$/;"	f
operator -=	libberdip/src/multilane.h	/^operator -=(f64_2x &a, f64_2x b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v2 &a, f32 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v2 &a, v2 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v2s &a, s32 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v2s &a, v2s b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v2u &a, u32 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v2u &a, v2u b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v3 &a, f32 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v3 &a, v3 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v3s &a, s32 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v3s &a, v3s b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v3u &a, u32 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v3u &a, v3u b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v4 &a, f32 b)$/;"	f
operator -=	libberdip/src/vectors.h	/^operator -=(v4 &a, v4 b)$/;"	f
operator /	libberdip/src/complex.h	/^operator \/(Complex32 a, Complex32 b)$/;"	f
operator /	libberdip/src/complex.h	/^operator \/(Complex32 a, f32 b)$/;"	f
operator /	libberdip/src/complex.h	/^operator \/(Complex64 a, Complex64 b)$/;"	f
operator /	libberdip/src/complex.h	/^operator \/(Complex64 a, f64 b)$/;"	f
operator /	libberdip/src/multilane.h	/^operator \/(f32_4x a, f32_4x b)$/;"	f
operator /	libberdip/src/multilane.h	/^operator \/(f32_4x a, v2_4x b)$/;"	f
operator /	libberdip/src/multilane.h	/^operator \/(f32_4x a, v3_4x b)$/;"	f
operator /	libberdip/src/multilane.h	/^operator \/(f32_4x a, v4_4x b)$/;"	f
operator /	libberdip/src/multilane.h	/^operator \/(v2_4x a, f32_4x b)$/;"	f
operator /	libberdip/src/multilane.h	/^operator \/(v3_4x a, f32_4x b)$/;"	f
operator /	libberdip/src/multilane.h	/^operator \/(v4_4x a, f32_4x b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(f32 a, v2 b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(s32 a, v2s b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(u32 a, v2u b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(v2 a, f32 b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(v2s a, s32 b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(v2u a, u32 b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(v3 a, f32 b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(v3s a, s32 b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(v3u a, u32 b)$/;"	f
operator /	libberdip/src/vectors.h	/^operator \/(v4 a, f32 b)$/;"	f
operator /=	libberdip/src/complex.h	/^operator \/=(Complex32 &a, Complex32 b)$/;"	f
operator /=	libberdip/src/complex.h	/^operator \/=(Complex32 &a, f32 b)$/;"	f
operator /=	libberdip/src/complex.h	/^operator \/=(Complex64 &a, Complex64 b)$/;"	f
operator /=	libberdip/src/complex.h	/^operator \/=(Complex64 &a, f64 b)$/;"	f
operator /=	libberdip/src/vectors.h	/^operator \/=(v2 &a, f32 b)$/;"	f
operator /=	libberdip/src/vectors.h	/^operator \/=(v2s &a, s32 b)$/;"	f
operator /=	libberdip/src/vectors.h	/^operator \/=(v2u &a, u32 b)$/;"	f
operator /=	libberdip/src/vectors.h	/^operator \/=(v3 &a, f32 b)$/;"	f
operator /=	libberdip/src/vectors.h	/^operator \/=(v3s &a, s32 b)$/;"	f
operator /=	libberdip/src/vectors.h	/^operator \/=(v3u &a, u32 b)$/;"	f
operator /=	libberdip/src/vectors.h	/^operator \/=(v4 &a, f32 b)$/;"	f
operator <	libberdip/src/multilane.h	/^operator <(f32_4x a, f32_4x b)$/;"	f
operator <<	user/MersenneTwister.h	/^inline std::ostream& operator<<( std::ostream& os, const MTRand& mtrand )$/;"	f
operator <=	libberdip/src/multilane.h	/^operator <=(f32_4x a, f32_4x b)$/;"	f
operator ==	libberdip/src/multilane.h	/^operator ==(f32_4x a, f32_4x b)$/;"	f
operator ==	libberdip/src/multilane.h	/^operator ==(v2_4x a, v2_4x b)$/;"	f
operator ==	libberdip/src/multilane.h	/^operator ==(v3_4x a, v3_4x b)$/;"	f
operator ==	libberdip/src/multilane.h	/^operator ==(v4_4x a, v4_4x b)$/;"	f
operator ==	libberdip/src/strings.h	/^operator ==(String a, String b)$/;"	f
operator ==	libberdip/src/vectors.h	/^operator ==(v2 a, v2 b)$/;"	f
operator ==	libberdip/src/vectors.h	/^operator ==(v2s a, v2s b)$/;"	f
operator ==	libberdip/src/vectors.h	/^operator ==(v2u a, v2u b)$/;"	f
operator ==	libberdip/src/vectors.h	/^operator ==(v3 a, v3 b)$/;"	f
operator ==	libberdip/src/vectors.h	/^operator ==(v3s a, v3s b)$/;"	f
operator ==	libberdip/src/vectors.h	/^operator ==(v3u a, v3u b)$/;"	f
operator ==	libberdip/src/vectors.h	/^operator ==(v4 a, v4 b)$/;"	f
operator >	libberdip/src/multilane.h	/^operator >(f32_4x a, f32_4x b)$/;"	f
operator >=	libberdip/src/multilane.h	/^operator >=(f32_4x a, f32_4x b)$/;"	f
operator >>	user/MersenneTwister.h	/^inline std::istream& operator>>( std::istream& is, MTRand& mtrand )$/;"	f
operator ^	libberdip/src/multilane.h	/^operator ^(f32_4x a, f32_4x b)$/;"	f
operator ^	libberdip/src/vectors.h	/^operator ^(v2s a, u32 b)$/;"	f
operator ^	libberdip/src/vectors.h	/^operator ^(v2u a, u32 b)$/;"	f
operator ^	libberdip/src/vectors.h	/^operator ^(v3s a, s32 b)$/;"	f
operator ^	libberdip/src/vectors.h	/^operator ^(v3u a, u32 b)$/;"	f
operator ^=	libberdip/src/vectors.h	/^operator ^=(v2s &a, u32 b)$/;"	f
operator ^=	libberdip/src/vectors.h	/^operator ^=(v2u &a, u32 b)$/;"	f
operator ^=	libberdip/src/vectors.h	/^operator ^=(v3s &a, s32 b)$/;"	f
operator ^=	libberdip/src/vectors.h	/^operator ^=(v3u &a, u32 b)$/;"	f
operator |	libberdip/src/multilane.h	/^operator |(f32_4x a, f32_4x b)$/;"	f
operator |	libberdip/src/vectors.h	/^operator |(v2s a, u32 b)$/;"	f
operator |	libberdip/src/vectors.h	/^operator |(v2u a, u32 b)$/;"	f
operator |	libberdip/src/vectors.h	/^operator |(v3s a, s32 b)$/;"	f
operator |	libberdip/src/vectors.h	/^operator |(v3u a, u32 b)$/;"	f
operator |=	libberdip/src/vectors.h	/^operator |=(v2s &a, u32 b)$/;"	f
operator |=	libberdip/src/vectors.h	/^operator |=(v2u &a, u32 b)$/;"	f
operator |=	libberdip/src/vectors.h	/^operator |=(v3s &a, s32 b)$/;"	f
operator |=	libberdip/src/vectors.h	/^operator |=(v3u &a, u32 b)$/;"	f
operator ~	libberdip/src/multilane.h	/^operator ~(f32_4x a)$/;"	f
origin	libberdip/src/tokenizer.h	/^    SourcePos origin;$/;"	m	struct:Token
origin	libberdip/src/tokenizer.h	/^    SourcePos origin;$/;"	m	struct:Tokenizer
outline_circle	libberdip/src/drawing.cpp	/^outline_circle(Image *image, s32 xStart, s32 yStart, u32 radius, f32 thickness = 1.0f,$/;"	f
outline_rectangle	libberdip/src/drawing.cpp	/^outline_rectangle(Image *image, Rectangle2 rect, v4 colour)$/;"	f
outline_rectangle	libberdip/src/drawing.cpp	/^outline_rectangle(Image *image, Rectangle2u rect, u32 colour)$/;"	f
outline_rectangle	libberdip/src/drawing.cpp	/^outline_rectangle(Image *image, u32 xStart, u32 yStart, u32 width, u32 height, u32 colour)$/;"	f
outline_rectangle	libberdip/src/drawing.cpp	/^outline_rectangle(Image *image, u32 xStart, u32 yStart, u32 width, u32 height, v4 colour)$/;"	f
outline_triangle	libberdip/src/drawing.cpp	/^outline_triangle(Image *image, v2 a, v2 b, v2 c, u32 colour)$/;"	f
outline_triangle	libberdip/src/drawing.cpp	/^outline_triangle(Image *image, v2 a, v2 b, v2 c, v4 colour)$/;"	f
outline_triangle	libberdip/src/drawing.cpp	/^outline_triangle(Image *image, v2s a, v2s b, v2s c, u32 colour)$/;"	f
outline_triangle	libberdip/src/drawing.cpp	/^outline_triangle(Image *image, v2s a, v2s b, v2s c, v4 colour)$/;"	f
outline_triangle	libberdip/src/drawing.cpp	/^outline_triangle(Image *image, v2u a, v2u b, v2u c, u32 colour)$/;"	f
outline_triangle	libberdip/src/drawing.cpp	/^outline_triangle(Image *image, v2u a, v2u b, v2u c, v4 colour)$/;"	f
output	user/cli.cpp	/^output(char *message, ...)$/;"	f
output	user/direct.cpp	/^output(char *message, ...)$/;"	f
p	libberdip/src/drawing2d.cpp	/^    v2 p;  \/\/ NOTE(michiel): Position$/;"	m	struct:Vertex2D	file:
pNext	user/MersenneTwister.h	/^	uint32 *pNext;    \/\/ next value to get from state$/;"	m	class:MTRand
pack_colour	libberdip/src/vectors.h	/^pack_colour(v4 colour)$/;"	f
pack_colours	libberdip/src/drawing_simd.cpp	/^pack_colours(v4_4x colours)$/;"	f
pack_info	libberdip/src/stb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context
pad1	libberdip/src/vector_types.h	/^        f32 pad1;$/;"	m	struct:v4::__anon30
pad2	libberdip/src/vector_types.h	/^        f32 pad2;$/;"	m	struct:v4::__anon32
padding	libberdip/src/linux_memory.h	/^    u64 padding[2];$/;"	m	struct:LinuxMemoryBlock
padding	libberdip/src/stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon56
padding	libberdip/src/stb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context
padding	libberdip/src/std_memory.h	/^    u64 padding[2];$/;"	m	struct:StdMemoryBlock
padding	libberdip/src/std_memory.h	/^    u64 padding[5];$/;"	m	struct:StdMemoryBlock
parse_half_hex_byte	libberdip/src/strings.h	/^parse_half_hex_byte(char c)$/;"	f
pathSep	libberdip/src/files.h	/^    char *pathSep;$/;"	m	struct:FileAPI
pattern_check	user/xbmd_main.cpp	/^bool pattern_check(const char* pattern_new, int pattern_length) {$/;"	f
pciDev	kernel/xbmd.c	/^    struct pci_dev *pciDev;$/;"	m	struct:xbmd_device	typeref:struct:xbmd_device::pci_dev	file:
pciDev	kernel/xbmd_direct.c	/^    struct pci_dev *pciDev;$/;"	m	struct:xbmd_device	typeref:struct:xbmd_device::pci_dev	file:
pcieCapOffset	user/cli.cpp	/^    u32 pcieCapOffset;$/;"	m	struct:Config	file:
pcie_cap_offset	user/cfg.h	/^  unsigned int   pcie_cap_offset;                \/\/ PCIE Cap Offset$/;"	m	class:cfg_t
pcie_cap_offset	user/xbmd_descriptors.h	/^  unsigned int      pcie_cap_offset;        \/\/ PCIE CAP offset$/;"	m	struct:xbmd_descriptors_t
peek_token	libberdip/src/tokenizer.cpp	/^peek_token(Tokenizer *tokenizer)$/;"	f
perlin_noise	libberdip/src/perlin.h	/^perlin_noise(PerlinNoise *perlin, f32 p)$/;"	f
perlin_noise	libberdip/src/perlin.h	/^perlin_noise(PerlinNoise *perlin, v2 p)$/;"	f
perlin_noise	libberdip/src/perlin.h	/^perlin_noise(PerlinNoise *perlin, v3 p)$/;"	f
perlin_noise	libberdip/src/perlin.h	/^perlin_noise(PerlinNoiseOld *perlin, f32 p)$/;"	f
perlin_noise	libberdip/src/perlin.h	/^perlin_noise(PerlinNoiseOld *perlin, v2 p)$/;"	f
perlin_noise	libberdip/src/perlin.h	/^perlin_noise(PerlinNoiseOld *perlin, v3 p)$/;"	f
permutations	libberdip/src/perlin.h	/^    u8 permutations[PERLIN_DEPTH + PERLIN_DEPTH + 2];$/;"	m	struct:PerlinNoiseOld
permutations	libberdip/src/perlin.h	/^    u8 permutations[PERLIN_DEPTH];$/;"	m	struct:PerlinNoise
persist	libberdip/src/common.h	80;"	d
phantom_enable	user/xbmd_descriptors.h	/^  bool              phantom_enable;         \/\/ Phantom Functions enable$/;"	m	struct:xbmd_descriptors_t
pixelHeight	libberdip/src/fonts.h	/^    s32 pixelHeight;$/;"	m	struct:FontInfo
pixelPosition	libberdip/src/platform.h	/^    v2  pixelPosition;$/;"	m	struct:Mouse
pixels	libberdip/src/stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anon57
pixels	libberdip/src/stb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context
pixels	libberdip/src/types.h	/^    u32 *pixels;$/;"	m	struct:Image
pixels	libberdip/src/types.h	/^    u8 *pixels;$/;"	m	struct:Image8
planes	libberdip/src/bitmap.cpp	/^    u16       planes;$/;"	m	struct:BitmapHeader_v5	file:
planes	libberdip/src/bitmap.cpp	/^    u16 planes;$/;"	m	struct:BitmapHeader	file:
platform	libberdip/src/files.h	/^    void *platform;$/;"	m	struct:ApiFile
platform	libberdip/src/files.h	/^    void *platform;$/;"	m	struct:ApiFileGroup
pmCapabilities	user/cli.cpp	/^    u32 pmCapabilities;$/;"	m	struct:Config	file:
pmOffset	user/cli.cpp	/^    u32 pmOffset;$/;"	m	struct:Config	file:
pmStatControl	user/cli.cpp	/^    u32 pmStatControl;$/;"	m	struct:Config	file:
pm_capabilities	user/cfg.h	/^  unsigned int   pm_capabilities;$/;"	m	class:cfg_t
pm_offset	user/cfg.h	/^  unsigned int   pm_offset;                      \/\/ Power Management Offset$/;"	m	class:cfg_t
pm_offset	user/xbmd_descriptors.h	/^  unsigned int      pm_offset;              \/\/ Power Management CAP Offset$/;"	m	struct:xbmd_descriptors_t
pm_stat_control	user/cfg.h	/^  unsigned int   pm_stat_control;$/;"	m	class:cfg_t
point	libberdip/src/drawing.cpp	/^    v2 point;$/;"	m	struct:ColouredPoint	file:
polar_to_cartesian	libberdip/src/vectors.h	/^polar_to_cartesian(f32 r, f32 theta)$/;"	f
popcount	libberdip/src/common.h	/^internal u16 popcount(u16 value) { return __builtin_popcount(value); }$/;"	f
popcount	libberdip/src/common.h	/^internal u32 popcount(u32 value) { return __builtin_popcountl(value); }$/;"	f
popcount	libberdip/src/common.h	/^internal u32 popcount(u32 value) { return __popcnt(value); }$/;"	f
popcount	libberdip/src/common.h	/^internal u64 popcount(u64 value) { return __builtin_popcountll(value); }$/;"	f
popcount	libberdip/src/common.h	/^internal u64 popcount(u64 value) { return __popcnt64(value); }$/;"	f
pow32	libberdip/src/maths.h	/^pow32(f32 x, f32 y)$/;"	f
pow64	libberdip/src/maths.h	/^pow64(f64 x, f64 y)$/;"	f
prev	libberdip/src/linux_memory.h	/^    LinuxMemoryBlock *prev;$/;"	m	struct:LinuxMemoryBlock
prev	libberdip/src/memory.h	/^    PlatformMemoryBlock *prev;$/;"	m	struct:PlatformMemoryBlock
prev	libberdip/src/std_memory.h	/^    StdMemoryBlock *prev;$/;"	m	struct:StdMemoryBlock
print	libberdip/src/files.cpp	8;"	d	file:
print_api	libberdip/src/files.cpp	/^print_api(FileAPI *api, FileStream *stream, char *fmt, ...)$/;"	f
print_indent	libberdip/src/files.cpp	7;"	d	file:
print_indent_api	libberdip/src/files.cpp	/^print_indent_api(FileAPI *api, FileStream *stream)$/;"	f
print_token	libberdip/src/tokenizer.cpp	/^print_token(Token token)$/;"	f
print_usage	libberdip/src/fonts.cpp	/^print_usage(char *progName)$/;"	f
println	libberdip/src/files.cpp	9;"	d	file:
println_api	libberdip/src/files.cpp	/^println_api(FileAPI *api, FileStream *stream, char *fmt, ...)$/;"	f
println_begin	libberdip/src/files.cpp	10;"	d	file:
println_begin_api	libberdip/src/files.cpp	/^println_begin_api(FileAPI *api, FileStream *stream, char *fmt = 0, ...)$/;"	f
println_end	libberdip/src/files.cpp	11;"	d	file:
println_end_api	libberdip/src/files.cpp	/^println_end_api(FileAPI *api, FileStream *stream, char *fmt = 0, ...)$/;"	f
profileData	libberdip/src/bitmap.cpp	/^    u32       profileData;$/;"	m	struct:BitmapHeader_v5	file:
profileSize	libberdip/src/bitmap.cpp	/^    u32       profileSize;$/;"	m	struct:BitmapHeader_v5	file:
ptr_from_u64	libberdip/src/common.h	209;"	d
push_circle	libberdip/src/rendering2d.h	/^push_circle(Renderer2D *renderer, v2 center, f32 radius, v4 colour)$/;"	f
push_circle_gradient	libberdip/src/rendering2d.h	/^push_circle_gradient(Renderer2D *renderer, v2 center, f32 radius, v4 colour, v4 edgeColour,$/;"	f
push_clear	libberdip/src/rendering2d.h	/^push_clear(Renderer2D *renderer, v4 colour)$/;"	f
push_header	libberdip/src/rendering2d.h	/^push_header(Renderer2D *renderer, DrawKind kind, umm reserveSize = 0)$/;"	f
push_image	libberdip/src/rendering2d.h	/^push_image(Renderer2D *renderer, v2 offset, Image *image,$/;"	f
push_line	libberdip/src/rendering2d.h	/^push_line(Renderer2D *renderer, v2 start, v2 end, v4 colour)$/;"	f
push_rectangle	libberdip/src/rendering2d.h	/^push_rectangle(Renderer2D *renderer, v2 offset, v2 size, v4 colour)$/;"	f
push_texture	libberdip/src/rendering2d.h	/^push_texture(Renderer2D *renderer, umm size)$/;"	f
push_triangle	libberdip/src/rendering2d.h	/^push_triangle(Renderer2D *renderer, v2 a, v2 b, v2 c, v4 colour)$/;"	f
push_vertex	libberdip/src/rendering2d.h	/^push_vertex(Renderer2D *renderer, Vertex2D vertex)$/;"	f
pvertices	libberdip/src/stb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anon64
r	libberdip/src/multilane.h	/^        f32_4x r;$/;"	m	struct:v3_4x::__anon4
r	libberdip/src/multilane.h	/^        f32_4x r;$/;"	m	struct:v4_4x::__anon7
r	libberdip/src/vector_types.h	/^                s32 r;$/;"	m	struct:v4s::__anon38::__anon39::__anon40
r	libberdip/src/vector_types.h	/^                u32 r;$/;"	m	struct:v4u::__anon46::__anon47::__anon48
r	libberdip/src/vector_types.h	/^        f32 r;$/;"	m	struct:v3::__anon21
r	libberdip/src/vector_types.h	/^        f32 r;$/;"	m	struct:v4::__anon31
rad2deg	libberdip/src/common.h	211;"	d
rand	user/MersenneTwister.h	/^inline double MTRand::rand( const double& n )$/;"	f	class:MTRand
rand	user/MersenneTwister.h	/^inline double MTRand::rand()$/;"	f	class:MTRand
randDblExc	user/MersenneTwister.h	/^inline double MTRand::randDblExc( const double& n )$/;"	f	class:MTRand
randDblExc	user/MersenneTwister.h	/^inline double MTRand::randDblExc()$/;"	f	class:MTRand
randExc	user/MersenneTwister.h	/^inline double MTRand::randExc( const double& n )$/;"	f	class:MTRand
randExc	user/MersenneTwister.h	/^inline double MTRand::randExc()$/;"	f	class:MTRand
randInt	user/MersenneTwister.h	/^inline MTRand::uint32 MTRand::randInt( const uint32& n )$/;"	f	class:MTRand
randInt	user/MersenneTwister.h	/^inline MTRand::uint32 MTRand::randInt()$/;"	f	class:MTRand
random_bilateral	libberdip/src/random.h	/^random_bilateral(RandomSeriesPCG *series)$/;"	f
random_bilateral64	libberdip/src/random.h	/^random_bilateral64(RandomSeriesPCG *series)$/;"	f
random_bilateral_4x	libberdip/src/random_simd.h	/^random_bilateral_4x(RandomSeriesPCG_4x *series)$/;"	f
random_choice	libberdip/src/random.h	/^random_choice(RandomSeriesPCG *series, u32 choiceCount)$/;"	f
random_enable	user/xbmd_descriptors.h	/^  int               random_enable;          \/\/ Randomization enable $/;"	m	struct:xbmd_descriptors_t
random_entry	libberdip/src/random.h	/^random_entry(RandomList *list)$/;"	f
random_next_u32	libberdip/src/random.h	/^random_next_u32(RandomSeriesPCG *series)$/;"	f
random_next_u32_4x	libberdip/src/random_simd.h	/^random_next_u32_4x(RandomSeriesPCG_4x *series)$/;"	f
random_seed_pcg	libberdip/src/random.h	/^random_seed_pcg(u64 state, u64 selector)$/;"	f
random_seed_pcg	libberdip/src/random_simd.h	/^random_seed_pcg(f32_4x state, f32_4x selector)$/;"	f
random_unilateral	libberdip/src/random.h	/^random_unilateral(RandomSeriesPCG *series)$/;"	f
random_unilateral64	libberdip/src/random.h	/^random_unilateral64(RandomSeriesPCG *series)$/;"	f
random_unilateral_4x	libberdip/src/random_simd.h	/^random_unilateral_4x(RandomSeriesPCG_4x *series)$/;"	f
raw	kernel/xbmd.c	/^    u64 raw;$/;"	m	union:RegWrite	file:
rd_bytes_to_trans	user/xbmd_descriptors.h	/^    char              rd_bytes_to_trans[16];  \/\/ Number of Read Bytes to Transfer$/;"	m	struct:xbmd_descriptors_t
rd_enable	user/xbmd_descriptors.h	/^  unsigned int      rd_enable;              \/\/ Read Enable$/;"	m	struct:xbmd_descriptors_t
rd_mbps	user/bmd.h	/^  int rd_mbps;                     \/\/ Contains Read Performance.  SUM of total performance per run (not iteration)$/;"	m	class:bmd_t
rd_mbps	user/xbmd_descriptors.h	/^    const char*       rd_mbps;                \/\/ Read Performance text$/;"	m	struct:xbmd_descriptors_t
rd_mbps_c	user/bmd.h	/^    char rd_mbps_c[32];                 \/\/ Char string showing performance that is passed to GUI RD MBPS field$/;"	m	class:bmd_t
rd_pattern_length	user/xbmd_descriptors.h	/^  int               rd_pattern_length;      \/\/ Read Pattern Length $/;"	m	struct:xbmd_descriptors_t
rd_pattern_new	user/xbmd_descriptors.h	/^  const char*       rd_pattern_new;         \/\/ Read Pattern$/;"	m	struct:xbmd_descriptors_t
rd_pattern_valid	user/xbmd_descriptors.h	/^  bool              rd_pattern_valid;       \/\/ Read Pattern Valid$/;"	m	struct:xbmd_descriptors_t
rd_result_text	user/bmd.h	/^  const char* rd_result_text;      \/\/ Contains text stating success of RD DMA or error condition if one exists$/;"	m	class:bmd_t
rd_status	user/xbmd_descriptors.h	/^  const char*       rd_status;              \/\/ Read Status text $/;"	m	struct:xbmd_descriptors_t
rd_success	user/bmd.h	/^  bool rd_success;                 \/\/ Bool declaring if Read DMA was successful $/;"	m	class:bmd_t
rd_tlp_size	user/xbmd_descriptors.h	/^  int               rd_tlp_size;            \/\/ Read TLP Size $/;"	m	struct:xbmd_descriptors_t
readAddr	kernel/xbmd.c	/^    dma_addr_t    readAddr;$/;"	m	struct:xbmd_device	file:
readBuffer	kernel/xbmd.c	/^    u8           *readBuffer;$/;"	m	struct:xbmd_device	file:
readIndex	libberdip/src/circularbuf.h	/^    u32 readIndex;$/;"	m	struct:CircularBuffer
read_bmd_regs	user/bmd.cpp	/^  int bmd_t::read_bmd_regs(int g_devFile) {$/;"	f	class:bmd_t
read_bytes_to_transfer	user/xbmd_main.cpp	/^  GtkWidget  *read_bytes_to_transfer;       \/\/ Displays Read DMA bytes to trans$/;"	m	struct:__anon68	file:
read_bytes_transferred	user/xbmd_main.cpp	/^  GtkWidget  *read_bytes_transferred;       \/\/ Displays Read bytes transferred$/;"	m	struct:__anon68	file:
read_check	user/xbmd_main.cpp	/^  GtkWidget  *read_check;                   \/\/ Enables Read DMA$/;"	m	struct:__anon68	file:
read_data	user/cli.cpp	/^read_data(int file, u32 size, void *buffer)$/;"	f
read_entire_file	libberdip/src/files.h	/^    ReadEntireFile *read_entire_file;$/;"	m	struct:FileAPI
read_from_file	libberdip/src/files.h	/^    ReadFromFile *read_from_file;$/;"	m	struct:FileAPI
read_from_file_offset	libberdip/src/files.h	/^    ReadFromFileOffset *read_from_file_offset;$/;"	m	struct:FileAPI
read_mbps	user/xbmd_main.cpp	/^  GtkWidget  *read_mbps;                    \/\/ Displays Read Performance$/;"	m	struct:__anon68	file:
read_num_tlps	user/xbmd_main.cpp	/^  GtkWidget  *read_num_tlps;                \/\/ Sets # of Read TLPs to transfer$/;"	m	struct:__anon68	file:
read_status	user/xbmd_main.cpp	/^  GtkWidget  *read_status;                  \/\/ Displays Read status\/result$/;"	m	struct:__anon68	file:
read_tlp_pattern	user/xbmd_main.cpp	/^  GtkWidget  *read_tlp_pattern;             \/\/ Sets Read TLP payload pattern$/;"	m	struct:__anon68	file:
read_tlp_size	user/xbmd_main.cpp	/^  GtkWidget  *read_tlp_size;                \/\/ Sets Read TLP size$/;"	m	struct:__anon68	file:
real	libberdip/src/complex.h	/^    f32 real;$/;"	m	struct:Complex32
real	libberdip/src/complex.h	/^    f64 real;$/;"	m	struct:Complex64
reallocate_memory	libberdip/src/memory.h	/^    PlatformReallocateMemory *reallocate_memory;$/;"	m	struct:MemoryAPI
reallocate_size	libberdip/src/memory.h	/^    ReallocateMemorySize  *reallocate_size;$/;"	m	struct:MemoryAllocator
reallocate_size	libberdip/src/memory.h	/^reallocate_size(MemoryAllocator *alloc, umm size, void *source, u32 flags)$/;"	f
reciprocal	libberdip/src/multilane.h	/^reciprocal(f32_4x a)$/;"	f
rect_center_dim	libberdip/src/vectors.h	/^rect_center_dim(v2 center, v2 dim)$/;"	f
rect_from_dim	libberdip/src/vectors.h	/^rect_from_dim(s32 x, s32 y, s32 w, s32 h)$/;"	f
rect_from_dim	libberdip/src/vectors.h	/^rect_from_dim(u32 x, u32 y, u32 w, u32 h)$/;"	f
rect_grow	libberdip/src/vectors.h	/^rect_grow(Rectangle2 a, v2 border)$/;"	f
rect_grow	libberdip/src/vectors.h	/^rect_grow(Rectangle2u a, v2u border)$/;"	f
rect_min_dim	libberdip/src/vectors.h	/^rect_min_dim(f32 minX, f32 minY, f32 dimX, f32 dimY)$/;"	f
rect_min_dim	libberdip/src/vectors.h	/^rect_min_dim(s32 minX, s32 minY, s32 dimX, s32 dimY)$/;"	f
rect_min_dim	libberdip/src/vectors.h	/^rect_min_dim(u32 minX, u32 minY, u32 dimX, u32 dimY)$/;"	f
rect_min_dim	libberdip/src/vectors.h	/^rect_min_dim(v2 min, v2 dim)$/;"	f
rect_min_dim	libberdip/src/vectors.h	/^rect_min_dim(v2u min, v2u dim)$/;"	f
rect_min_max	libberdip/src/vectors.h	/^rect_min_max(f32 minX, f32 minY, f32 maxX, f32 maxY)$/;"	f
rect_min_max	libberdip/src/vectors.h	/^rect_min_max(s32 minX, s32 minY, s32 maxX, s32 maxY)$/;"	f
rect_min_max	libberdip/src/vectors.h	/^rect_min_max(u32 minX, u32 minY, u32 maxX, u32 maxY)$/;"	f
rect_min_max	libberdip/src/vectors.h	/^rect_min_max(v2 min, v2 max)$/;"	f
rect_min_max	libberdip/src/vectors.h	/^rect_min_max(v2u min, v2u max)$/;"	f
rect_union	libberdip/src/vectors.h	/^rect_union(Rectangle2 a, Rectangle2 b)$/;"	f
rect_union	libberdip/src/vectors.h	/^rect_union(Rectangle2u a, Rectangle2u b)$/;"	f
redMask	libberdip/src/bitmap.cpp	/^    u32       redMask;$/;"	m	struct:BitmapHeader_v5	file:
redMask	libberdip/src/bitmap.cpp	/^    u32 redMask;$/;"	m	struct:BitmapHeader	file:
reg	kernel/xbmd.c	/^        int reg;$/;"	m	struct:RegWrite::__anon74	file:
reg	user/bmd.cpp	/^    XbmDmaControlReg reg;$/;"	m	struct:RegValueRead	file:
relativePosition	libberdip/src/platform.h	/^    v2  relativePosition; \/\/ NOTE(michiel): (0, 0) is the center, (-1, -1) is top left, (1, 1) bottom right$/;"	m	struct:Mouse
reload	user/MersenneTwister.h	/^inline void MTRand::reload()$/;"	f	class:MTRand
remainingBits	libberdip/src/bitstreamer.h	/^    u8 remainingBits;$/;"	m	struct:BitStreamer
remainingData	libberdip/src/bitstreamer.h	/^    u8 remainingData;$/;"	m	struct:BitStreamer
remove_extension	libberdip/src/strings.h	/^remove_extension(String name)$/;"	f
remove_first_free	libberdip/src/suballoc.cpp	/^remove_first_free(SubAllocator *subAllocator, u32 bucket)$/;"	f
renderTexIndexOffset	libberdip/src/fonts.h	/^    u32 renderTexIndexOffset;$/;"	m	struct:BitmapFont
reserved	libberdip/src/bitmap.cpp	/^    u32       reserved;$/;"	m	struct:BitmapHeader_v5	file:
reserved1	libberdip/src/bitmap.cpp	/^    u16 reserved1;$/;"	m	struct:BitmapHeader	file:
reserved1	libberdip/src/bitmap.cpp	/^    u16 reserved1;$/;"	m	struct:BitmapHeader_v5	file:
reserved1	libberdip/src/multilane.h	/^        f32_4x reserved1;$/;"	m	struct:v3_4x::__anon5
reserved2	libberdip/src/bitmap.cpp	/^    u16 reserved2;$/;"	m	struct:BitmapHeader	file:
reserved2	libberdip/src/bitmap.cpp	/^    u16 reserved2;$/;"	m	struct:BitmapHeader_v5	file:
reserved5	libberdip/src/multilane.h	/^        f32_4x reserved5;$/;"	m	struct:v4_4x::__anon9
reserved6	libberdip/src/multilane.h	/^        f32_4x reserved6;$/;"	m	struct:v4_4x::__anon10
reverse_bits32	libberdip/src/common.h	/^reverse_bits32(u32 b, u32 msb)$/;"	f
rgb	libberdip/src/multilane.h	/^        v3_4x rgb;$/;"	m	struct:v4_4x::__anon10
rgb	libberdip/src/vector_types.h	/^            v3s rgb;$/;"	m	union:v4s::__anon38::__anon39
rgb	libberdip/src/vector_types.h	/^            v3u rgb;$/;"	m	union:v4u::__anon46::__anon47
rgb	libberdip/src/vector_types.h	/^        v3 rgb;$/;"	m	struct:v4::__anon32
rotate	libberdip/src/vectors.h	/^rotate(v2 a, f32 angle)$/;"	f
rotate	libberdip/src/vectors.h	/^rotate(v2 a, v2 rotation)$/;"	f
rotate_left	libberdip/src/maths.h	/^rotate_left(u32 value, s32 amount)$/;"	f
rotate_left	libberdip/src/maths.h	/^rotate_left(u64 value, s32 amount)$/;"	f
rotate_right	libberdip/src/maths.h	/^rotate_right(u32 value, s32 amount)$/;"	f
round	libberdip/src/multilane.h	/^round(f32_4x f4)$/;"	f
round	libberdip/src/multilane.h	/^round(f64_2x a)$/;"	f
round	libberdip/src/vectors.h	/^round(v2 a)$/;"	f
round32	libberdip/src/maths.h	/^round32(f32 value)$/;"	f
round64	libberdip/src/maths.h	/^round64(f64 value)$/;"	f
rowStride	libberdip/src/types.h	/^    u32 rowStride; \/\/ NOTE(michiel): mostly just width, but can be used for subimages$/;"	m	struct:Image
rowStride	libberdip/src/types.h	/^    u32 rowStride;$/;"	m	struct:Image8
run_count	user/xbmd_main.cpp	/^  GtkWidget  *run_count;                    \/\/ Provides # iterations to XBMD$/;"	m	struct:__anon68	file:
run_xbmd	user/bmd.cpp	/^int bmd_t::run_xbmd(xbmd_descriptors_t xbmd_descriptors, int ii) {$/;"	f	class:bmd_t
s0	libberdip/src/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon52
s1	libberdip/src/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon52
s16	libberdip/src/types.h	/^typedef int16_t  s16;$/;"	t
s32	libberdip/src/tokenizer.h	/^        s32 s32; \/\/ TODO(michiel): Implement at get_token level$/;"	m	union:Token::__anon49
s32	libberdip/src/types.h	/^typedef int32_t  s32;$/;"	t
s32_4x_add	libberdip/src/multilane.h	/^s32_4x_add(f32_4x a, f32_4x b)$/;"	f
s32_4x_and	libberdip/src/multilane.h	/^s32_4x_and(f32_4x a, f32_4x b)$/;"	f
s32_4x_and_not	libberdip/src/multilane.h	/^s32_4x_and_not(f32_4x a, f32_4x b)$/;"	f
s32_4x_equal	libberdip/src/multilane.h	/^s32_4x_equal(f32_4x a, f32_4x b)$/;"	f
s32_4x_from_f32	libberdip/src/multilane.h	/^s32_4x_from_f32(f32_4x a)$/;"	f
s32_4x_from_f32_trunc	libberdip/src/multilane.h	/^s32_4x_from_f32_trunc(f32_4x a)$/;"	f
s32_4x_greater	libberdip/src/multilane.h	/^s32_4x_greater(f32_4x a, f32_4x b)$/;"	f
s32_4x_less	libberdip/src/multilane.h	/^s32_4x_less(f32_4x a, f32_4x b)$/;"	f
s32_4x_or	libberdip/src/multilane.h	/^s32_4x_or(f32_4x a, f32_4x b)$/;"	f
s32_4x_sll	libberdip/src/multilane.h	/^s32_4x_sll(f32_4x a, s32 count)$/;"	f
s32_4x_sra	libberdip/src/multilane.h	/^s32_4x_sra(f32_4x a, s32 count)$/;"	f
s32_4x_srl	libberdip/src/multilane.h	/^s32_4x_srl(f32_4x a, s32 count)$/;"	f
s32_4x_sub	libberdip/src/multilane.h	/^s32_4x_sub(f32_4x a, f32_4x b)$/;"	f
s32_4x_xor	libberdip/src/multilane.h	/^s32_4x_xor(f32_4x a, f32_4x b)$/;"	f
s32_from_cstring_start	libberdip/src/strings.h	/^s32_from_cstring_start(char *str)$/;"	f
s64	libberdip/src/types.h	/^typedef int64_t  s64;$/;"	t
s64_2x_add	libberdip/src/multilane.h	/^s64_2x_add(f64_2x a, f64_2x b)$/;"	f
s64_2x_sll	libberdip/src/multilane.h	/^s64_2x_sll(f64_2x a, s32 count)$/;"	f
s64_2x_sra	libberdip/src/multilane.h	/^s64_2x_sra(f64_2x a, s32 count)$/;"	f
s64_2x_srl	libberdip/src/multilane.h	/^s64_2x_srl(f64_2x a, s32 count)$/;"	f
s64_2x_sub	libberdip/src/multilane.h	/^s64_2x_sub(f64_2x a, f64_2x b)$/;"	f
s64_from_f64_2x	libberdip/src/multilane.h	/^s64_from_f64_2x(f64_2x a, b32 doHigh = false)$/;"	f
s8	libberdip/src/types.h	/^typedef int8_t   s8;$/;"	t
sRGB255_from_linear1	libberdip/src/vectors.h	/^sRGB255_from_linear1(v4 c)$/;"	f
sRGB_from_linear	libberdip/src/vectors.h	/^sRGB_from_linear(v4 c)$/;"	f
sRGB_linearize	libberdip/src/vectors.h	/^sRGB_linearize(f32 r, f32 g, f32 b, f32 a)$/;"	f
sRGB_linearize	libberdip/src/vectors.h	/^sRGB_linearize(v4 c)$/;"	f
s_curve	libberdip/src/perlin.h	153;"	d
s_curve	libberdip/src/perlin.h	204;"	d
s_curve	libberdip/src/perlin.h	28;"	d
s_curve	libberdip/src/perlin.h	412;"	d
safe_draw_pixel	libberdip/src/drawing.cpp	/^safe_draw_pixel(Image *image, s32 x, s32 y, v4 colour)$/;"	f
safe_ratio0	libberdip/src/maths.h	/^safe_ratio0(f32 num, f32 den)$/;"	f
safe_ratio1	libberdip/src/maths.h	/^safe_ratio1(f32 num, f32 den)$/;"	f
safe_ratio_n	libberdip/src/maths.h	/^safe_ratio_n(f32 num, f32 den, f32 N)$/;"	f
safe_truncate_to_s16	libberdip/src/common.h	/^internal s16 safe_truncate_to_s16(s64 value) { i_expect(value <= (s64)S16_MAX); i_expect(value >= (s64)S16_MIN); return (s16)value; }$/;"	f
safe_truncate_to_s16	libberdip/src/common.h	/^internal s16 safe_truncate_to_s16(s64 value) { i_expect(value <= 0x7FFFLL); i_expect(value >= 0xFFFFFFFFFFFF8000LL); return (s16)value; }$/;"	f
safe_truncate_to_s16	libberdip/src/common_cpp.h	/^internal s16 safe_truncate_to_s16(s32 value) { i_expect(value <= (s32)S16_MAX); i_expect(value >= (s32)S16_MIN); return (s16)value; }$/;"	f
safe_truncate_to_s16	libberdip/src/common_cpp.h	/^internal s16 safe_truncate_to_s16(s32 value) { i_expect(value <= (s32)S16_MAX); i_expect(value >= 0xFFFF8000); return (s16)value; }$/;"	f
safe_truncate_to_s32	libberdip/src/common.h	/^internal s32 safe_truncate_to_s32(s64 value) { i_expect(value <= (s64)S32_MAX); i_expect(value >= (s64)S32_MIN); return (s32)value; }$/;"	f
safe_truncate_to_s8	libberdip/src/common.h	/^internal s8  safe_truncate_to_s8(s64 value)  { i_expect(value <= (s64)S8_MAX); i_expect(value >= (s64)S8_MIN); return (s8)value; }$/;"	f
safe_truncate_to_s8	libberdip/src/common.h	/^internal s8  safe_truncate_to_s8(s64 value)  { i_expect(value <= 0x7FLL); i_expect(value >= 0xFFFFFFFFFFFFFF80LL); return (s8)value; }$/;"	f
safe_truncate_to_s8	libberdip/src/common_cpp.h	/^internal s8  safe_truncate_to_s8(s16 value)  { i_expect(value <= (s16)S8_MAX); i_expect(value >= (s16)S8_MIN); return (s8)value; }$/;"	f
safe_truncate_to_s8	libberdip/src/common_cpp.h	/^internal s8  safe_truncate_to_s8(s16 value)  { i_expect(value <= (s16)S8_MAX); i_expect(value >= 0xFF80); return (s8)value; }$/;"	f
safe_truncate_to_s8	libberdip/src/common_cpp.h	/^internal s8  safe_truncate_to_s8(s32 value)  { i_expect(value <= (s32)S8_MAX); i_expect(value >= (s32)S8_MIN); return (s8)value; }$/;"	f
safe_truncate_to_s8	libberdip/src/common_cpp.h	/^internal s8  safe_truncate_to_s8(s32 value)  { i_expect(value <= (s32)S8_MAX); i_expect(value >= 0xFFFFFF80); return (s8)value; }$/;"	f
safe_truncate_to_u16	libberdip/src/common.h	/^internal u16 safe_truncate_to_u16(u64 value) { i_expect(value <= U16_MAX); return (u16)(value & U16_MAX); }$/;"	f
safe_truncate_to_u16	libberdip/src/common_cpp.h	/^internal u16 safe_truncate_to_u16(u32 value) { i_expect(value <= U16_MAX); return (u16)(value & U16_MAX); }$/;"	f
safe_truncate_to_u32	libberdip/src/common.h	/^internal u32 safe_truncate_to_u32(u64 value) { i_expect(value <= U32_MAX); return (u32)(value & U32_MAX); }$/;"	f
safe_truncate_to_u8	libberdip/src/common.h	/^internal u8  safe_truncate_to_u8(u64 value)  { i_expect(value <= U8_MAX);  return (u8)(value & U8_MAX); }$/;"	f
safe_truncate_to_u8	libberdip/src/common_cpp.h	/^internal u8  safe_truncate_to_u8(u16 value)  { i_expect(value <= U8_MAX);  return (u8)(value & U8_MAX); }$/;"	f
safe_truncate_to_u8	libberdip/src/common_cpp.h	/^internal u8  safe_truncate_to_u8(u32 value)  { i_expect(value <= U8_MAX);  return (u8)(value & U8_MAX); }$/;"	f
save	user/MersenneTwister.h	/^inline void MTRand::save( uint32* saveArray ) const$/;"	f	class:MTRand
saveAll	libberdip/src/json.h	/^    b32 saveAll;     \/\/ NOTE(michiel): If true, all needed strings are copied out of the scanner.$/;"	m	struct:JsonParser
save_advance	libberdip/src/common.h	/^save_advance(Buffer b, u32 amount)$/;"	f
scanner	libberdip/src/json.h	/^    String scanner;$/;"	m	struct:JsonParser
scanner	libberdip/src/tokenizer.h	/^    String scanner;$/;"	m	struct:Tokenizer
scroll	libberdip/src/platform.h	/^    s32 scroll;           \/\/ NOTE(michiel): + for scroll up, - for down$/;"	m	struct:Mouse
seed	user/MersenneTwister.h	/^inline void MTRand::seed( uint32 *const bigSeed )$/;"	f	class:MTRand
seed	user/MersenneTwister.h	/^inline void MTRand::seed( uint32 oneSeed )$/;"	f	class:MTRand
seed	user/MersenneTwister.h	/^inline void MTRand::seed()$/;"	f	class:MTRand
select	libberdip/src/multilane.h	/^select(f32_4x op0, f32_4x mask, f32_4x op1)$/;"	f
select	libberdip/src/multilane.h	/^select(f64_2x op0, f64_2x mask, f64_2x op1)$/;"	f
select	libberdip/src/multilane.h	/^select(v2_4x op0, f32_4x mask, v2_4x op1)$/;"	f
select	libberdip/src/multilane.h	/^select(v3_4x op0, f32_4x mask, v3_4x op1)$/;"	f
select	libberdip/src/multilane.h	/^select(v4_4x op0, f32_4x mask, v4_4x op1)$/;"	f
selector	libberdip/src/random.h	/^    u64 selector;$/;"	m	struct:RandomSeriesPCG
selector	libberdip/src/random_simd.h	/^    f32_4x selector;$/;"	m	struct:RandomSeriesPCG_4x
semaphoreHandle	libberdip/src/linux_threading.cpp	/^    sem_t        semaphoreHandle;$/;"	m	struct:PlatformWorkQueue	file:
sentinel	libberdip/src/linux_memory.h	/^    LinuxMemoryBlock sentinel;$/;"	m	struct:LinuxGlobalMemory
sentinel	libberdip/src/std_memory.h	/^    StdMemoryBlock sentinel;$/;"	m	struct:StdGlobalMemory
series	libberdip/src/random.h	/^    RandomSeriesPCG *series;$/;"	m	struct:RandomList
serving	libberdip/src/intrinsics.h	/^    u32 volatile serving;$/;"	m	struct:TicketMutex
set_file_position	libberdip/src/files.h	/^    SetFilePosition *set_file_position;$/;"	m	struct:FileAPI
set_length	libberdip/src/vectors.h	/^set_length(v2 a, f32 length)$/;"	f
setup	libberdip/src/perlin.h	205;"	d
setup	libberdip/src/perlin.h	411;"	d
sha1_digest	libberdip/src/sha.cpp	/^sha1_digest(umm byteCount, u8 *bytes, u32 *output)$/;"	f
sha1_finish	libberdip/src/sha.cpp	/^sha1_finish(Sha1Context *context, u32 *output)$/;"	f
sha1_initialize	libberdip/src/sha.cpp	/^sha1_initialize(void)$/;"	f
sha1_padding	libberdip/src/sha.cpp	/^sha1_padding(Sha1Context *context, umm srcCount, u8 *src,$/;"	f
sha1_process_chunk	libberdip/src/sha.cpp	/^sha1_process_chunk(Sha1Context *context, u8 *chunk)$/;"	f
sha256_digest	libberdip/src/sha.cpp	/^sha256_digest(umm byteCount, u8 *bytes, u32 *output)$/;"	f
sha256_finish	libberdip/src/sha.cpp	/^sha256_finish(Sha256Context *context, u32 *output)$/;"	f
sha256_initialize	libberdip/src/sha.cpp	/^sha256_initialize(void)$/;"	f
sha256_padding	libberdip/src/sha.cpp	/^sha256_padding(Sha256Context *context, umm srcCount, u8 *src,$/;"	f
sha256_process_chunk	libberdip/src/sha.cpp	/^sha256_process_chunk(Sha256Context *context, u8 *chunk)$/;"	f
sign_of	libberdip/src/maths.h	/^sign_of(f32 value)$/;"	f
sign_of	libberdip/src/maths.h	/^sign_of(f64 value)$/;"	f
sign_of	libberdip/src/maths.h	/^sign_of(s32 value)$/;"	f
sign_of	libberdip/src/maths.h	/^sign_of(s64 value)$/;"	f
sin	libberdip/src/multilane.h	/^    f32_4x sin;$/;"	m	struct:SinCos32_4x
sin	libberdip/src/multilane.h	/^    f64_2x sin;$/;"	m	struct:SinCos64_2x
sin_f32	libberdip/src/trigonometry_v1.h	/^sin_f32(f32 angle)$/;"	f
sin_f32	libberdip/src/trigonometry_v2.h	/^sin_f32(f32 angle)$/;"	f
sin_f32_4x	libberdip/src/multilane.h	/^sin_f32_4x(f32_4x angles)$/;"	f
sin_f32_approx7_small	libberdip/src/trigonometry_v1.h	/^sin_f32_approx7_small(f32 angle)$/;"	f
sin_f64	libberdip/src/trigonometry_v1.h	/^sin_f64(f64 angle)$/;"	f
sin_f64_approx7_small	libberdip/src/trigonometry_v1.h	/^sin_f64_approx7_small(f64 angle)$/;"	f
sin_pi	libberdip/src/trigonometry_v1.h	/^sin_pi(f32 radians)$/;"	f
sin_pi	libberdip/src/trigonometry_v1.h	/^sin_pi(f64 radians)$/;"	f
sin_pi	libberdip/src/trigonometry_v2.h	/^sin_pi(f32 angle)$/;"	f
sin_pi	libberdip/src/trigonometry_v2.h	/^sin_pi(f64 angle)$/;"	f
sincos_f32	libberdip/src/trigonometry_v2.h	/^sincos_f32(f32 angle)$/;"	f
sincos_f32_4x	libberdip/src/multilane.h	/^sincos_f32_4x(f32_4x angles)$/;"	f
sincos_f32_4x_approx_small	libberdip/src/multilane.h	/^sincos_f32_4x_approx_small(f32_4x angles)$/;"	f
sincos_pi	libberdip/src/trigonometry_v2.h	/^sincos_pi(f32 angle)$/;"	f
sincos_pi_4x	libberdip/src/multilane.h	/^sincos_pi_4x(f32_4x angles)$/;"	f
sinh	libberdip/src/trigonometry_v1.h	/^sinh(f32 x)$/;"	f
sinh	libberdip/src/trigonometry_v1.h	/^sinh(f64 x)$/;"	f
size	libberdip/src/bitmap.cpp	/^    u32       size;$/;"	m	struct:BitmapHeader_v5	file:
size	libberdip/src/bitmap.cpp	/^    u32 size;$/;"	m	struct:BitmapHeader	file:
size	libberdip/src/memory.h	/^    u32 size;$/;"	m	struct:InternedString
size	libberdip/src/memory.h	/^    umm size;$/;"	m	struct:PlatformMemoryBlock
size	libberdip/src/stb_truetype.h	/^   int size;$/;"	m	struct:__anon50
size	libberdip/src/suballoc.h	/^    umm size;                 \/\/ NOTE(michiel): If given to the user as memory, this will have the bucket size$/;"	m	union:SubAllocItem
size	libberdip/src/types.h	/^    umm size;$/;"	m	struct:Buffer
sizeOfBitmap	libberdip/src/bitmap.cpp	/^    u32       sizeOfBitmap;$/;"	m	struct:BitmapHeader_v5	file:
sizeOfBitmap	libberdip/src/bitmap.cpp	/^    u32 sizeOfBitmap;$/;"	m	struct:BitmapHeader	file:
sizeof	libberdip/src/types.h	/^compile_expect(sizeof(umm) == sizeof(size_t));$/;"	v
skip_missing	libberdip/src/stb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context
slow_gaussian	libberdip/src/random.h	/^slow_gaussian(RandomSeriesPCG *series)$/;"	f
slow_gaussian_choice	libberdip/src/random.h	/^slow_gaussian_choice(RandomSeriesPCG *series, u32 choiceCount, u32 gaussionCount = 8)$/;"	f
slow_gaussian_choice	libberdip/src/random.h	/^slow_gaussian_choice(RandomSeriesPCG *series, u32 choiceCount, u32 gaussionCount)$/;"	f
smm	libberdip/src/types.h	/^typedef signed long        smm;$/;"	t
smm	libberdip/src/types.h	/^typedef signed long int    smm;$/;"	t
smm	libberdip/src/types.h	/^typedef signed long long   smm;$/;"	t
splitCount	libberdip/src/suballoc.h	/^    u32 splitCount;    \/\/ NOTE(michiel): Count of blocks that got split to provide memory$/;"	m	struct:SubAllocator
square	libberdip/src/complex.h	/^square(Complex32 c)$/;"	f
square	libberdip/src/complex.h	/^square(Complex64 c)$/;"	f
square	libberdip/src/maths.h	/^square(f32 f)$/;"	f
square	libberdip/src/maths.h	/^square(f64 f)$/;"	f
square	libberdip/src/multilane.h	/^square(f32_4x f4)$/;"	f
square	libberdip/src/multilane.h	/^square(f64_2x a)$/;"	f
square_root	libberdip/src/maths.h	/^square_root(f32 value)$/;"	f
square_root	libberdip/src/maths.h	/^square_root(f64 value)$/;"	f
square_root	libberdip/src/multilane.h	/^square_root(f32_4x f4)$/;"	f
start_button	user/xbmd_main.cpp	/^  GtkWidget  *start_button;                 \/\/ Button starts DMA transfer$/;"	m	struct:__anon68	file:
started	libberdip/src/stb_truetype.h	/^   int started;$/;"	m	struct:__anon64
starts_with	libberdip/src/strings.h	/^starts_with(String baseString, String expectedPrefix)$/;"	f
state	libberdip/src/random.h	/^    u64 state;$/;"	m	struct:RandomSeriesPCG
state	libberdip/src/random_simd.h	/^    f32_4x state;$/;"	m	struct:RandomSeriesPCG_4x
state	user/MersenneTwister.h	/^	uint32 state[N];  \/\/ internal state$/;"	m	class:MTRand
static_string	libberdip/src/strings.h	308;"	d
static_string	libberdip/src/strings.h	310;"	d
stbrp_context	libberdip/src/stb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon66
stbrp_coord	libberdip/src/stb_truetype.h	/^typedef int stbrp_coord;$/;"	t
stbrp_init_target	libberdip/src/stb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_node	libberdip/src/stb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon67
stbrp_pack_rects	libberdip/src/stb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_rect	libberdip/src/stb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	libberdip/src/stb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbtt_BakeFontBitmap	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f
stbtt_BakeFontBitmap_internal	libberdip/src/stb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian_internal	libberdip/src/stb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f
stbtt_FindGlyphIndex	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f
stbtt_FindMatchingFont	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f
stbtt_FindMatchingFont_internal	libberdip/src/stb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbtt_int32 flags)$/;"	f
stbtt_FlattenCurves	libberdip/src/stb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)$/;"	f
stbtt_FreeBitmap	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeSDF	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeShape	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f
stbtt_GetBakedQuad	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)$/;"	f
stbtt_GetCodepointBitmap	libberdip/src/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBitmapBox	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapBoxSubpixel	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapSubpixel	libberdip/src/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBox	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetCodepointHMetrics	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetCodepointKernAdvance	libberdip/src/stb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f
stbtt_GetCodepointSDF	libberdip/src/stb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int codepoint, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointShape	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)$/;"	f
stbtt_GetFontBoundingBox	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetFontNameString	libberdip/src/stb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)$/;"	f
stbtt_GetFontOffsetForIndex	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f
stbtt_GetFontOffsetForIndex_internal	libberdip/src/stb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f
stbtt_GetFontVMetrics	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)$/;"	f
stbtt_GetFontVMetricsOS2	libberdip/src/stb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDescent, int *typoLineGap)$/;"	f
stbtt_GetGlyphBitmap	libberdip/src/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBitmapBox	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapBoxSubpixel	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapSubpixel	libberdip/src/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBox	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetGlyphHMetrics	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetGlyphKernAdvance	libberdip/src/stb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f
stbtt_GetGlyphSDF	libberdip/src/stb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphShape	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt_GetNumberOfFonts	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f
stbtt_GetNumberOfFonts_internal	libberdip/src/stb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f
stbtt_GetPackedQuad	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int align_to_integer)$/;"	f
stbtt_GetScaledFontVMetrics	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size, float *ascent, float *descent, float *lineGap)$/;"	f
stbtt_InitFont	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f
stbtt_InitFont_internal	libberdip/src/stb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f
stbtt_IsGlyphEmpty	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt_MakeCodepointBitmap	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixel	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixelPrefilter	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int codepoint)$/;"	f
stbtt_MakeGlyphBitmap	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixel	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixelPrefilter	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)$/;"	f
stbtt_PackBegin	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)$/;"	f
stbtt_PackEnd	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f
stbtt_PackFontRange	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, float font_size,$/;"	f
stbtt_PackFontRanges	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, stbtt_pack_range *ranges, int num_ranges)$/;"	f
stbtt_PackFontRangesGatherRects	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackFontRangesPackRects	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num_rects)$/;"	f
stbtt_PackFontRangesRenderIntoRects	libberdip/src/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackSetOversampling	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, unsigned int v_oversample)$/;"	f
stbtt_PackSetSkipMissingCodepoints	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f
stbtt_Rasterize	libberdip/src/stb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)$/;"	f
stbtt_ScaleForMappingEmToPixels	libberdip/src/stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f
stbtt_ScaleForPixelHeight	libberdip/src/stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f
stbtt__CompareUTF8toUTF16_bigendian_prefix	libberdip/src/stb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1, stbtt_uint8 *s2, stbtt_int32 len2)$/;"	f
stbtt__GetCoverageIndex	libberdip/src/stb_truetype.h	/^static stbtt_int32  stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f
stbtt__GetGlyfOffset	libberdip/src/stb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__GetGlyphClass	libberdip/src/stb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f
stbtt__GetGlyphGPOSInfoAdvance	libberdip/src/stb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphInfoT2	libberdip/src/stb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt__GetGlyphKernInfoAdvance	libberdip/src/stb_truetype.h	/^static int  stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphShapeT2	libberdip/src/stb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__GetGlyphShapeTT	libberdip/src/stb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__active_edge	libberdip/src/stb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	libberdip/src/stb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	libberdip/src/stb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f
stbtt__bitmap	libberdip/src/stb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon57
stbtt__buf	libberdip/src/stb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon50
stbtt__buf_get	libberdip/src/stb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f
stbtt__buf_get16	libberdip/src/stb_truetype.h	1146;"	d
stbtt__buf_get32	libberdip/src/stb_truetype.h	1147;"	d
stbtt__buf_get8	libberdip/src/stb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f
stbtt__buf_peek8	libberdip/src/stb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f
stbtt__buf_range	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f
stbtt__buf_seek	libberdip/src/stb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f
stbtt__buf_skip	libberdip/src/stb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f
stbtt__cff_get_index	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f
stbtt__cff_index_count	libberdip/src/stb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f
stbtt__cff_index_get	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f
stbtt__cff_int	libberdip/src/stb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f
stbtt__cff_skip_operand	libberdip/src/stb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f
stbtt__check_size16	libberdip/src/stb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t
stbtt__check_size32	libberdip/src/stb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t
stbtt__cid_get_glyph_subrs	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__close_shape	libberdip/src/stb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off,$/;"	f
stbtt__compute_crossings_x	libberdip/src/stb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f
stbtt__csctx	libberdip/src/stb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon64
stbtt__csctx_close_shape	libberdip/src/stb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f
stbtt__csctx_rccurve_to	libberdip/src/stb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy2, float dx3, float dy3)$/;"	f
stbtt__csctx_rline_to	libberdip/src/stb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_rmove_to	libberdip/src/stb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_v	libberdip/src/stb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy, stbtt_int32 cx1, stbtt_int32 cy1)$/;"	f
stbtt__cuberoot	libberdip/src/stb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f
stbtt__dict_get	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f
stbtt__dict_get_ints	libberdip/src/stb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f
stbtt__edge	libberdip/src/stb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	libberdip/src/stb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	libberdip/src/stb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)$/;"	f
stbtt__fill_active_edges_new	libberdip/src/stb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__active_edge *e, float y_top)$/;"	f
stbtt__find_table	libberdip/src/stb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)$/;"	f
stbtt__get_subr	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f
stbtt__get_subrs	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f
stbtt__h_prefilter	libberdip/src/stb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt__handle_clipped_edge	libberdip/src/stb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, float y0, float x1, float y1)$/;"	f
stbtt__hheap	libberdip/src/stb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	libberdip/src/stb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	libberdip/src/stb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f
stbtt__hheap_chunk	libberdip/src/stb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	libberdip/src/stb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	libberdip/src/stb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f
stbtt__hheap_free	libberdip/src/stb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f
stbtt__isfont	libberdip/src/stb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f
stbtt__matches	libberdip/src/stb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)$/;"	f
stbtt__matchpair	libberdip/src/stb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)$/;"	f
stbtt__new_active	libberdip/src/stb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float start_point, void *userdata)$/;"	f
stbtt__new_buf	libberdip/src/stb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f
stbtt__oversample_shift	libberdip/src/stb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f
stbtt__point	libberdip/src/stb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon65
stbtt__rasterize	libberdip/src/stb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)$/;"	f
stbtt__rasterize_sorted_edges	libberdip/src/stb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)$/;"	f
stbtt__ray_intersect_bezier	libberdip/src/stb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], float q2[2], float hits[2][2])$/;"	f
stbtt__run_charstring	libberdip/src/stb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f
stbtt__solve_cubic	libberdip/src/stb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f
stbtt__sort_edges	libberdip/src/stb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_ins_sort	libberdip/src/stb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_quicksort	libberdip/src/stb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f
stbtt__tesselate_cubic	libberdip/src/stb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3, float objspace_flatness_squared, int n)$/;"	f
stbtt__tesselate_curve	libberdip/src/stb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)$/;"	f
stbtt__test_oversample_pow2	libberdip/src/stb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ? 1 : -1];$/;"	t
stbtt__track_vertex	libberdip/src/stb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f
stbtt__v_prefilter	libberdip/src/stb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt_aligned_quad	libberdip/src/stb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon52
stbtt_bakedchar	libberdip/src/stb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon51
stbtt_fontinfo	libberdip/src/stb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	libberdip/src/stb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	libberdip/src/rendering2d.cpp	29;"	d	file:
stbtt_int16	libberdip/src/stb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t
stbtt_int32	libberdip/src/rendering2d.cpp	31;"	d	file:
stbtt_int32	libberdip/src/stb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t
stbtt_int8	libberdip/src/rendering2d.cpp	27;"	d	file:
stbtt_int8	libberdip/src/stb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t
stbtt_pack_context	libberdip/src/stb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	libberdip/src/stb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	libberdip/src/stb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon54
stbtt_packedchar	libberdip/src/stb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon53
stbtt_setvertex	libberdip/src/stb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy)$/;"	f
stbtt_tag	libberdip/src/stb_truetype.h	1260;"	d
stbtt_tag4	libberdip/src/stb_truetype.h	1259;"	d
stbtt_uint16	libberdip/src/rendering2d.cpp	28;"	d	file:
stbtt_uint16	libberdip/src/stb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t
stbtt_uint32	libberdip/src/rendering2d.cpp	30;"	d	file:
stbtt_uint32	libberdip/src/stb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t
stbtt_uint8	libberdip/src/rendering2d.cpp	26;"	d	file:
stbtt_uint8	libberdip/src/stb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t
stbtt_vertex	libberdip/src/stb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anon56
stbtt_vertex_type	libberdip/src/stb_truetype.h	808;"	d
std_deallocate_memory_block	libberdip/src/std_memory.cpp	/^std_deallocate_memory_block(StdMemoryBlock *block)$/;"	f
stdfile2stream	libberdip/src/files.h	63;"	d
stream2stdfile	libberdip/src/files.h	64;"	d
stride	libberdip/src/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon57
stride_in_bytes	libberdip/src/stb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context
string	libberdip/src/json.h	/^        String        string;$/;"	m	union:JsonValue::__anon1
string	libberdip/src/strings.h	/^string(const char *cString)$/;"	f
string	libberdip/src/strings.h	/^string(u8 *cString)$/;"	f
string	libberdip/src/strings.h	/^string(umm size, const char *data)$/;"	f
string	libberdip/src/strings.h	/^string(umm size, const void *data)$/;"	f
string_concat	libberdip/src/strings.h	/^string_concat(String a, String b, umm destSize, char *dest)$/;"	f
string_contains	libberdip/src/strings.h	/^string_contains(String str, String subStr)$/;"	f
string_contains	libberdip/src/strings.h	/^string_contains(String str, const char *subStr)$/;"	f
string_contains	libberdip/src/strings.h	/^string_contains(const char *str, String subStr)$/;"	f
string_fmt	libberdip/src/strings.h	/^string_fmt(u32 maxDestCount, u8 *dest, const char *fmt, ...)$/;"	f
string_from_ip4	libberdip/src/strings.h	/^string_from_ip4(u32 ip4addr, u32 maxDataCount, u8 *data)$/;"	f
string_from_ip6	libberdip/src/strings.h	/^string_from_ip6(void *ip6src, u32 maxDataCount, u8 *data)$/;"	f
string_length	libberdip/src/strings.h	/^string_length(const char *cString)$/;"	f
stringc	libberdip/src/strings.h	/^stringc(const char *cString)$/;"	f
strings_are_equal	libberdip/src/strings.h	/^strings_are_equal(String a, String b)$/;"	f
strings_are_equal	libberdip/src/strings.h	/^strings_are_equal(String a, const char *b)$/;"	f
strings_are_equal	libberdip/src/strings.h	/^strings_are_equal(const char *a, String b)$/;"	f
strings_are_equal	libberdip/src/strings.h	/^strings_are_equal(const char *a, const char *b)$/;"	f
strings_are_equal	libberdip/src/strings.h	/^strings_are_equal(umm size, const char *a, String b)$/;"	f
strings_are_equal	libberdip/src/strings.h	/^strings_are_equal(umm size, const char *a, const char *b)$/;"	f
strings_are_equal_c	libberdip/src/strings.h	/^strings_are_equal_c(const char *a, String b)$/;"	f
strings_are_equal_sc	libberdip/src/strings.h	/^strings_are_equal_sc(umm size, const char *a, String b)$/;"	f
strip_front_whitespace	libberdip/src/json.cpp	/^strip_front_whitespace(JsonParser *parser)$/;"	f
strip_whitespace	libberdip/src/json.cpp	/^strip_whitespace(String *s)$/;"	f
sub_alloc_string	libberdip/src/suballoc.cpp	/^sub_alloc_string(SubAllocator *subAllocator, u32 size, u32 flags)$/;"	f
sub_alloc_string_fmt	libberdip/src/suballoc.cpp	/^sub_alloc_string_fmt(SubAllocator *subAllocator, char *fmt, ...)$/;"	f
sub_coalesce	libberdip/src/suballoc.cpp	/^sub_coalesce(SubAllocator *subAllocator)$/;"	f
sub_dealloc_string	libberdip/src/suballoc.cpp	/^sub_dealloc_string(SubAllocator *subAllocator, String s)$/;"	f
suballoc_expect	libberdip/src/suballoc.cpp	10;"	d	file:
suballoc_expect	libberdip/src/suballoc.cpp	8;"	d	file:
subrs	libberdip/src/stb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo
sy	libberdip/src/stb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge
t0	libberdip/src/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon52
t1	libberdip/src/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon52
tan_f32_4x	libberdip/src/multilane.h	/^tan_f32_4x(f32_4x angles)$/;"	f
tan_pi	libberdip/src/trigonometry_v1.h	/^tan_pi(f32 angle)$/;"	f
tan_pi	libberdip/src/trigonometry_v1.h	/^tan_pi(f64 angle)$/;"	f
tan_pi	libberdip/src/trigonometry_v2.h	/^tan_pi(f32 angle)$/;"	f
tan_pi	libberdip/src/trigonometry_v2.h	/^tan_pi(f64 angle)$/;"	f
tempCount	libberdip/src/memory.h	/^    s32 tempCount;$/;"	m	struct:MemoryArena
temp_bitmap	libberdip/src/stb_truetype.h	/^unsigned char temp_bitmap[512*512];$/;"	v
terabytes	libberdip/src/common.h	226;"	d
test_circular_buffer	libberdip/src/circularbuf.cpp	/^test_circular_buffer(MemoryAllocator *allocator)$/;"	f
test_error	libberdip/src/tests.h	/^test_error(const char *fmt, ...)$/;"	f
test_fatal	libberdip/src/tests.h	/^test_fatal(const char *fmt, ...)$/;"	f
test_format	libberdip/src/tests.h	/^test_format(const char *name, const char *fmt, ...)$/;"	f
test_vformat	libberdip/src/tests.h	/^test_vformat(const char *type, const char *fmt, va_list args)$/;"	f
textureBuffer	libberdip/src/rendering2d.h	/^    u32* textureBuffer;$/;"	m	struct:Renderer2D
textureByteCount	libberdip/src/rendering2d.h	/^    u32 textureByteCount;$/;"	m	struct:Renderer2D
threading	libberdip/src/platform.h	/^    ThreadingAPI threading;$/;"	m	struct:API
ticket	libberdip/src/intrinsics.h	/^    u32 volatile ticket;$/;"	m	struct:TicketMutex
titleize	libberdip/src/strings.h	/^titleize(String str, u32 maxDestSize, u8 *dest)$/;"	f
to_camel	libberdip/src/strings.h	/^to_camel(String str, u32 maxDestSize, u8 *dest)$/;"	f
to_cstring	libberdip/src/strings.h	313;"	d
to_lower	libberdip/src/strings.h	/^to_lower(String str, u32 maxDestSize, u8 *dest)$/;"	f
to_lower_case	libberdip/src/strings.h	/^to_lower_case(u32 x)$/;"	f
to_snake	libberdip/src/strings.h	/^to_snake(String str, u32 maxDestSize, u8 *dest)$/;"	f
to_upper	libberdip/src/strings.h	/^to_upper(String str, u32 maxDestSize, u8 *dest)$/;"	f
to_upper_case	libberdip/src/strings.h	/^to_upper_case(u32 x)$/;"	f
toggle_gui_sensitivity	user/xbmd_main.cpp	/^void toggle_gui_sensitivity(xbmd_app *app, bool on_off){$/;"	f
tokenize_error	libberdip/src/tokenizer.cpp	/^tokenize_error(Tokenizer *tokenizer, char *fmt, ...)$/;"	f
tokenize_error	libberdip/src/tokenizer.cpp	/^tokenize_error(Tokenizer *tokenizer, char *fmt, va_list args)$/;"	f
totalSize	libberdip/src/suballoc.h	/^    u32 totalSize;     \/\/ NOTE(michiel): Total usable size$/;"	m	struct:SubAllocator
totalWeight	libberdip/src/random.h	/^    f32 totalWeight;$/;"	m	struct:RandomList
trans_streaming	user/xbmd_descriptors.h	/^  bool              trans_streaming;        \/\/ Transmit Streaming enable $/;"	m	struct:xbmd_descriptors_t
trim_leading_whitespace	libberdip/src/strings.h	/^trim_leading_whitespace(String *s)$/;"	f
trim_leading_whitespace	libberdip/src/strings.h	/^trim_leading_whitespace(String s)$/;"	f
true	libberdip/src/common.h	85;"	d
trunc	libberdip/src/maths.h	580;"	d
trunc	libberdip/src/maths.h	642;"	d
truncate32	libberdip/src/maths.h	/^truncate32(f32 value)$/;"	f
truncate64	libberdip/src/maths.h	/^truncate64(f64 value)$/;"	f
try_decimal_from_string	libberdip/src/strings.h	/^try_decimal_from_string(String s, s64 *dest)$/;"	f
try_float_from_string	libberdip/src/strings.h	/^try_float_from_string(String s, f64 *dest)$/;"	f
try_parse_half_hex_byte	libberdip/src/strings.h	/^try_parse_half_hex_byte(char c, u32 *dest)$/;"	f
ttBYTE	libberdip/src/stb_truetype.h	1250;"	d
ttCHAR	libberdip/src/stb_truetype.h	1251;"	d
ttFixed	libberdip/src/stb_truetype.h	1252;"	d
ttLONG	libberdip/src/stb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttSHORT	libberdip/src/stb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f
ttULONG	libberdip/src/stb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttUSHORT	libberdip/src/stb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f
ttf_buffer	libberdip/src/stb_truetype.h	/^char ttf_buffer[1<<25];$/;"	v
ttf_buffer	libberdip/src/stb_truetype.h	/^unsigned char ttf_buffer[1<<20];$/;"	v
twist	user/MersenneTwister.h	/^	uint32 twist( const uint32& m, const uint32& s0, const uint32& s1 ) const$/;"	f	class:MTRand
type	libberdip/src/stb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anon56
u	libberdip/src/common.h	/^typedef union u32f32 { u32 u; f32 f; } U32F32;$/;"	m	union:u32f32
u	libberdip/src/common.h	/^typedef union u64f64 { u64 u; f64 f; } U64F64;$/;"	m	union:u64f64
u	libberdip/src/multilane.h	/^    u32     u[4];$/;"	m	union:f32_4x
u	libberdip/src/multilane.h	/^    u64     u[2];$/;"	m	union:f64_2x
u16	libberdip/src/types.h	/^typedef uint16_t u16;$/;"	t
u16	user/xbmd_user.h	/^typedef uint16_t u16;$/;"	t
u16_from_hex	libberdip/src/strings.h	/^u16_from_hex(char *hex)$/;"	f
u32	libberdip/src/tokenizer.h	/^        u32 u32;$/;"	m	union:Token::__anon49
u32	libberdip/src/types.h	/^typedef uint32_t u32;$/;"	t
u32	user/xbmd_user.h	/^typedef uint32_t u32;$/;"	t
u32_from_hex	libberdip/src/strings.h	/^u32_from_hex(char *hex)$/;"	f
u32f32	libberdip/src/common.h	/^internal U32F32 u32f32(f32 f) { U32F32 t; t.f = f; return t; }$/;"	f
u32f32	libberdip/src/common.h	/^internal U32F32 u32f32(u32 u) { U32F32 t; t.u = u; return t; }$/;"	f
u32f32	libberdip/src/common.h	/^typedef union u32f32 { u32 u; f32 f; } U32F32;$/;"	u
u64	libberdip/src/types.h	/^typedef uint64_t u64;$/;"	t
u64	user/xbmd_user.h	/^typedef uint64_t u64;$/;"	t
u64_from_ptr	libberdip/src/common.h	208;"	d
u64f64	libberdip/src/common.h	/^internal U64F64 u64f64(f64 f) { U64F64 t; t.f = f; return t; }$/;"	f
u64f64	libberdip/src/common.h	/^internal U64F64 u64f64(u64 u) { U64F64 t; t.u = u; return t; }$/;"	f
u64f64	libberdip/src/common.h	/^typedef union u64f64 { u64 u; f64 f; } U64F64;$/;"	u
u8	libberdip/src/types.h	/^typedef uint8_t  u8;$/;"	t
u8	user/xbmd_user.h	/^typedef uint8_t  u8;$/;"	t
u8_from_hex	libberdip/src/strings.h	/^u8_from_hex(char *hex)$/;"	f
uint32	user/MersenneTwister.h	/^	typedef unsigned long uint32;  \/\/ unsigned integer type, at least 32 bits$/;"	t	class:MTRand
umm	libberdip/src/types.h	/^typedef unsigned long      umm;$/;"	t
umm	libberdip/src/types.h	/^typedef unsigned long int  umm;$/;"	t
umm	libberdip/src/types.h	/^typedef unsigned long long umm;$/;"	t
unicodeCodePoint	libberdip/src/fonts.h	/^    u32 unicodeCodePoint;$/;"	m	struct:FontGlyph
unicodeMap	libberdip/src/fonts.cpp	/^    u32 *unicodeMap;$/;"	m	struct:FontLoader	file:
unicodeMap	libberdip/src/fonts.h	/^    u16 *unicodeMap; \/\/ [onePastHighestCodePoint]$/;"	m	struct:BitmapFont
unpack_colour	libberdip/src/vectors.h	/^unpack_colour(u32 colour)$/;"	f
unpack_colour	libberdip/src/vectors.h	/^unpack_colour(u8 colour)$/;"	f
unpack_colour_bgr	libberdip/src/vectors.h	/^unpack_colour_bgr(u32 colour)$/;"	f
unpack_colours	libberdip/src/drawing_simd.cpp	/^unpack_colours(f32_4x colours)$/;"	f
unpack_font	libberdip/src/fonts.h	/^unpack_font(MemoryAllocator *allocator, u8 *fontData, BitmapFont *result)$/;"	f
unused	libberdip/src/common.h	81;"	d
update_config	user/cli.cpp	/^update_config(Config *config, int fd)$/;"	f
update_mark	libberdip/src/suballoc.cpp	/^update_mark(SubAllocator *subAllocator, u8 *newValue)$/;"	f
used	libberdip/src/memory.h	/^    umm used;$/;"	m	struct:PlatformMemoryBlock
used	libberdip/src/memory.h	/^    umm used;$/;"	m	struct:TempArenaMemory
user_allocator_context	libberdip/src/stb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context
userdata	libberdip/src/stb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo
utf8_codepoint_size	libberdip/src/strings.h	/^utf8_codepoint_size(String str)$/;"	f
v2	libberdip/src/vector_types.h	/^typedef union v2 {$/;"	u
v2	libberdip/src/vector_types.h	/^} v2;$/;"	t	typeref:union:v2
v2_4x	libberdip/src/multilane.h	/^union v2_4x$/;"	u
v2d	libberdip/src/vector_types.h	/^typedef union v2d {$/;"	u
v2d	libberdip/src/vector_types.h	/^} v2d;$/;"	t	typeref:union:v2d
v2s	libberdip/src/vector_types.h	/^typedef union v2s {$/;"	u
v2s	libberdip/src/vector_types.h	/^} v2s;$/;"	t	typeref:union:v2s
v2u	libberdip/src/vector_types.h	/^typedef union v2u {$/;"	u
v2u	libberdip/src/vector_types.h	/^} v2u;$/;"	t	typeref:union:v2u
v3	libberdip/src/vector_types.h	/^typedef union v3 {$/;"	u
v3	libberdip/src/vector_types.h	/^} v3;$/;"	t	typeref:union:v3
v3_4x	libberdip/src/multilane.h	/^union v3_4x$/;"	u
v3s	libberdip/src/vector_types.h	/^typedef union v3s {$/;"	u
v3s	libberdip/src/vector_types.h	/^} v3s;$/;"	t	typeref:union:v3s
v3u	libberdip/src/vector_types.h	/^typedef union v3u {$/;"	u
v3u	libberdip/src/vector_types.h	/^} v3u;$/;"	t	typeref:union:v3u
v4	libberdip/src/vector_types.h	/^typedef union v4 {$/;"	u
v4	libberdip/src/vector_types.h	/^} v4;$/;"	t	typeref:union:v4
v4_4x	libberdip/src/multilane.h	/^union v4_4x$/;"	u
v4s	libberdip/src/vector_types.h	/^typedef union v4s {$/;"	u
v4s	libberdip/src/vector_types.h	/^} v4s;$/;"	t	typeref:union:v4s
v4u	libberdip/src/vector_types.h	/^typedef union v4u {$/;"	u
v4u	libberdip/src/vector_types.h	/^} v4u;$/;"	t	typeref:union:v4u
v_oversample	libberdip/src/stb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon54
v_oversample	libberdip/src/stb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
value	kernel/xbmd.c	/^        int value;$/;"	m	struct:RegWrite::__anon74	file:
value	libberdip/src/json.h	/^    JsonValue value;$/;"	m	struct:JsonItem
value	libberdip/src/json.h	/^    String value;$/;"	m	struct:JsonArrayIter
value	libberdip/src/tokenizer.h	/^    String value; \/\/ TODO(michiel): Rename to text$/;"	m	struct:Token
value	libberdip/src/utf8conv.py	/^        value = int(sys.argv[1], 0)$/;"	v
value	libberdip/src/utf8conv.py	/^    value = 0xBE20$/;"	v
valueCount	libberdip/src/json.h	/^    u32 valueCount;$/;"	m	struct:JsonArray
values	libberdip/src/json.h	/^    JsonValue *values;$/;"	m	struct:JsonArray
values	libberdip/src/memory.h	/^    u64 *values;$/;"	m	struct:MemoryMap
verbose	libberdip/src/files.h	/^    u32 verbose;$/;"	m	struct:FileStream
verify_link_config	user/xbmd_main.cpp	/^int verify_link_config(xbmd_app *app) {$/;"	f
vertResolution	libberdip/src/bitmap.cpp	/^    s32       vertResolution;$/;"	m	struct:BitmapHeader_v5	file:
vertResolution	libberdip/src/bitmap.cpp	/^    s32 vertResolution;$/;"	m	struct:BitmapHeader	file:
vertexBuffer	libberdip/src/rendering2d.h	/^    Vertex2D *vertexBuffer;$/;"	m	struct:Renderer2D
vertexCount	libberdip/src/rendering2d.h	/^    u32 vertexCount;$/;"	m	struct:Renderer2D
void_bits	libberdip/src/bitstreamer.cpp	/^void_bits(BitStreamer *bitStream, u32 nrBits)$/;"	f
void_bytes	libberdip/src/bitstreamer.cpp	/^void_bytes(BitStreamer *bitStream, u32 nrBytes)$/;"	f
vprint	libberdip/src/files.cpp	13;"	d	file:
vprint_api	libberdip/src/files.cpp	/^vprint_api(FileAPI *api, FileStream *stream, char *fmt, va_list args)$/;"	f
vprintln	libberdip/src/files.cpp	14;"	d	file:
vprintln_api	libberdip/src/files.cpp	/^vprintln_api(FileAPI *api, FileStream *stream, char *fmt, va_list args)$/;"	f
vprintln_begin	libberdip/src/files.cpp	15;"	d	file:
vprintln_begin_api	libberdip/src/files.cpp	/^vprintln_begin_api(FileAPI *api, FileStream *stream, char *fmt, va_list args)$/;"	f
vprintln_end	libberdip/src/files.cpp	16;"	d	file:
vprintln_end_api	libberdip/src/files.cpp	/^vprintln_end_api(FileAPI *api, FileStream *stream, char *fmt, va_list args)$/;"	f
vstring_fmt	libberdip/src/strings.h	/^vstring_fmt(u32 maxDestCount, u8 *dest, const char *fmt, va_list args)$/;"	f
w	libberdip/src/multilane.h	/^        f32_4x w;$/;"	m	struct:v4_4x::__anon6
w	libberdip/src/stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
w	libberdip/src/stb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anon57
w	libberdip/src/vector_types.h	/^        f32 w;$/;"	m	struct:v4::__anon28
w	libberdip/src/vector_types.h	/^        s32 w;$/;"	m	struct:v4s::__anon33
w	libberdip/src/vector_types.h	/^        u32 w;$/;"	m	struct:v4u::__anon41
was_packed	libberdip/src/stb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
weight	libberdip/src/random.h	/^    f32 weight;$/;"	m	struct:RandomListEntry
width	libberdip/src/bitmap.cpp	/^    s32       width;$/;"	m	struct:BitmapHeader_v5	file:
width	libberdip/src/bitmap.cpp	/^    s32 width;$/;"	m	struct:BitmapHeader	file:
width	libberdip/src/rendering2d.h	/^    u32 width;$/;"	m	struct:Renderer2D
width	libberdip/src/stb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context
width	libberdip/src/stb_truetype.h	/^   int width,height;$/;"	m	struct:__anon66
width	libberdip/src/types.h	/^    u32 width;$/;"	m	struct:Image
width	libberdip/src/types.h	/^    u32 width;$/;"	m	struct:Image8
width	libberdip/src/vector_types.h	/^        f32 width;$/;"	m	struct:v2::__anon12
width	libberdip/src/vector_types.h	/^        s32 width;$/;"	m	struct:v2s::__anon14
width	libberdip/src/vector_types.h	/^        u32 width;$/;"	m	struct:v2u::__anon16
wildcard	libberdip/src/linux_file.c	/^    String wildcard;$/;"	m	struct:LinuxFileGroup	file:
window	user/xbmd_main.cpp	/^  GtkWidget  *window;                       \/\/ Main GUI Window Widget$/;"	m	struct:__anon68	file:
wr_bytes_to_trans	user/xbmd_descriptors.h	/^    char              wr_bytes_to_trans[16];  \/\/ Number of Write Bytes to Transfer$/;"	m	struct:xbmd_descriptors_t
wr_enable	user/xbmd_descriptors.h	/^  unsigned int      wr_enable;              \/\/ Write Enable$/;"	m	struct:xbmd_descriptors_t
wr_mbps	user/bmd.h	/^  int wr_mbps;                     \/\/ Contains Write Performance.  SUM of total performance per run (not iteration)$/;"	m	class:bmd_t
wr_mbps	user/xbmd_descriptors.h	/^    const char*       wr_mbps;                \/\/ Write Performance text $/;"	m	struct:xbmd_descriptors_t
wr_mbps_c	user/bmd.h	/^    char wr_mbps_c[32];                 \/\/ Char string showing performance that is passed to GUI WR MBPS field$/;"	m	class:bmd_t
wr_pattern_length	user/xbmd_descriptors.h	/^  int               wr_pattern_length;      \/\/ Write Pattern Length$/;"	m	struct:xbmd_descriptors_t
wr_pattern_new	user/xbmd_descriptors.h	/^  const char*       wr_pattern_new;         \/\/ Write Pattern$/;"	m	struct:xbmd_descriptors_t
wr_pattern_valid	user/xbmd_descriptors.h	/^  bool              wr_pattern_valid;       \/\/ Write Pattern Valid$/;"	m	struct:xbmd_descriptors_t
wr_result_text	user/bmd.h	/^  const char* wr_result_text;      \/\/ Contains text stating success of WR DMA or error condition if one exists$/;"	m	class:bmd_t
wr_status	user/xbmd_descriptors.h	/^  const char*       wr_status;              \/\/ Write Status text$/;"	m	struct:xbmd_descriptors_t
wr_success	user/bmd.h	/^  bool wr_success;                 \/\/ Bool declaring if Write DMA was successful$/;"	m	class:bmd_t
wr_tlp_size	user/xbmd_descriptors.h	/^  int               wr_tlp_size;            \/\/ Write TLP Size$/;"	m	struct:xbmd_descriptors_t
writeAddr	kernel/xbmd.c	/^    dma_addr_t    writeAddr;$/;"	m	struct:xbmd_device	file:
writeBuffer	kernel/xbmd.c	/^    u8           *writeBuffer;$/;"	m	struct:xbmd_device	file:
writeIndex	libberdip/src/circularbuf.h	/^    u32 writeIndex;$/;"	m	struct:CircularBuffer
write_bitmap	libberdip/src/bitmap.cpp	/^write_bitmap(FileAPI *api, Image *image, String outputFilename)$/;"	f
write_bitmap	libberdip/src/bitmap.cpp	/^write_bitmap(FileAPI *api, Image *image, char *outputFilename)$/;"	f
write_bytes_to_transfer	user/xbmd_main.cpp	/^  GtkWidget  *write_bytes_to_transfer;      \/\/ Displays Write DMA bytes to trans$/;"	m	struct:__anon68	file:
write_bytes_transferred	user/xbmd_main.cpp	/^  GtkWidget  *write_bytes_transferred;      \/\/ Displays Write bytes transferred$/;"	m	struct:__anon68	file:
write_check	user/xbmd_main.cpp	/^  GtkWidget  *write_check;                  \/\/ Enables Write DMA$/;"	m	struct:__anon68	file:
write_data	user/cli.cpp	/^write_data(int file, u32 size, const void *buffer)$/;"	f
write_entire_file	libberdip/src/files.h	/^    WriteEntireFile *write_entire_file;$/;"	m	struct:FileAPI
write_fmt_to_file	libberdip/src/files.h	/^    WriteFmtToFile *write_fmt_to_file;$/;"	m	struct:FileAPI
write_mbps	user/xbmd_main.cpp	/^  GtkWidget  *write_mbps;                   \/\/ Displays Write Performance$/;"	m	struct:__anon68	file:
write_num_tlps	user/xbmd_main.cpp	/^  GtkWidget  *write_num_tlps;               \/\/ Sets # of Write TLPs to transfer$/;"	m	struct:__anon68	file:
write_status	user/xbmd_main.cpp	/^  GtkWidget  *write_status;                 \/\/ Displays Write status\/result$/;"	m	struct:__anon68	file:
write_tlp_pattern	user/xbmd_main.cpp	/^  GtkWidget  *write_tlp_pattern;            \/\/ Sets Write TLP payload pattern$/;"	m	struct:__anon68	file:
write_tlp_size	user/xbmd_main.cpp	/^  GtkWidget  *write_tlp_size;               \/\/ Sets Write TLP size$/;"	m	struct:__anon68	file:
write_to_file	libberdip/src/files.h	/^    WriteToFile *write_to_file;$/;"	m	struct:FileAPI
write_vfmt_to_file	libberdip/src/files.h	/^    WriteVFmtToFile *write_vfmt_to_file;$/;"	m	struct:FileAPI
x	libberdip/src/multilane.h	/^        f32_4x x;$/;"	m	struct:v2_4x::__anon2
x	libberdip/src/multilane.h	/^        f32_4x x;$/;"	m	struct:v3_4x::__anon3
x	libberdip/src/multilane.h	/^        f32_4x x;$/;"	m	struct:v4_4x::__anon6
x	libberdip/src/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon56
x	libberdip/src/stb_truetype.h	/^   float x, y;$/;"	m	struct:__anon64
x	libberdip/src/stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon65
x	libberdip/src/stb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge
x	libberdip/src/stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon66
x	libberdip/src/stb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
x	libberdip/src/stb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anon67
x	libberdip/src/vector_types.h	/^                        s32 x;$/;"	m	struct:v4s::__anon33::__anon34::__anon35::__anon36::__anon37
x	libberdip/src/vector_types.h	/^                        u32 x;$/;"	m	struct:v4u::__anon41::__anon42::__anon43::__anon44::__anon45
x	libberdip/src/vector_types.h	/^                f32 x;$/;"	m	struct:v3::__anon18::__anon19::__anon20
x	libberdip/src/vector_types.h	/^                s32 x;$/;"	m	struct:v3s::__anon22::__anon23::__anon24
x	libberdip/src/vector_types.h	/^                u32 x;$/;"	m	struct:v3u::__anon25::__anon26::__anon27
x	libberdip/src/vector_types.h	/^        f32 x;$/;"	m	struct:v2::__anon11
x	libberdip/src/vector_types.h	/^        f32 x;$/;"	m	struct:v4::__anon28
x	libberdip/src/vector_types.h	/^        f64 x;$/;"	m	struct:v2d::__anon17
x	libberdip/src/vector_types.h	/^        s32 x;$/;"	m	struct:v2s::__anon13
x	libberdip/src/vector_types.h	/^        u32 x;$/;"	m	struct:v2u::__anon15
x0	libberdip/src/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x0	libberdip/src/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon52
x0	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon51
x0	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon53
x1	libberdip/src/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x1	libberdip/src/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon52
x1	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon51
x1	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon53
xadvance	libberdip/src/stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon51
xadvance	libberdip/src/stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon53
xbmd_app	user/xbmd_main.cpp	/^} xbmd_app;$/;"	t	typeref:struct:__anon68	file:
xbmd_descriptors	user/xbmd_main.cpp	/^xbmd_descriptors_t xbmd_descriptors;$/;"	v
xbmd_descriptors_t	user/xbmd_descriptors.h	/^  xbmd_descriptors_t() {$/;"	f	struct:xbmd_descriptors_t
xbmd_descriptors_t	user/xbmd_descriptors.h	/^struct xbmd_descriptors_t{$/;"	s
xbmd_device	kernel/xbmd.c	/^    } xbmd_device;$/;"	t	typeref:struct:xbmd_device	file:
xbmd_device	kernel/xbmd.c	/^typedef struct xbmd_device$/;"	s	file:
xbmd_device	kernel/xbmd_direct.c	/^typedef struct xbmd_device$/;"	s	file:
xbmd_device	kernel/xbmd_direct.c	/^} xbmd_device;$/;"	t	typeref:struct:xbmd_device	file:
xbmd_ep	user/xbmd_main.cpp	/^xbmd_ep_t xbmd_ep;$/;"	v
xbmd_ep_t	user/xbmd_ep.h	/^ struct xbmd_ep_t $/;"	s
xbmd_log	user/xbmd_main.cpp	/^  GtkWidget  *xbmd_log;                     \/\/ Displays XBMD post transfer log$/;"	m	struct:__anon68	file:
xoff	libberdip/src/stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon51
xoff	libberdip/src/stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon53
xoff2	libberdip/src/stb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon53
xpcie_drive	kernel/xbmd_direct.c	/^module_pci_driver(xpcie_drive);$/;"	v
xpcie_drive	kernel/xbmd_direct.c	/^static struct pci_driver xpcie_drive =$/;"	v	typeref:struct:pci_driver	file:
xpcie_exit	kernel/xbmd_direct.c	/^static void xpcie_exit(xbmd_device *dev)$/;"	f	file:
xpcie_fops	kernel/xbmd_direct.c	/^struct file_operations xpcie_fops = {$/;"	v	typeref:struct:file_operations
xpcie_ids	kernel/xbmd_direct.c	/^static const struct pci_device_id xpcie_ids[] =$/;"	v	typeref:struct:pci_device_id	file:
xpcie_init_card	kernel/xbmd_direct.c	/^static void xpcie_init_card(xbmd_device *dev)$/;"	f	file:
xpcie_initiator_reset	kernel/xbmd_direct.c	/^static void xpcie_initiator_reset(xbmd_device *dev)$/;"	f	file:
xpcie_irq_msi_handler	kernel/xbmd_direct.c	/^irqreturn_t xpcie_irq_msi_handler(int irq, void *dev_id)$/;"	f
xpcie_open	kernel/xbmd_direct.c	/^static int xpcie_open(struct inode *inode, struct file *filep)$/;"	f	file:
xpcie_probe	kernel/xbmd_direct.c	/^static int xpcie_probe(struct pci_dev *pci, const struct pci_device_id *pci_id)$/;"	f	file:
xpcie_read	kernel/xbmd_direct.c	/^static ssize_t xpcie_read(struct file *filep, char __user *buf, size_t count, loff_t *f_pos)$/;"	f	file:
xpcie_read_reg	kernel/xbmd_direct.c	/^static u32 xpcie_read_reg(xbmd_device *dev, u32 dwOffset)$/;"	f	file:
xpcie_release	kernel/xbmd_direct.c	/^static int xpcie_release(struct inode *inode, struct file *filep)$/;"	f	file:
xpcie_remove	kernel/xbmd_direct.c	/^void xpcie_remove(struct pci_dev *pci)$/;"	f
xpcie_write	kernel/xbmd_direct.c	/^static ssize_t xpcie_write(struct file *filep, const char __user *buf, size_t count,$/;"	f	file:
xpcie_write_reg	kernel/xbmd_direct.c	/^static void xpcie_write_reg(xbmd_device *dev, u32 dwOffset, u32 val)$/;"	f	file:
xy	libberdip/src/multilane.h	/^        v2_4x xy;$/;"	m	struct:v3_4x::__anon5
xy	libberdip/src/multilane.h	/^        v2_4x xy;$/;"	m	struct:v4_4x::__anon8
xy	libberdip/src/vector_types.h	/^                    v2s xy;$/;"	m	union:v4s::__anon33::__anon34::__anon35::__anon36
xy	libberdip/src/vector_types.h	/^                    v2u xy;$/;"	m	union:v4u::__anon41::__anon42::__anon43::__anon44
xy	libberdip/src/vector_types.h	/^            v2 xy;$/;"	m	union:v3::__anon18::__anon19
xy	libberdip/src/vector_types.h	/^            v2s xy;$/;"	m	union:v3s::__anon22::__anon23
xy	libberdip/src/vector_types.h	/^            v2u xy;$/;"	m	union:v3u::__anon25::__anon26
xy	libberdip/src/vector_types.h	/^        v2 xy;$/;"	m	struct:v4::__anon29
xyz	libberdip/src/multilane.h	/^        v3_4x xyz;$/;"	m	struct:v4_4x::__anon9
xyz	libberdip/src/vector_types.h	/^            v3s xyz;$/;"	m	union:v4s::__anon33::__anon34
xyz	libberdip/src/vector_types.h	/^            v3u xyz;$/;"	m	union:v4u::__anon41::__anon42
xyz	libberdip/src/vector_types.h	/^        v3 xyz;$/;"	m	struct:v4::__anon30
y	libberdip/src/multilane.h	/^        f32_4x y;$/;"	m	struct:v2_4x::__anon2
y	libberdip/src/multilane.h	/^        f32_4x y;$/;"	m	struct:v3_4x::__anon3
y	libberdip/src/multilane.h	/^        f32_4x y;$/;"	m	struct:v4_4x::__anon6
y	libberdip/src/stb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon56
y	libberdip/src/stb_truetype.h	/^   float x, y;$/;"	m	struct:__anon64
y	libberdip/src/stb_truetype.h	/^   float x,y;$/;"	m	struct:__anon65
y	libberdip/src/stb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anon66
y	libberdip/src/stb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect
y	libberdip/src/vector_types.h	/^                        s32 y;$/;"	m	struct:v4s::__anon33::__anon34::__anon35::__anon36::__anon37
y	libberdip/src/vector_types.h	/^                        u32 y;$/;"	m	struct:v4u::__anon41::__anon42::__anon43::__anon44::__anon45
y	libberdip/src/vector_types.h	/^                f32 y;$/;"	m	struct:v3::__anon18::__anon19::__anon20
y	libberdip/src/vector_types.h	/^                s32 y;$/;"	m	struct:v3s::__anon22::__anon23::__anon24
y	libberdip/src/vector_types.h	/^                u32 y;$/;"	m	struct:v3u::__anon25::__anon26::__anon27
y	libberdip/src/vector_types.h	/^        f32 y;$/;"	m	struct:v2::__anon11
y	libberdip/src/vector_types.h	/^        f32 y;$/;"	m	struct:v4::__anon28
y	libberdip/src/vector_types.h	/^        f64 y;$/;"	m	struct:v2d::__anon17
y	libberdip/src/vector_types.h	/^        s32 y;$/;"	m	struct:v2s::__anon13
y	libberdip/src/vector_types.h	/^        u32 y;$/;"	m	struct:v2u::__anon15
y0	libberdip/src/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y0	libberdip/src/stb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon52
y0	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon51
y0	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon53
y1	libberdip/src/stb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y1	libberdip/src/stb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon52
y1	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon51
y1	libberdip/src/stb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon53
yOffset	libberdip/src/fonts.h	/^    f32 yOffset;$/;"	m	struct:FontGlyph
yellow_base_rd	user/xbmd_main.cpp	/^int yellow_base_rd = 0;$/;"	v
yellow_base_wr	user/xbmd_main.cpp	/^int yellow_base_wr = 0;$/;"	v
yoff	libberdip/src/stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon51
yoff	libberdip/src/stb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anon53
yoff2	libberdip/src/stb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anon53
z	libberdip/src/multilane.h	/^        f32_4x z;$/;"	m	struct:v3_4x::__anon3
z	libberdip/src/multilane.h	/^        f32_4x z;$/;"	m	struct:v4_4x::__anon6
z	libberdip/src/vector_types.h	/^                s32 z;$/;"	m	struct:v4s::__anon33::__anon34::__anon35
z	libberdip/src/vector_types.h	/^                u32 z;$/;"	m	struct:v4u::__anon41::__anon42::__anon43
z	libberdip/src/vector_types.h	/^        f32 z;$/;"	m	struct:v3::__anon18
z	libberdip/src/vector_types.h	/^        f32 z;$/;"	m	struct:v4::__anon28
z	libberdip/src/vector_types.h	/^        s32 z;$/;"	m	struct:v3s::__anon22
z	libberdip/src/vector_types.h	/^        u32 z;$/;"	m	struct:v3u::__anon25
zero_f32_4x	libberdip/src/multilane.h	/^zero_f32_4x(void)$/;"	f
zero_s32_4x	libberdip/src/multilane.h	/^zero_s32_4x(void)$/;"	f
zero_v2_4x	libberdip/src/multilane.h	/^zero_v2_4x(void)$/;"	f
zero_v3_4x	libberdip/src/multilane.h	/^zero_v3_4x(void)$/;"	f
zero_v4_4x	libberdip/src/multilane.h	/^zero_v4_4x(void)$/;"	f
zw	libberdip/src/multilane.h	/^        v2_4x zw;$/;"	m	struct:v4_4x::__anon8
zw	libberdip/src/vector_types.h	/^        v2 zw;$/;"	m	struct:v4::__anon29
~bmd_t	user/bmd.cpp	/^bmd_t::~bmd_t(void){$/;"	f	class:bmd_t
~cfg_t	user/cfg.cpp	/^  cfg_t::~cfg_t(void){$/;"	f	class:cfg_t
