!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC ?= gcc$/;"	m
Config	dma_traffic.c	/^struct Config$/;"	s	file:
Config	exerciser.c	/^struct Config$/;"	s	file:
DO_READ_REG	dma_traffic.c	116;"	d	file:
DO_READ_REG	dma_traffic.c	70;"	d	file:
RegValueRead	dma_traffic.c	/^struct RegValueRead$/;"	s	file:
cfg_read_regs	dma_traffic.c	/^int cfg_read_regs(int g_devFile) {$/;"	f
deviceCapOffset	dma_traffic.c	/^	uint32_t deviceCapOffset;$/;"	m	struct:Config	file:
deviceCapOffset	exerciser.c	/^    uint32_t deviceCapOffset;$/;"	m	struct:Config	file:
deviceStatContOffset	dma_traffic.c	/^	uint32_t deviceStatContOffset;$/;"	m	struct:Config	file:
deviceStatContOffset	exerciser.c	/^    uint32_t deviceStatContOffset;$/;"	m	struct:Config	file:
eflag	pcie_error_injection.c	/^int eflag;$/;"	v
fatal_error	direct.cpp	/^fatal_error(char *message, ...)$/;"	f
fd	pcie_error_injection.c	/^int fd;$/;"	v
gRegReads	dma_traffic.c	/^static struct RegValueRead gRegReads[] = {$/;"	v	typeref:struct:RegValueRead	file:
get_capabilities	dma_traffic.c	/^void get_capabilities(struct Config *config, int fd)$/;"	f
get_capabilities	exerciser.c	/^void get_capabilities(struct Config *exerciserconfig, int fd)$/;"	f
getopt_integer	performance.c	/^static uint32_t getopt_integer(char *optarg)$/;"	f	file:
htoll	reg_rw.c	29;"	d	file:
htoll	reg_rw.c	34;"	d	file:
htols	reg_rw.c	30;"	d	file:
htols	reg_rw.c	35;"	d	file:
input_handler	pcie_error_injection.c	/^void input_handler(int num)$/;"	f
linkCapOffset	dma_traffic.c	/^	uint32_t linkCapOffset;$/;"	m	struct:Config	file:
linkCapOffset	exerciser.c	/^    uint32_t linkCapOffset;$/;"	m	struct:Config	file:
linkControl	dma_traffic.c	/^	uint32_t linkControl;$/;"	m	struct:Config	file:
linkControl	exerciser.c	/^    uint32_t linkControl;$/;"	m	struct:Config	file:
linkSpeed	dma_traffic.c	/^	uint32_t linkSpeed;$/;"	m	struct:Config	file:
linkSpeed	exerciser.c	/^    uint32_t linkSpeed;$/;"	m	struct:Config	file:
linkSpeedCap	dma_traffic.c	/^	uint32_t linkSpeedCap;$/;"	m	struct:Config	file:
linkSpeedCap	exerciser.c	/^    uint32_t linkSpeedCap;$/;"	m	struct:Config	file:
linkStatContOffset	dma_traffic.c	/^	uint32_t linkStatContOffset;$/;"	m	struct:Config	file:
linkStatContOffset	exerciser.c	/^    uint32_t linkStatContOffset;$/;"	m	struct:Config	file:
linkWidth	dma_traffic.c	/^	uint32_t linkWidth;$/;"	m	struct:Config	file:
linkWidth	exerciser.c	/^    uint32_t linkWidth;$/;"	m	struct:Config	file:
linkWidthCap	dma_traffic.c	/^	uint32_t linkWidthCap;$/;"	m	struct:Config	file:
linkWidthCap	exerciser.c	/^    uint32_t linkWidthCap;$/;"	m	struct:Config	file:
long_opts	performance.c	/^static struct option const long_opts[] =$/;"	v	file:
ltohl	reg_rw.c	27;"	d	file:
ltohl	reg_rw.c	32;"	d	file:
ltohs	reg_rw.c	28;"	d	file:
ltohs	reg_rw.c	33;"	d	file:
main	direct.c	/^int main(int argc, char **argv)$/;"	f
main	direct.cpp	/^int main(int argc, char **argv)$/;"	f
main	dma_traffic.c	/^int main(int argc, char **argv)$/;"	f
main	exerciser.c	/^int main(int argc, char **argv)$/;"	f
main	pcie_error_injection.c	/^int main(int argc, char **argv)$/;"	f
main	performance.c	/^int main(int argc, char *argv[])$/;"	f
main	reg_rw.c	/^int main(int argc, char **argv)$/;"	f
main	test_chrdev.c	/^int main(int argc, char *argv[])$/;"	f
msiControl	dma_traffic.c	/^	uint32_t msiControl;$/;"	m	struct:Config	file:
msiControl	exerciser.c	/^    uint32_t msiControl;$/;"	m	struct:Config	file:
msiOffset	dma_traffic.c	/^	uint32_t msiOffset;$/;"	m	struct:Config	file:
msiOffset	exerciser.c	/^    uint32_t msiOffset;$/;"	m	struct:Config	file:
msixOffset	dma_traffic.c	/^	uint32_t msixOffset;$/;"	m	struct:Config	file:
name	dma_traffic.c	/^    const char *name;$/;"	m	struct:RegValueRead	file:
output	direct.cpp	/^output(char *message, ...)$/;"	f
pcieCapOffset	dma_traffic.c	/^	uint32_t pcieCapOffset;$/;"	m	struct:Config	file:
pcieCapOffset	exerciser.c	/^    uint32_t pcieCapOffset;$/;"	m	struct:Config	file:
perf	performance.c	/^struct xdma_performance_ioctl perf;$/;"	v	typeref:struct:xdma_performance_ioctl
pmCapabilities	dma_traffic.c	/^	uint32_t pmCapabilities;$/;"	m	struct:Config	file:
pmCapabilities	exerciser.c	/^    uint32_t pmCapabilities;$/;"	m	struct:Config	file:
pmOffset	dma_traffic.c	/^	uint32_t pmOffset;$/;"	m	struct:Config	file:
pmOffset	exerciser.c	/^    uint32_t pmOffset;$/;"	m	struct:Config	file:
pmStatControl	dma_traffic.c	/^	uint32_t pmStatControl;$/;"	m	struct:Config	file:
pmStatControl	exerciser.c	/^    uint32_t pmStatControl;$/;"	m	struct:Config	file:
read_bmd_regs	dma_traffic.c	/^int read_bmd_regs(int g_devFile) {$/;"	f
read_data	dma_traffic.c	/^int read_data(int file, uint32_t size, void *buffer)$/;"	f
read_data	exerciser.c	/^int read_data(int file, uint32_t size, void *buffer)$/;"	f
reg	dma_traffic.c	/^    XbmDmaControlReg reg;$/;"	m	struct:RegValueRead	file:
test_dma	performance.c	/^int test_dma(char *device_name, int size, int count)$/;"	f
u16	xbmd_user.h	/^typedef uint16_t u16;$/;"	t
u32	xbmd_user.h	/^typedef uint32_t u32;$/;"	t
u64	xbmd_user.h	/^typedef uint64_t u64;$/;"	t
u8	xbmd_user.h	/^typedef uint8_t  u8;$/;"	t
update_config	dma_traffic.c	/^void update_config(struct Config *config, int fd)$/;"	f
update_exerciserconfig	exerciser.c	/^void update_exerciserconfig(struct Config *exerciserconfig, int fd)$/;"	f
usage	performance.c	/^static void usage(const char* name)$/;"	f	file:
verbosity	performance.c	/^static int verbosity = 0;$/;"	v	file:
write_data	dma_traffic.c	/^int write_data(int file, uint32_t size, const void *buffer)$/;"	f
write_data	exerciser.c	/^int write_data(int file, uint32_t size, const void *buffer)$/;"	f
